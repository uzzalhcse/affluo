// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"affluo/ent/migrate"

	"affluo/ent/banner"
	"affluo/ent/bannercreative"
	"affluo/ent/campaign"
	"affluo/ent/campaignlink"
	"affluo/ent/payout"
	"affluo/ent/post"
	"affluo/ent/referral"
	"affluo/ent/test"
	"affluo/ent/track"
	"affluo/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Banner is the client for interacting with the Banner builders.
	Banner *BannerClient
	// BannerCreative is the client for interacting with the BannerCreative builders.
	BannerCreative *BannerCreativeClient
	// Campaign is the client for interacting with the Campaign builders.
	Campaign *CampaignClient
	// CampaignLink is the client for interacting with the CampaignLink builders.
	CampaignLink *CampaignLinkClient
	// Payout is the client for interacting with the Payout builders.
	Payout *PayoutClient
	// Post is the client for interacting with the Post builders.
	Post *PostClient
	// Referral is the client for interacting with the Referral builders.
	Referral *ReferralClient
	// Test is the client for interacting with the Test builders.
	Test *TestClient
	// Track is the client for interacting with the Track builders.
	Track *TrackClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Banner = NewBannerClient(c.config)
	c.BannerCreative = NewBannerCreativeClient(c.config)
	c.Campaign = NewCampaignClient(c.config)
	c.CampaignLink = NewCampaignLinkClient(c.config)
	c.Payout = NewPayoutClient(c.config)
	c.Post = NewPostClient(c.config)
	c.Referral = NewReferralClient(c.config)
	c.Test = NewTestClient(c.config)
	c.Track = NewTrackClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Banner:         NewBannerClient(cfg),
		BannerCreative: NewBannerCreativeClient(cfg),
		Campaign:       NewCampaignClient(cfg),
		CampaignLink:   NewCampaignLinkClient(cfg),
		Payout:         NewPayoutClient(cfg),
		Post:           NewPostClient(cfg),
		Referral:       NewReferralClient(cfg),
		Test:           NewTestClient(cfg),
		Track:          NewTrackClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Banner:         NewBannerClient(cfg),
		BannerCreative: NewBannerCreativeClient(cfg),
		Campaign:       NewCampaignClient(cfg),
		CampaignLink:   NewCampaignLinkClient(cfg),
		Payout:         NewPayoutClient(cfg),
		Post:           NewPostClient(cfg),
		Referral:       NewReferralClient(cfg),
		Test:           NewTestClient(cfg),
		Track:          NewTrackClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Banner.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Banner, c.BannerCreative, c.Campaign, c.CampaignLink, c.Payout, c.Post,
		c.Referral, c.Test, c.Track, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Banner, c.BannerCreative, c.Campaign, c.CampaignLink, c.Payout, c.Post,
		c.Referral, c.Test, c.Track, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BannerMutation:
		return c.Banner.mutate(ctx, m)
	case *BannerCreativeMutation:
		return c.BannerCreative.mutate(ctx, m)
	case *CampaignMutation:
		return c.Campaign.mutate(ctx, m)
	case *CampaignLinkMutation:
		return c.CampaignLink.mutate(ctx, m)
	case *PayoutMutation:
		return c.Payout.mutate(ctx, m)
	case *PostMutation:
		return c.Post.mutate(ctx, m)
	case *ReferralMutation:
		return c.Referral.mutate(ctx, m)
	case *TestMutation:
		return c.Test.mutate(ctx, m)
	case *TrackMutation:
		return c.Track.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BannerClient is a client for the Banner schema.
type BannerClient struct {
	config
}

// NewBannerClient returns a client for the Banner from the given config.
func NewBannerClient(c config) *BannerClient {
	return &BannerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `banner.Hooks(f(g(h())))`.
func (c *BannerClient) Use(hooks ...Hook) {
	c.hooks.Banner = append(c.hooks.Banner, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `banner.Intercept(f(g(h())))`.
func (c *BannerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Banner = append(c.inters.Banner, interceptors...)
}

// Create returns a builder for creating a Banner entity.
func (c *BannerClient) Create() *BannerCreate {
	mutation := newBannerMutation(c.config, OpCreate)
	return &BannerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Banner entities.
func (c *BannerClient) CreateBulk(builders ...*BannerCreate) *BannerCreateBulk {
	return &BannerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BannerClient) MapCreateBulk(slice any, setFunc func(*BannerCreate, int)) *BannerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BannerCreateBulk{err: fmt.Errorf("calling to BannerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BannerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BannerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Banner.
func (c *BannerClient) Update() *BannerUpdate {
	mutation := newBannerMutation(c.config, OpUpdate)
	return &BannerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BannerClient) UpdateOne(b *Banner) *BannerUpdateOne {
	mutation := newBannerMutation(c.config, OpUpdateOne, withBanner(b))
	return &BannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BannerClient) UpdateOneID(id int64) *BannerUpdateOne {
	mutation := newBannerMutation(c.config, OpUpdateOne, withBannerID(id))
	return &BannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Banner.
func (c *BannerClient) Delete() *BannerDelete {
	mutation := newBannerMutation(c.config, OpDelete)
	return &BannerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BannerClient) DeleteOne(b *Banner) *BannerDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BannerClient) DeleteOneID(id int64) *BannerDeleteOne {
	builder := c.Delete().Where(banner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BannerDeleteOne{builder}
}

// Query returns a query builder for Banner.
func (c *BannerClient) Query() *BannerQuery {
	return &BannerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBanner},
		inters: c.Interceptors(),
	}
}

// Get returns a Banner entity by its id.
func (c *BannerClient) Get(ctx context.Context, id int64) (*Banner, error) {
	return c.Query().Where(banner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BannerClient) GetX(ctx context.Context, id int64) *Banner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCampaigns queries the campaigns edge of a Banner.
func (c *BannerClient) QueryCampaigns(b *Banner) *CampaignQuery {
	query := (&CampaignClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(banner.Table, banner.FieldID, id),
			sqlgraph.To(campaign.Table, campaign.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, banner.CampaignsTable, banner.CampaignsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatives queries the creatives edge of a Banner.
func (c *BannerClient) QueryCreatives(b *Banner) *BannerCreativeQuery {
	query := (&BannerCreativeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(banner.Table, banner.FieldID, id),
			sqlgraph.To(bannercreative.Table, bannercreative.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, banner.CreativesTable, banner.CreativesColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BannerClient) Hooks() []Hook {
	return c.hooks.Banner
}

// Interceptors returns the client interceptors.
func (c *BannerClient) Interceptors() []Interceptor {
	return c.inters.Banner
}

func (c *BannerClient) mutate(ctx context.Context, m *BannerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BannerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BannerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BannerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Banner mutation op: %q", m.Op())
	}
}

// BannerCreativeClient is a client for the BannerCreative schema.
type BannerCreativeClient struct {
	config
}

// NewBannerCreativeClient returns a client for the BannerCreative from the given config.
func NewBannerCreativeClient(c config) *BannerCreativeClient {
	return &BannerCreativeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bannercreative.Hooks(f(g(h())))`.
func (c *BannerCreativeClient) Use(hooks ...Hook) {
	c.hooks.BannerCreative = append(c.hooks.BannerCreative, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bannercreative.Intercept(f(g(h())))`.
func (c *BannerCreativeClient) Intercept(interceptors ...Interceptor) {
	c.inters.BannerCreative = append(c.inters.BannerCreative, interceptors...)
}

// Create returns a builder for creating a BannerCreative entity.
func (c *BannerCreativeClient) Create() *BannerCreativeCreate {
	mutation := newBannerCreativeMutation(c.config, OpCreate)
	return &BannerCreativeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BannerCreative entities.
func (c *BannerCreativeClient) CreateBulk(builders ...*BannerCreativeCreate) *BannerCreativeCreateBulk {
	return &BannerCreativeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BannerCreativeClient) MapCreateBulk(slice any, setFunc func(*BannerCreativeCreate, int)) *BannerCreativeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BannerCreativeCreateBulk{err: fmt.Errorf("calling to BannerCreativeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BannerCreativeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BannerCreativeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BannerCreative.
func (c *BannerCreativeClient) Update() *BannerCreativeUpdate {
	mutation := newBannerCreativeMutation(c.config, OpUpdate)
	return &BannerCreativeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BannerCreativeClient) UpdateOne(bc *BannerCreative) *BannerCreativeUpdateOne {
	mutation := newBannerCreativeMutation(c.config, OpUpdateOne, withBannerCreative(bc))
	return &BannerCreativeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BannerCreativeClient) UpdateOneID(id int64) *BannerCreativeUpdateOne {
	mutation := newBannerCreativeMutation(c.config, OpUpdateOne, withBannerCreativeID(id))
	return &BannerCreativeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BannerCreative.
func (c *BannerCreativeClient) Delete() *BannerCreativeDelete {
	mutation := newBannerCreativeMutation(c.config, OpDelete)
	return &BannerCreativeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BannerCreativeClient) DeleteOne(bc *BannerCreative) *BannerCreativeDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BannerCreativeClient) DeleteOneID(id int64) *BannerCreativeDeleteOne {
	builder := c.Delete().Where(bannercreative.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BannerCreativeDeleteOne{builder}
}

// Query returns a query builder for BannerCreative.
func (c *BannerCreativeClient) Query() *BannerCreativeQuery {
	return &BannerCreativeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBannerCreative},
		inters: c.Interceptors(),
	}
}

// Get returns a BannerCreative entity by its id.
func (c *BannerCreativeClient) Get(ctx context.Context, id int64) (*BannerCreative, error) {
	return c.Query().Where(bannercreative.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BannerCreativeClient) GetX(ctx context.Context, id int64) *BannerCreative {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBanner queries the banner edge of a BannerCreative.
func (c *BannerCreativeClient) QueryBanner(bc *BannerCreative) *BannerQuery {
	query := (&BannerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bannercreative.Table, bannercreative.FieldID, id),
			sqlgraph.To(banner.Table, banner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bannercreative.BannerTable, bannercreative.BannerColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BannerCreativeClient) Hooks() []Hook {
	return c.hooks.BannerCreative
}

// Interceptors returns the client interceptors.
func (c *BannerCreativeClient) Interceptors() []Interceptor {
	return c.inters.BannerCreative
}

func (c *BannerCreativeClient) mutate(ctx context.Context, m *BannerCreativeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BannerCreativeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BannerCreativeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BannerCreativeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BannerCreativeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BannerCreative mutation op: %q", m.Op())
	}
}

// CampaignClient is a client for the Campaign schema.
type CampaignClient struct {
	config
}

// NewCampaignClient returns a client for the Campaign from the given config.
func NewCampaignClient(c config) *CampaignClient {
	return &CampaignClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `campaign.Hooks(f(g(h())))`.
func (c *CampaignClient) Use(hooks ...Hook) {
	c.hooks.Campaign = append(c.hooks.Campaign, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `campaign.Intercept(f(g(h())))`.
func (c *CampaignClient) Intercept(interceptors ...Interceptor) {
	c.inters.Campaign = append(c.inters.Campaign, interceptors...)
}

// Create returns a builder for creating a Campaign entity.
func (c *CampaignClient) Create() *CampaignCreate {
	mutation := newCampaignMutation(c.config, OpCreate)
	return &CampaignCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Campaign entities.
func (c *CampaignClient) CreateBulk(builders ...*CampaignCreate) *CampaignCreateBulk {
	return &CampaignCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CampaignClient) MapCreateBulk(slice any, setFunc func(*CampaignCreate, int)) *CampaignCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CampaignCreateBulk{err: fmt.Errorf("calling to CampaignClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CampaignCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CampaignCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Campaign.
func (c *CampaignClient) Update() *CampaignUpdate {
	mutation := newCampaignMutation(c.config, OpUpdate)
	return &CampaignUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CampaignClient) UpdateOne(ca *Campaign) *CampaignUpdateOne {
	mutation := newCampaignMutation(c.config, OpUpdateOne, withCampaign(ca))
	return &CampaignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CampaignClient) UpdateOneID(id int64) *CampaignUpdateOne {
	mutation := newCampaignMutation(c.config, OpUpdateOne, withCampaignID(id))
	return &CampaignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Campaign.
func (c *CampaignClient) Delete() *CampaignDelete {
	mutation := newCampaignMutation(c.config, OpDelete)
	return &CampaignDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CampaignClient) DeleteOne(ca *Campaign) *CampaignDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CampaignClient) DeleteOneID(id int64) *CampaignDeleteOne {
	builder := c.Delete().Where(campaign.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CampaignDeleteOne{builder}
}

// Query returns a query builder for Campaign.
func (c *CampaignClient) Query() *CampaignQuery {
	return &CampaignQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCampaign},
		inters: c.Interceptors(),
	}
}

// Get returns a Campaign entity by its id.
func (c *CampaignClient) Get(ctx context.Context, id int64) (*Campaign, error) {
	return c.Query().Where(campaign.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CampaignClient) GetX(ctx context.Context, id int64) *Campaign {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Campaign.
func (c *CampaignClient) QueryOwner(ca *Campaign) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(campaign.Table, campaign.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, campaign.OwnerTable, campaign.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLinks queries the links edge of a Campaign.
func (c *CampaignClient) QueryLinks(ca *Campaign) *CampaignLinkQuery {
	query := (&CampaignLinkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(campaign.Table, campaign.FieldID, id),
			sqlgraph.To(campaignlink.Table, campaignlink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, campaign.LinksTable, campaign.LinksColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTracks queries the tracks edge of a Campaign.
func (c *CampaignClient) QueryTracks(ca *Campaign) *TrackQuery {
	query := (&TrackClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(campaign.Table, campaign.FieldID, id),
			sqlgraph.To(track.Table, track.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, campaign.TracksTable, campaign.TracksColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReferrals queries the referrals edge of a Campaign.
func (c *CampaignClient) QueryReferrals(ca *Campaign) *ReferralQuery {
	query := (&ReferralClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(campaign.Table, campaign.FieldID, id),
			sqlgraph.To(referral.Table, referral.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, campaign.ReferralsTable, campaign.ReferralsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBanners queries the banners edge of a Campaign.
func (c *CampaignClient) QueryBanners(ca *Campaign) *BannerQuery {
	query := (&BannerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(campaign.Table, campaign.FieldID, id),
			sqlgraph.To(banner.Table, banner.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, campaign.BannersTable, campaign.BannersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CampaignClient) Hooks() []Hook {
	return c.hooks.Campaign
}

// Interceptors returns the client interceptors.
func (c *CampaignClient) Interceptors() []Interceptor {
	return c.inters.Campaign
}

func (c *CampaignClient) mutate(ctx context.Context, m *CampaignMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CampaignCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CampaignUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CampaignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CampaignDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Campaign mutation op: %q", m.Op())
	}
}

// CampaignLinkClient is a client for the CampaignLink schema.
type CampaignLinkClient struct {
	config
}

// NewCampaignLinkClient returns a client for the CampaignLink from the given config.
func NewCampaignLinkClient(c config) *CampaignLinkClient {
	return &CampaignLinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `campaignlink.Hooks(f(g(h())))`.
func (c *CampaignLinkClient) Use(hooks ...Hook) {
	c.hooks.CampaignLink = append(c.hooks.CampaignLink, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `campaignlink.Intercept(f(g(h())))`.
func (c *CampaignLinkClient) Intercept(interceptors ...Interceptor) {
	c.inters.CampaignLink = append(c.inters.CampaignLink, interceptors...)
}

// Create returns a builder for creating a CampaignLink entity.
func (c *CampaignLinkClient) Create() *CampaignLinkCreate {
	mutation := newCampaignLinkMutation(c.config, OpCreate)
	return &CampaignLinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CampaignLink entities.
func (c *CampaignLinkClient) CreateBulk(builders ...*CampaignLinkCreate) *CampaignLinkCreateBulk {
	return &CampaignLinkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CampaignLinkClient) MapCreateBulk(slice any, setFunc func(*CampaignLinkCreate, int)) *CampaignLinkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CampaignLinkCreateBulk{err: fmt.Errorf("calling to CampaignLinkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CampaignLinkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CampaignLinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CampaignLink.
func (c *CampaignLinkClient) Update() *CampaignLinkUpdate {
	mutation := newCampaignLinkMutation(c.config, OpUpdate)
	return &CampaignLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CampaignLinkClient) UpdateOne(cl *CampaignLink) *CampaignLinkUpdateOne {
	mutation := newCampaignLinkMutation(c.config, OpUpdateOne, withCampaignLink(cl))
	return &CampaignLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CampaignLinkClient) UpdateOneID(id int64) *CampaignLinkUpdateOne {
	mutation := newCampaignLinkMutation(c.config, OpUpdateOne, withCampaignLinkID(id))
	return &CampaignLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CampaignLink.
func (c *CampaignLinkClient) Delete() *CampaignLinkDelete {
	mutation := newCampaignLinkMutation(c.config, OpDelete)
	return &CampaignLinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CampaignLinkClient) DeleteOne(cl *CampaignLink) *CampaignLinkDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CampaignLinkClient) DeleteOneID(id int64) *CampaignLinkDeleteOne {
	builder := c.Delete().Where(campaignlink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CampaignLinkDeleteOne{builder}
}

// Query returns a query builder for CampaignLink.
func (c *CampaignLinkClient) Query() *CampaignLinkQuery {
	return &CampaignLinkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCampaignLink},
		inters: c.Interceptors(),
	}
}

// Get returns a CampaignLink entity by its id.
func (c *CampaignLinkClient) Get(ctx context.Context, id int64) (*CampaignLink, error) {
	return c.Query().Where(campaignlink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CampaignLinkClient) GetX(ctx context.Context, id int64) *CampaignLink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCampaign queries the campaign edge of a CampaignLink.
func (c *CampaignLinkClient) QueryCampaign(cl *CampaignLink) *CampaignQuery {
	query := (&CampaignClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(campaignlink.Table, campaignlink.FieldID, id),
			sqlgraph.To(campaign.Table, campaign.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, campaignlink.CampaignTable, campaignlink.CampaignColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTracks queries the tracks edge of a CampaignLink.
func (c *CampaignLinkClient) QueryTracks(cl *CampaignLink) *TrackQuery {
	query := (&TrackClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(campaignlink.Table, campaignlink.FieldID, id),
			sqlgraph.To(track.Table, track.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, campaignlink.TracksTable, campaignlink.TracksColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CampaignLinkClient) Hooks() []Hook {
	return c.hooks.CampaignLink
}

// Interceptors returns the client interceptors.
func (c *CampaignLinkClient) Interceptors() []Interceptor {
	return c.inters.CampaignLink
}

func (c *CampaignLinkClient) mutate(ctx context.Context, m *CampaignLinkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CampaignLinkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CampaignLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CampaignLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CampaignLinkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CampaignLink mutation op: %q", m.Op())
	}
}

// PayoutClient is a client for the Payout schema.
type PayoutClient struct {
	config
}

// NewPayoutClient returns a client for the Payout from the given config.
func NewPayoutClient(c config) *PayoutClient {
	return &PayoutClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payout.Hooks(f(g(h())))`.
func (c *PayoutClient) Use(hooks ...Hook) {
	c.hooks.Payout = append(c.hooks.Payout, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `payout.Intercept(f(g(h())))`.
func (c *PayoutClient) Intercept(interceptors ...Interceptor) {
	c.inters.Payout = append(c.inters.Payout, interceptors...)
}

// Create returns a builder for creating a Payout entity.
func (c *PayoutClient) Create() *PayoutCreate {
	mutation := newPayoutMutation(c.config, OpCreate)
	return &PayoutCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payout entities.
func (c *PayoutClient) CreateBulk(builders ...*PayoutCreate) *PayoutCreateBulk {
	return &PayoutCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PayoutClient) MapCreateBulk(slice any, setFunc func(*PayoutCreate, int)) *PayoutCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PayoutCreateBulk{err: fmt.Errorf("calling to PayoutClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PayoutCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PayoutCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payout.
func (c *PayoutClient) Update() *PayoutUpdate {
	mutation := newPayoutMutation(c.config, OpUpdate)
	return &PayoutUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PayoutClient) UpdateOne(pa *Payout) *PayoutUpdateOne {
	mutation := newPayoutMutation(c.config, OpUpdateOne, withPayout(pa))
	return &PayoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PayoutClient) UpdateOneID(id string) *PayoutUpdateOne {
	mutation := newPayoutMutation(c.config, OpUpdateOne, withPayoutID(id))
	return &PayoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payout.
func (c *PayoutClient) Delete() *PayoutDelete {
	mutation := newPayoutMutation(c.config, OpDelete)
	return &PayoutDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PayoutClient) DeleteOne(pa *Payout) *PayoutDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PayoutClient) DeleteOneID(id string) *PayoutDeleteOne {
	builder := c.Delete().Where(payout.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PayoutDeleteOne{builder}
}

// Query returns a query builder for Payout.
func (c *PayoutClient) Query() *PayoutQuery {
	return &PayoutQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePayout},
		inters: c.Interceptors(),
	}
}

// Get returns a Payout entity by its id.
func (c *PayoutClient) Get(ctx context.Context, id string) (*Payout, error) {
	return c.Query().Where(payout.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PayoutClient) GetX(ctx context.Context, id string) *Payout {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Payout.
func (c *PayoutClient) QueryUser(pa *Payout) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payout.Table, payout.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, payout.UserTable, payout.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PayoutClient) Hooks() []Hook {
	return c.hooks.Payout
}

// Interceptors returns the client interceptors.
func (c *PayoutClient) Interceptors() []Interceptor {
	return c.inters.Payout
}

func (c *PayoutClient) mutate(ctx context.Context, m *PayoutMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PayoutCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PayoutUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PayoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PayoutDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Payout mutation op: %q", m.Op())
	}
}

// PostClient is a client for the Post schema.
type PostClient struct {
	config
}

// NewPostClient returns a client for the Post from the given config.
func NewPostClient(c config) *PostClient {
	return &PostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `post.Hooks(f(g(h())))`.
func (c *PostClient) Use(hooks ...Hook) {
	c.hooks.Post = append(c.hooks.Post, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `post.Intercept(f(g(h())))`.
func (c *PostClient) Intercept(interceptors ...Interceptor) {
	c.inters.Post = append(c.inters.Post, interceptors...)
}

// Create returns a builder for creating a Post entity.
func (c *PostClient) Create() *PostCreate {
	mutation := newPostMutation(c.config, OpCreate)
	return &PostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Post entities.
func (c *PostClient) CreateBulk(builders ...*PostCreate) *PostCreateBulk {
	return &PostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PostClient) MapCreateBulk(slice any, setFunc func(*PostCreate, int)) *PostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PostCreateBulk{err: fmt.Errorf("calling to PostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Post.
func (c *PostClient) Update() *PostUpdate {
	mutation := newPostMutation(c.config, OpUpdate)
	return &PostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostClient) UpdateOne(po *Post) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPost(po))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostClient) UpdateOneID(id string) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPostID(id))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Post.
func (c *PostClient) Delete() *PostDelete {
	mutation := newPostMutation(c.config, OpDelete)
	return &PostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PostClient) DeleteOne(po *Post) *PostDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PostClient) DeleteOneID(id string) *PostDeleteOne {
	builder := c.Delete().Where(post.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostDeleteOne{builder}
}

// Query returns a query builder for Post.
func (c *PostClient) Query() *PostQuery {
	return &PostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePost},
		inters: c.Interceptors(),
	}
}

// Get returns a Post entity by its id.
func (c *PostClient) Get(ctx context.Context, id string) (*Post, error) {
	return c.Query().Where(post.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostClient) GetX(ctx context.Context, id string) *Post {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a Post.
func (c *PostClient) QueryAuthor(po *Post) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, post.AuthorTable, post.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PostClient) Hooks() []Hook {
	return c.hooks.Post
}

// Interceptors returns the client interceptors.
func (c *PostClient) Interceptors() []Interceptor {
	return c.inters.Post
}

func (c *PostClient) mutate(ctx context.Context, m *PostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Post mutation op: %q", m.Op())
	}
}

// ReferralClient is a client for the Referral schema.
type ReferralClient struct {
	config
}

// NewReferralClient returns a client for the Referral from the given config.
func NewReferralClient(c config) *ReferralClient {
	return &ReferralClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `referral.Hooks(f(g(h())))`.
func (c *ReferralClient) Use(hooks ...Hook) {
	c.hooks.Referral = append(c.hooks.Referral, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `referral.Intercept(f(g(h())))`.
func (c *ReferralClient) Intercept(interceptors ...Interceptor) {
	c.inters.Referral = append(c.inters.Referral, interceptors...)
}

// Create returns a builder for creating a Referral entity.
func (c *ReferralClient) Create() *ReferralCreate {
	mutation := newReferralMutation(c.config, OpCreate)
	return &ReferralCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Referral entities.
func (c *ReferralClient) CreateBulk(builders ...*ReferralCreate) *ReferralCreateBulk {
	return &ReferralCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReferralClient) MapCreateBulk(slice any, setFunc func(*ReferralCreate, int)) *ReferralCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReferralCreateBulk{err: fmt.Errorf("calling to ReferralClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReferralCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReferralCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Referral.
func (c *ReferralClient) Update() *ReferralUpdate {
	mutation := newReferralMutation(c.config, OpUpdate)
	return &ReferralUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReferralClient) UpdateOne(r *Referral) *ReferralUpdateOne {
	mutation := newReferralMutation(c.config, OpUpdateOne, withReferral(r))
	return &ReferralUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReferralClient) UpdateOneID(id int64) *ReferralUpdateOne {
	mutation := newReferralMutation(c.config, OpUpdateOne, withReferralID(id))
	return &ReferralUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Referral.
func (c *ReferralClient) Delete() *ReferralDelete {
	mutation := newReferralMutation(c.config, OpDelete)
	return &ReferralDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReferralClient) DeleteOne(r *Referral) *ReferralDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReferralClient) DeleteOneID(id int64) *ReferralDeleteOne {
	builder := c.Delete().Where(referral.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReferralDeleteOne{builder}
}

// Query returns a query builder for Referral.
func (c *ReferralClient) Query() *ReferralQuery {
	return &ReferralQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReferral},
		inters: c.Interceptors(),
	}
}

// Get returns a Referral entity by its id.
func (c *ReferralClient) Get(ctx context.Context, id int64) (*Referral, error) {
	return c.Query().Where(referral.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReferralClient) GetX(ctx context.Context, id int64) *Referral {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryReferrer queries the referrer edge of a Referral.
func (c *ReferralClient) QueryReferrer(r *Referral) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(referral.Table, referral.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, referral.ReferrerTable, referral.ReferrerColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCampaign queries the campaign edge of a Referral.
func (c *ReferralClient) QueryCampaign(r *Referral) *CampaignQuery {
	query := (&CampaignClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(referral.Table, referral.FieldID, id),
			sqlgraph.To(campaign.Table, campaign.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, referral.CampaignTable, referral.CampaignColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReferralClient) Hooks() []Hook {
	return c.hooks.Referral
}

// Interceptors returns the client interceptors.
func (c *ReferralClient) Interceptors() []Interceptor {
	return c.inters.Referral
}

func (c *ReferralClient) mutate(ctx context.Context, m *ReferralMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReferralCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReferralUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReferralUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReferralDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Referral mutation op: %q", m.Op())
	}
}

// TestClient is a client for the Test schema.
type TestClient struct {
	config
}

// NewTestClient returns a client for the Test from the given config.
func NewTestClient(c config) *TestClient {
	return &TestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `test.Hooks(f(g(h())))`.
func (c *TestClient) Use(hooks ...Hook) {
	c.hooks.Test = append(c.hooks.Test, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `test.Intercept(f(g(h())))`.
func (c *TestClient) Intercept(interceptors ...Interceptor) {
	c.inters.Test = append(c.inters.Test, interceptors...)
}

// Create returns a builder for creating a Test entity.
func (c *TestClient) Create() *TestCreate {
	mutation := newTestMutation(c.config, OpCreate)
	return &TestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Test entities.
func (c *TestClient) CreateBulk(builders ...*TestCreate) *TestCreateBulk {
	return &TestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TestClient) MapCreateBulk(slice any, setFunc func(*TestCreate, int)) *TestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TestCreateBulk{err: fmt.Errorf("calling to TestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Test.
func (c *TestClient) Update() *TestUpdate {
	mutation := newTestMutation(c.config, OpUpdate)
	return &TestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestClient) UpdateOne(t *Test) *TestUpdateOne {
	mutation := newTestMutation(c.config, OpUpdateOne, withTest(t))
	return &TestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestClient) UpdateOneID(id int) *TestUpdateOne {
	mutation := newTestMutation(c.config, OpUpdateOne, withTestID(id))
	return &TestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Test.
func (c *TestClient) Delete() *TestDelete {
	mutation := newTestMutation(c.config, OpDelete)
	return &TestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TestClient) DeleteOne(t *Test) *TestDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TestClient) DeleteOneID(id int) *TestDeleteOne {
	builder := c.Delete().Where(test.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestDeleteOne{builder}
}

// Query returns a query builder for Test.
func (c *TestClient) Query() *TestQuery {
	return &TestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTest},
		inters: c.Interceptors(),
	}
}

// Get returns a Test entity by its id.
func (c *TestClient) Get(ctx context.Context, id int) (*Test, error) {
	return c.Query().Where(test.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestClient) GetX(ctx context.Context, id int) *Test {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TestClient) Hooks() []Hook {
	return c.hooks.Test
}

// Interceptors returns the client interceptors.
func (c *TestClient) Interceptors() []Interceptor {
	return c.inters.Test
}

func (c *TestClient) mutate(ctx context.Context, m *TestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Test mutation op: %q", m.Op())
	}
}

// TrackClient is a client for the Track schema.
type TrackClient struct {
	config
}

// NewTrackClient returns a client for the Track from the given config.
func NewTrackClient(c config) *TrackClient {
	return &TrackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `track.Hooks(f(g(h())))`.
func (c *TrackClient) Use(hooks ...Hook) {
	c.hooks.Track = append(c.hooks.Track, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `track.Intercept(f(g(h())))`.
func (c *TrackClient) Intercept(interceptors ...Interceptor) {
	c.inters.Track = append(c.inters.Track, interceptors...)
}

// Create returns a builder for creating a Track entity.
func (c *TrackClient) Create() *TrackCreate {
	mutation := newTrackMutation(c.config, OpCreate)
	return &TrackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Track entities.
func (c *TrackClient) CreateBulk(builders ...*TrackCreate) *TrackCreateBulk {
	return &TrackCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TrackClient) MapCreateBulk(slice any, setFunc func(*TrackCreate, int)) *TrackCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TrackCreateBulk{err: fmt.Errorf("calling to TrackClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TrackCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TrackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Track.
func (c *TrackClient) Update() *TrackUpdate {
	mutation := newTrackMutation(c.config, OpUpdate)
	return &TrackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TrackClient) UpdateOne(t *Track) *TrackUpdateOne {
	mutation := newTrackMutation(c.config, OpUpdateOne, withTrack(t))
	return &TrackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TrackClient) UpdateOneID(id int64) *TrackUpdateOne {
	mutation := newTrackMutation(c.config, OpUpdateOne, withTrackID(id))
	return &TrackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Track.
func (c *TrackClient) Delete() *TrackDelete {
	mutation := newTrackMutation(c.config, OpDelete)
	return &TrackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TrackClient) DeleteOne(t *Track) *TrackDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TrackClient) DeleteOneID(id int64) *TrackDeleteOne {
	builder := c.Delete().Where(track.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TrackDeleteOne{builder}
}

// Query returns a query builder for Track.
func (c *TrackClient) Query() *TrackQuery {
	return &TrackQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrack},
		inters: c.Interceptors(),
	}
}

// Get returns a Track entity by its id.
func (c *TrackClient) Get(ctx context.Context, id int64) (*Track, error) {
	return c.Query().Where(track.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TrackClient) GetX(ctx context.Context, id int64) *Track {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Track.
func (c *TrackClient) QueryUser(t *Track) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(track.Table, track.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, track.UserTable, track.UserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCampaign queries the campaign edge of a Track.
func (c *TrackClient) QueryCampaign(t *Track) *CampaignQuery {
	query := (&CampaignClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(track.Table, track.FieldID, id),
			sqlgraph.To(campaign.Table, campaign.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, track.CampaignTable, track.CampaignColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLink queries the link edge of a Track.
func (c *TrackClient) QueryLink(t *Track) *CampaignLinkQuery {
	query := (&CampaignLinkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(track.Table, track.FieldID, id),
			sqlgraph.To(campaignlink.Table, campaignlink.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, track.LinkTable, track.LinkColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TrackClient) Hooks() []Hook {
	return c.hooks.Track
}

// Interceptors returns the client interceptors.
func (c *TrackClient) Interceptors() []Interceptor {
	return c.inters.Track
}

func (c *TrackClient) mutate(ctx context.Context, m *TrackMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TrackCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TrackUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TrackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TrackDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Track mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCampaigns queries the campaigns edge of a User.
func (c *UserClient) QueryCampaigns(u *User) *CampaignQuery {
	query := (&CampaignClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(campaign.Table, campaign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CampaignsTable, user.CampaignsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReferrals queries the referrals edge of a User.
func (c *UserClient) QueryReferrals(u *User) *ReferralQuery {
	query := (&ReferralClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(referral.Table, referral.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ReferralsTable, user.ReferralsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTracks queries the tracks edge of a User.
func (c *UserClient) QueryTracks(u *User) *TrackQuery {
	query := (&TrackClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(track.Table, track.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TracksTable, user.TracksColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPayouts queries the payouts edge of a User.
func (c *UserClient) QueryPayouts(u *User) *PayoutQuery {
	query := (&PayoutClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(payout.Table, payout.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PayoutsTable, user.PayoutsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPosts queries the posts edge of a User.
func (c *UserClient) QueryPosts(u *User) *PostQuery {
	query := (&PostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PostsTable, user.PostsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Banner, BannerCreative, Campaign, CampaignLink, Payout, Post, Referral, Test,
		Track, User []ent.Hook
	}
	inters struct {
		Banner, BannerCreative, Campaign, CampaignLink, Payout, Post, Referral, Test,
		Track, User []ent.Interceptor
	}
)
