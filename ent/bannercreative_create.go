// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/banner"
	"affluo/ent/bannercreative"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BannerCreativeCreate is the builder for creating a BannerCreative entity.
type BannerCreativeCreate struct {
	config
	mutation *BannerCreativeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bcc *BannerCreativeCreate) SetName(s string) *BannerCreativeCreate {
	bcc.mutation.SetName(s)
	return bcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bcc *BannerCreativeCreate) SetNillableName(s *string) *BannerCreativeCreate {
	if s != nil {
		bcc.SetName(*s)
	}
	return bcc
}

// SetImageURL sets the "image_url" field.
func (bcc *BannerCreativeCreate) SetImageURL(s string) *BannerCreativeCreate {
	bcc.mutation.SetImageURL(s)
	return bcc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (bcc *BannerCreativeCreate) SetNillableImageURL(s *string) *BannerCreativeCreate {
	if s != nil {
		bcc.SetImageURL(*s)
	}
	return bcc
}

// SetSize sets the "size" field.
func (bcc *BannerCreativeCreate) SetSize(s string) *BannerCreativeCreate {
	bcc.mutation.SetSize(s)
	return bcc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (bcc *BannerCreativeCreate) SetNillableSize(s *string) *BannerCreativeCreate {
	if s != nil {
		bcc.SetSize(*s)
	}
	return bcc
}

// SetEnabled sets the "enabled" field.
func (bcc *BannerCreativeCreate) SetEnabled(b bool) *BannerCreativeCreate {
	bcc.mutation.SetEnabled(b)
	return bcc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (bcc *BannerCreativeCreate) SetNillableEnabled(b *bool) *BannerCreativeCreate {
	if b != nil {
		bcc.SetEnabled(*b)
	}
	return bcc
}

// SetCreatedAt sets the "created_at" field.
func (bcc *BannerCreativeCreate) SetCreatedAt(t time.Time) *BannerCreativeCreate {
	bcc.mutation.SetCreatedAt(t)
	return bcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bcc *BannerCreativeCreate) SetNillableCreatedAt(t *time.Time) *BannerCreativeCreate {
	if t != nil {
		bcc.SetCreatedAt(*t)
	}
	return bcc
}

// SetUpdatedAt sets the "updated_at" field.
func (bcc *BannerCreativeCreate) SetUpdatedAt(t time.Time) *BannerCreativeCreate {
	bcc.mutation.SetUpdatedAt(t)
	return bcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bcc *BannerCreativeCreate) SetNillableUpdatedAt(t *time.Time) *BannerCreativeCreate {
	if t != nil {
		bcc.SetUpdatedAt(*t)
	}
	return bcc
}

// SetID sets the "id" field.
func (bcc *BannerCreativeCreate) SetID(i int64) *BannerCreativeCreate {
	bcc.mutation.SetID(i)
	return bcc
}

// SetBannerID sets the "banner" edge to the Banner entity by ID.
func (bcc *BannerCreativeCreate) SetBannerID(id int64) *BannerCreativeCreate {
	bcc.mutation.SetBannerID(id)
	return bcc
}

// SetNillableBannerID sets the "banner" edge to the Banner entity by ID if the given value is not nil.
func (bcc *BannerCreativeCreate) SetNillableBannerID(id *int64) *BannerCreativeCreate {
	if id != nil {
		bcc = bcc.SetBannerID(*id)
	}
	return bcc
}

// SetBanner sets the "banner" edge to the Banner entity.
func (bcc *BannerCreativeCreate) SetBanner(b *Banner) *BannerCreativeCreate {
	return bcc.SetBannerID(b.ID)
}

// Mutation returns the BannerCreativeMutation object of the builder.
func (bcc *BannerCreativeCreate) Mutation() *BannerCreativeMutation {
	return bcc.mutation
}

// Save creates the BannerCreative in the database.
func (bcc *BannerCreativeCreate) Save(ctx context.Context) (*BannerCreative, error) {
	bcc.defaults()
	return withHooks(ctx, bcc.sqlSave, bcc.mutation, bcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bcc *BannerCreativeCreate) SaveX(ctx context.Context) *BannerCreative {
	v, err := bcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcc *BannerCreativeCreate) Exec(ctx context.Context) error {
	_, err := bcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcc *BannerCreativeCreate) ExecX(ctx context.Context) {
	if err := bcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcc *BannerCreativeCreate) defaults() {
	if _, ok := bcc.mutation.Enabled(); !ok {
		v := bannercreative.DefaultEnabled
		bcc.mutation.SetEnabled(v)
	}
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		v := bannercreative.DefaultCreatedAt()
		bcc.mutation.SetCreatedAt(v)
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		v := bannercreative.DefaultUpdatedAt()
		bcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcc *BannerCreativeCreate) check() error {
	if _, ok := bcc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "BannerCreative.enabled"`)}
	}
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BannerCreative.created_at"`)}
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BannerCreative.updated_at"`)}
	}
	if v, ok := bcc.mutation.ID(); ok {
		if err := bannercreative.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "BannerCreative.id": %w`, err)}
		}
	}
	return nil
}

func (bcc *BannerCreativeCreate) sqlSave(ctx context.Context) (*BannerCreative, error) {
	if err := bcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	bcc.mutation.id = &_node.ID
	bcc.mutation.done = true
	return _node, nil
}

func (bcc *BannerCreativeCreate) createSpec() (*BannerCreative, *sqlgraph.CreateSpec) {
	var (
		_node = &BannerCreative{config: bcc.config}
		_spec = sqlgraph.NewCreateSpec(bannercreative.Table, sqlgraph.NewFieldSpec(bannercreative.FieldID, field.TypeInt64))
	)
	if id, ok := bcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bcc.mutation.Name(); ok {
		_spec.SetField(bannercreative.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bcc.mutation.ImageURL(); ok {
		_spec.SetField(bannercreative.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := bcc.mutation.Size(); ok {
		_spec.SetField(bannercreative.FieldSize, field.TypeString, value)
		_node.Size = value
	}
	if value, ok := bcc.mutation.Enabled(); ok {
		_spec.SetField(bannercreative.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := bcc.mutation.CreatedAt(); ok {
		_spec.SetField(bannercreative.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bcc.mutation.UpdatedAt(); ok {
		_spec.SetField(bannercreative.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bcc.mutation.BannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bannercreative.BannerTable,
			Columns: []string{bannercreative.BannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.banner_creatives = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BannerCreativeCreateBulk is the builder for creating many BannerCreative entities in bulk.
type BannerCreativeCreateBulk struct {
	config
	err      error
	builders []*BannerCreativeCreate
}

// Save creates the BannerCreative entities in the database.
func (bccb *BannerCreativeCreateBulk) Save(ctx context.Context) ([]*BannerCreative, error) {
	if bccb.err != nil {
		return nil, bccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bccb.builders))
	nodes := make([]*BannerCreative, len(bccb.builders))
	mutators := make([]Mutator, len(bccb.builders))
	for i := range bccb.builders {
		func(i int, root context.Context) {
			builder := bccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BannerCreativeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bccb *BannerCreativeCreateBulk) SaveX(ctx context.Context) []*BannerCreative {
	v, err := bccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bccb *BannerCreativeCreateBulk) Exec(ctx context.Context) error {
	_, err := bccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bccb *BannerCreativeCreateBulk) ExecX(ctx context.Context) {
	if err := bccb.Exec(ctx); err != nil {
		panic(err)
	}
}
