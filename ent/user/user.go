// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldLastLogin holds the string denoting the last_login field in the database.
	FieldLastLogin = "last_login"
	// FieldResetToken holds the string denoting the reset_token field in the database.
	FieldResetToken = "reset_token"
	// FieldResetTokenExpiresAt holds the string denoting the reset_token_expires_at field in the database.
	FieldResetTokenExpiresAt = "reset_token_expires_at"
	// EdgeCampaigns holds the string denoting the campaigns edge name in mutations.
	EdgeCampaigns = "campaigns"
	// EdgePayouts holds the string denoting the payouts edge name in mutations.
	EdgePayouts = "payouts"
	// EdgeStats holds the string denoting the stats edge name in mutations.
	EdgeStats = "stats"
	// EdgeGigTrackings holds the string denoting the gig_trackings edge name in mutations.
	EdgeGigTrackings = "gig_trackings"
	// EdgeCommissionPlan holds the string denoting the commission_plan edge name in mutations.
	EdgeCommissionPlan = "commission_plan"
	// EdgeAffiliates holds the string denoting the affiliates edge name in mutations.
	EdgeAffiliates = "affiliates"
	// EdgeEarningHistories holds the string denoting the earning_histories edge name in mutations.
	EdgeEarningHistories = "earning_histories"
	// EdgeCommissionHistories holds the string denoting the commission_histories edge name in mutations.
	EdgeCommissionHistories = "commission_histories"
	// Table holds the table name of the user in the database.
	Table = "users"
	// CampaignsTable is the table that holds the campaigns relation/edge.
	CampaignsTable = "campaigns"
	// CampaignsInverseTable is the table name for the Campaign entity.
	// It exists in this package in order to avoid circular dependency with the "campaign" package.
	CampaignsInverseTable = "campaigns"
	// CampaignsColumn is the table column denoting the campaigns relation/edge.
	CampaignsColumn = "user_campaigns"
	// PayoutsTable is the table that holds the payouts relation/edge.
	PayoutsTable = "payouts"
	// PayoutsInverseTable is the table name for the Payout entity.
	// It exists in this package in order to avoid circular dependency with the "payout" package.
	PayoutsInverseTable = "payouts"
	// PayoutsColumn is the table column denoting the payouts relation/edge.
	PayoutsColumn = "user_payouts"
	// StatsTable is the table that holds the stats relation/edge.
	StatsTable = "banner_stats"
	// StatsInverseTable is the table name for the BannerStats entity.
	// It exists in this package in order to avoid circular dependency with the "bannerstats" package.
	StatsInverseTable = "banner_stats"
	// StatsColumn is the table column denoting the stats relation/edge.
	StatsColumn = "user_stats"
	// GigTrackingsTable is the table that holds the gig_trackings relation/edge.
	GigTrackingsTable = "gig_trackings"
	// GigTrackingsInverseTable is the table name for the GigTracking entity.
	// It exists in this package in order to avoid circular dependency with the "gigtracking" package.
	GigTrackingsInverseTable = "gig_trackings"
	// GigTrackingsColumn is the table column denoting the gig_trackings relation/edge.
	GigTrackingsColumn = "gig_tracking_publisher"
	// CommissionPlanTable is the table that holds the commission_plan relation/edge.
	CommissionPlanTable = "users"
	// CommissionPlanInverseTable is the table name for the CommissionPlan entity.
	// It exists in this package in order to avoid circular dependency with the "commissionplan" package.
	CommissionPlanInverseTable = "commission_plans"
	// CommissionPlanColumn is the table column denoting the commission_plan relation/edge.
	CommissionPlanColumn = "commission_plan_publishers"
	// AffiliatesTable is the table that holds the affiliates relation/edge.
	AffiliatesTable = "affiliates"
	// AffiliatesInverseTable is the table name for the Affiliate entity.
	// It exists in this package in order to avoid circular dependency with the "affiliate" package.
	AffiliatesInverseTable = "affiliates"
	// AffiliatesColumn is the table column denoting the affiliates relation/edge.
	AffiliatesColumn = "user_affiliates"
	// EarningHistoriesTable is the table that holds the earning_histories relation/edge.
	EarningHistoriesTable = "earning_histories"
	// EarningHistoriesInverseTable is the table name for the EarningHistory entity.
	// It exists in this package in order to avoid circular dependency with the "earninghistory" package.
	EarningHistoriesInverseTable = "earning_histories"
	// EarningHistoriesColumn is the table column denoting the earning_histories relation/edge.
	EarningHistoriesColumn = "user_earning_histories"
	// CommissionHistoriesTable is the table that holds the commission_histories relation/edge.
	CommissionHistoriesTable = "commission_histories"
	// CommissionHistoriesInverseTable is the table name for the CommissionHistory entity.
	// It exists in this package in order to avoid circular dependency with the "commissionhistory" package.
	CommissionHistoriesInverseTable = "commission_histories"
	// CommissionHistoriesColumn is the table column denoting the commission_histories relation/edge.
	CommissionHistoriesColumn = "user_commission_histories"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldEmail,
	FieldPasswordHash,
	FieldFirstName,
	FieldLastName,
	FieldRole,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldIsActive,
	FieldLastLogin,
	FieldResetToken,
	FieldResetTokenExpiresAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"commission_plan_publishers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// Role defines the type for the "role" enum field.
type Role string

// RoleAffiliate is the default value of the Role enum.
const DefaultRole = RoleAffiliate

// Role values.
const (
	RoleAdmin     Role = "admin"
	RoleAffiliate Role = "affiliate"
	RoleManager   Role = "manager"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleAdmin, RoleAffiliate, RoleManager:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByLastLogin orders the results by the last_login field.
func ByLastLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLogin, opts...).ToFunc()
}

// ByResetToken orders the results by the reset_token field.
func ByResetToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResetToken, opts...).ToFunc()
}

// ByResetTokenExpiresAt orders the results by the reset_token_expires_at field.
func ByResetTokenExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResetTokenExpiresAt, opts...).ToFunc()
}

// ByCampaignsCount orders the results by campaigns count.
func ByCampaignsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCampaignsStep(), opts...)
	}
}

// ByCampaigns orders the results by campaigns terms.
func ByCampaigns(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCampaignsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPayoutsCount orders the results by payouts count.
func ByPayoutsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPayoutsStep(), opts...)
	}
}

// ByPayouts orders the results by payouts terms.
func ByPayouts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPayoutsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStatsCount orders the results by stats count.
func ByStatsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStatsStep(), opts...)
	}
}

// ByStats orders the results by stats terms.
func ByStats(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGigTrackingsCount orders the results by gig_trackings count.
func ByGigTrackingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGigTrackingsStep(), opts...)
	}
}

// ByGigTrackings orders the results by gig_trackings terms.
func ByGigTrackings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGigTrackingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommissionPlanField orders the results by commission_plan field.
func ByCommissionPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommissionPlanStep(), sql.OrderByField(field, opts...))
	}
}

// ByAffiliatesCount orders the results by affiliates count.
func ByAffiliatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAffiliatesStep(), opts...)
	}
}

// ByAffiliates orders the results by affiliates terms.
func ByAffiliates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAffiliatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEarningHistoriesCount orders the results by earning_histories count.
func ByEarningHistoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEarningHistoriesStep(), opts...)
	}
}

// ByEarningHistories orders the results by earning_histories terms.
func ByEarningHistories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEarningHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommissionHistoriesCount orders the results by commission_histories count.
func ByCommissionHistoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommissionHistoriesStep(), opts...)
	}
}

// ByCommissionHistories orders the results by commission_histories terms.
func ByCommissionHistories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommissionHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCampaignsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CampaignsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CampaignsTable, CampaignsColumn),
	)
}
func newPayoutsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PayoutsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PayoutsTable, PayoutsColumn),
	)
}
func newStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StatsTable, StatsColumn),
	)
}
func newGigTrackingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GigTrackingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, GigTrackingsTable, GigTrackingsColumn),
	)
}
func newCommissionPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommissionPlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CommissionPlanTable, CommissionPlanColumn),
	)
}
func newAffiliatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AffiliatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AffiliatesTable, AffiliatesColumn),
	)
}
func newEarningHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EarningHistoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EarningHistoriesTable, EarningHistoriesColumn),
	)
}
func newCommissionHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommissionHistoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommissionHistoriesTable, CommissionHistoriesColumn),
	)
}
