// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/campaign"
	"affluo/ent/campaignlink"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CampaignLink is the model entity for the CampaignLink schema.
type CampaignLink struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UniqueCode holds the value of the "unique_code" field.
	UniqueCode string `json:"unique_code,omitempty"`
	// OriginalURL holds the value of the "original_url" field.
	OriginalURL string `json:"original_url,omitempty"`
	// TrackingURL holds the value of the "tracking_url" field.
	TrackingURL string `json:"tracking_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CampaignLinkQuery when eager-loading is set.
	Edges          CampaignLinkEdges `json:"edges"`
	campaign_links *int64
	selectValues   sql.SelectValues
}

// CampaignLinkEdges holds the relations/edges for other nodes in the graph.
type CampaignLinkEdges struct {
	// Campaign holds the value of the campaign edge.
	Campaign *Campaign `json:"campaign,omitempty"`
	// Tracks holds the value of the tracks edge.
	Tracks []*Track `json:"tracks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CampaignOrErr returns the Campaign value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CampaignLinkEdges) CampaignOrErr() (*Campaign, error) {
	if e.Campaign != nil {
		return e.Campaign, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: campaign.Label}
	}
	return nil, &NotLoadedError{edge: "campaign"}
}

// TracksOrErr returns the Tracks value or an error if the edge
// was not loaded in eager-loading.
func (e CampaignLinkEdges) TracksOrErr() ([]*Track, error) {
	if e.loadedTypes[1] {
		return e.Tracks, nil
	}
	return nil, &NotLoadedError{edge: "tracks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CampaignLink) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case campaignlink.FieldIsActive:
			values[i] = new(sql.NullBool)
		case campaignlink.FieldID:
			values[i] = new(sql.NullInt64)
		case campaignlink.FieldUniqueCode, campaignlink.FieldOriginalURL, campaignlink.FieldTrackingURL:
			values[i] = new(sql.NullString)
		case campaignlink.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case campaignlink.ForeignKeys[0]: // campaign_links
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CampaignLink fields.
func (cl *CampaignLink) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case campaignlink.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cl.ID = int64(value.Int64)
		case campaignlink.FieldUniqueCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unique_code", values[i])
			} else if value.Valid {
				cl.UniqueCode = value.String
			}
		case campaignlink.FieldOriginalURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_url", values[i])
			} else if value.Valid {
				cl.OriginalURL = value.String
			}
		case campaignlink.FieldTrackingURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_url", values[i])
			} else if value.Valid {
				cl.TrackingURL = value.String
			}
		case campaignlink.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cl.CreatedAt = value.Time
			}
		case campaignlink.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				cl.IsActive = value.Bool
			}
		case campaignlink.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field campaign_links", value)
			} else if value.Valid {
				cl.campaign_links = new(int64)
				*cl.campaign_links = int64(value.Int64)
			}
		default:
			cl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CampaignLink.
// This includes values selected through modifiers, order, etc.
func (cl *CampaignLink) Value(name string) (ent.Value, error) {
	return cl.selectValues.Get(name)
}

// QueryCampaign queries the "campaign" edge of the CampaignLink entity.
func (cl *CampaignLink) QueryCampaign() *CampaignQuery {
	return NewCampaignLinkClient(cl.config).QueryCampaign(cl)
}

// QueryTracks queries the "tracks" edge of the CampaignLink entity.
func (cl *CampaignLink) QueryTracks() *TrackQuery {
	return NewCampaignLinkClient(cl.config).QueryTracks(cl)
}

// Update returns a builder for updating this CampaignLink.
// Note that you need to call CampaignLink.Unwrap() before calling this method if this CampaignLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *CampaignLink) Update() *CampaignLinkUpdateOne {
	return NewCampaignLinkClient(cl.config).UpdateOne(cl)
}

// Unwrap unwraps the CampaignLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *CampaignLink) Unwrap() *CampaignLink {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: CampaignLink is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *CampaignLink) String() string {
	var builder strings.Builder
	builder.WriteString("CampaignLink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	builder.WriteString("unique_code=")
	builder.WriteString(cl.UniqueCode)
	builder.WriteString(", ")
	builder.WriteString("original_url=")
	builder.WriteString(cl.OriginalURL)
	builder.WriteString(", ")
	builder.WriteString("tracking_url=")
	builder.WriteString(cl.TrackingURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", cl.IsActive))
	builder.WriteByte(')')
	return builder.String()
}

// CampaignLinks is a parsable slice of CampaignLink.
type CampaignLinks []*CampaignLink
