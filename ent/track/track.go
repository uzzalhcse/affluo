// Code generated by ent, DO NOT EDIT.

package track

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the track type in the database.
	Label = "track"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldDeviceFingerprint holds the string denoting the device_fingerprint field in the database.
	FieldDeviceFingerprint = "device_fingerprint"
	// FieldReferrer holds the string denoting the referrer field in the database.
	FieldReferrer = "referrer"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldIsUniqueClick holds the string denoting the is_unique_click field in the database.
	FieldIsUniqueClick = "is_unique_click"
	// FieldAdditionalMetadata holds the string denoting the additional_metadata field in the database.
	FieldAdditionalMetadata = "additional_metadata"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeCampaign holds the string denoting the campaign edge name in mutations.
	EdgeCampaign = "campaign"
	// EdgeLink holds the string denoting the link edge name in mutations.
	EdgeLink = "link"
	// Table holds the table name of the track in the database.
	Table = "tracks"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "tracks"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_tracks"
	// CampaignTable is the table that holds the campaign relation/edge.
	CampaignTable = "tracks"
	// CampaignInverseTable is the table name for the Campaign entity.
	// It exists in this package in order to avoid circular dependency with the "campaign" package.
	CampaignInverseTable = "campaigns"
	// CampaignColumn is the table column denoting the campaign relation/edge.
	CampaignColumn = "campaign_tracks"
	// LinkTable is the table that holds the link relation/edge.
	LinkTable = "tracks"
	// LinkInverseTable is the table name for the CampaignLink entity.
	// It exists in this package in order to avoid circular dependency with the "campaignlink" package.
	LinkInverseTable = "campaign_links"
	// LinkColumn is the table column denoting the link relation/edge.
	LinkColumn = "campaign_link_tracks"
)

// Columns holds all SQL columns for track fields.
var Columns = []string{
	FieldID,
	FieldIPAddress,
	FieldUserAgent,
	FieldDeviceFingerprint,
	FieldReferrer,
	FieldType,
	FieldStatus,
	FieldCreatedAt,
	FieldIsUniqueClick,
	FieldAdditionalMetadata,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tracks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"campaign_tracks",
	"campaign_link_tracks",
	"user_tracks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultIsUniqueClick holds the default value on creation for the "is_unique_click" field.
	DefaultIsUniqueClick bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeClick      Type = "click"
	TypeImpression Type = "impression"
	TypeConversion Type = "conversion"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeClick, TypeImpression, TypeConversion:
		return nil
	default:
		return fmt.Errorf("track: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusValid          Status = "valid"
	StatusSuspectedFraud Status = "suspected_fraud"
	StatusBlacklisted    Status = "blacklisted"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusValid, StatusSuspectedFraud, StatusBlacklisted:
		return nil
	default:
		return fmt.Errorf("track: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Track queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByDeviceFingerprint orders the results by the device_fingerprint field.
func ByDeviceFingerprint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceFingerprint, opts...).ToFunc()
}

// ByReferrer orders the results by the referrer field.
func ByReferrer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferrer, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByIsUniqueClick orders the results by the is_unique_click field.
func ByIsUniqueClick(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsUniqueClick, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCampaignField orders the results by campaign field.
func ByCampaignField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCampaignStep(), sql.OrderByField(field, opts...))
	}
}

// ByLinkField orders the results by link field.
func ByLinkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLinkStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newCampaignStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CampaignInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CampaignTable, CampaignColumn),
	)
}
func newLinkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LinkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LinkTable, LinkColumn),
	)
}
