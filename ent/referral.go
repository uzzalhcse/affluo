// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/campaign"
	"affluo/ent/referral"
	"affluo/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Referral is the model entity for the Referral schema.
type Referral struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status referral.Status `json:"status,omitempty"`
	// CommissionAmount holds the value of the "commission_amount" field.
	CommissionAmount float64 `json:"commission_amount,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ProcessedAt holds the value of the "processed_at" field.
	ProcessedAt time.Time `json:"processed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReferralQuery when eager-loading is set.
	Edges              ReferralEdges `json:"edges"`
	campaign_referrals *int64
	user_referrals     *int64
	selectValues       sql.SelectValues
}

// ReferralEdges holds the relations/edges for other nodes in the graph.
type ReferralEdges struct {
	// Referrer holds the value of the referrer edge.
	Referrer *User `json:"referrer,omitempty"`
	// Campaign holds the value of the campaign edge.
	Campaign *Campaign `json:"campaign,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ReferrerOrErr returns the Referrer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReferralEdges) ReferrerOrErr() (*User, error) {
	if e.Referrer != nil {
		return e.Referrer, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "referrer"}
}

// CampaignOrErr returns the Campaign value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReferralEdges) CampaignOrErr() (*Campaign, error) {
	if e.Campaign != nil {
		return e.Campaign, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: campaign.Label}
	}
	return nil, &NotLoadedError{edge: "campaign"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Referral) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case referral.FieldCommissionAmount:
			values[i] = new(sql.NullFloat64)
		case referral.FieldID:
			values[i] = new(sql.NullInt64)
		case referral.FieldStatus:
			values[i] = new(sql.NullString)
		case referral.FieldCreatedAt, referral.FieldProcessedAt:
			values[i] = new(sql.NullTime)
		case referral.ForeignKeys[0]: // campaign_referrals
			values[i] = new(sql.NullInt64)
		case referral.ForeignKeys[1]: // user_referrals
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Referral fields.
func (r *Referral) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case referral.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int64(value.Int64)
		case referral.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = referral.Status(value.String)
			}
		case referral.FieldCommissionAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field commission_amount", values[i])
			} else if value.Valid {
				r.CommissionAmount = value.Float64
			}
		case referral.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case referral.FieldProcessedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field processed_at", values[i])
			} else if value.Valid {
				r.ProcessedAt = value.Time
			}
		case referral.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field campaign_referrals", value)
			} else if value.Valid {
				r.campaign_referrals = new(int64)
				*r.campaign_referrals = int64(value.Int64)
			}
		case referral.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_referrals", value)
			} else if value.Valid {
				r.user_referrals = new(int64)
				*r.user_referrals = int64(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Referral.
// This includes values selected through modifiers, order, etc.
func (r *Referral) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryReferrer queries the "referrer" edge of the Referral entity.
func (r *Referral) QueryReferrer() *UserQuery {
	return NewReferralClient(r.config).QueryReferrer(r)
}

// QueryCampaign queries the "campaign" edge of the Referral entity.
func (r *Referral) QueryCampaign() *CampaignQuery {
	return NewReferralClient(r.config).QueryCampaign(r)
}

// Update returns a builder for updating this Referral.
// Note that you need to call Referral.Unwrap() before calling this method if this Referral
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Referral) Update() *ReferralUpdateOne {
	return NewReferralClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Referral entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Referral) Unwrap() *Referral {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Referral is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Referral) String() string {
	var builder strings.Builder
	builder.WriteString("Referral(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", ")
	builder.WriteString("commission_amount=")
	builder.WriteString(fmt.Sprintf("%v", r.CommissionAmount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("processed_at=")
	builder.WriteString(r.ProcessedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Referrals is a parsable slice of Referral.
type Referrals []*Referral
