// Code generated by ent, DO NOT EDIT.

package bannercreative

import (
	"affluo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldLTE(FieldID, id))
}

// BannerID applies equality check predicate on the "banner_id" field. It's identical to BannerIDEQ.
func BannerID(v int64) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldBannerID, v))
}

// CreativeID applies equality check predicate on the "creative_id" field. It's identical to CreativeIDEQ.
func CreativeID(v int64) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldCreativeID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldUpdatedAt, v))
}

// IsPrimary applies equality check predicate on the "is_primary" field. It's identical to IsPrimaryEQ.
func IsPrimary(v bool) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldIsPrimary, v))
}

// DisplayOrder applies equality check predicate on the "display_order" field. It's identical to DisplayOrderEQ.
func DisplayOrder(v int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldDisplayOrder, v))
}

// BannerIDEQ applies the EQ predicate on the "banner_id" field.
func BannerIDEQ(v int64) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldBannerID, v))
}

// BannerIDNEQ applies the NEQ predicate on the "banner_id" field.
func BannerIDNEQ(v int64) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNEQ(FieldBannerID, v))
}

// BannerIDIn applies the In predicate on the "banner_id" field.
func BannerIDIn(vs ...int64) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldIn(FieldBannerID, vs...))
}

// BannerIDNotIn applies the NotIn predicate on the "banner_id" field.
func BannerIDNotIn(vs ...int64) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNotIn(FieldBannerID, vs...))
}

// CreativeIDEQ applies the EQ predicate on the "creative_id" field.
func CreativeIDEQ(v int64) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldCreativeID, v))
}

// CreativeIDNEQ applies the NEQ predicate on the "creative_id" field.
func CreativeIDNEQ(v int64) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNEQ(FieldCreativeID, v))
}

// CreativeIDIn applies the In predicate on the "creative_id" field.
func CreativeIDIn(vs ...int64) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldIn(FieldCreativeID, vs...))
}

// CreativeIDNotIn applies the NotIn predicate on the "creative_id" field.
func CreativeIDNotIn(vs ...int64) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNotIn(FieldCreativeID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldLTE(FieldUpdatedAt, v))
}

// IsPrimaryEQ applies the EQ predicate on the "is_primary" field.
func IsPrimaryEQ(v bool) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldIsPrimary, v))
}

// IsPrimaryNEQ applies the NEQ predicate on the "is_primary" field.
func IsPrimaryNEQ(v bool) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNEQ(FieldIsPrimary, v))
}

// DisplayOrderEQ applies the EQ predicate on the "display_order" field.
func DisplayOrderEQ(v int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldEQ(FieldDisplayOrder, v))
}

// DisplayOrderNEQ applies the NEQ predicate on the "display_order" field.
func DisplayOrderNEQ(v int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNEQ(FieldDisplayOrder, v))
}

// DisplayOrderIn applies the In predicate on the "display_order" field.
func DisplayOrderIn(vs ...int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldIn(FieldDisplayOrder, vs...))
}

// DisplayOrderNotIn applies the NotIn predicate on the "display_order" field.
func DisplayOrderNotIn(vs ...int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNotIn(FieldDisplayOrder, vs...))
}

// DisplayOrderGT applies the GT predicate on the "display_order" field.
func DisplayOrderGT(v int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldGT(FieldDisplayOrder, v))
}

// DisplayOrderGTE applies the GTE predicate on the "display_order" field.
func DisplayOrderGTE(v int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldGTE(FieldDisplayOrder, v))
}

// DisplayOrderLT applies the LT predicate on the "display_order" field.
func DisplayOrderLT(v int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldLT(FieldDisplayOrder, v))
}

// DisplayOrderLTE applies the LTE predicate on the "display_order" field.
func DisplayOrderLTE(v int) predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldLTE(FieldDisplayOrder, v))
}

// DisplayOrderIsNil applies the IsNil predicate on the "display_order" field.
func DisplayOrderIsNil() predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldIsNull(FieldDisplayOrder))
}

// DisplayOrderNotNil applies the NotNil predicate on the "display_order" field.
func DisplayOrderNotNil() predicate.BannerCreative {
	return predicate.BannerCreative(sql.FieldNotNull(FieldDisplayOrder))
}

// HasBanner applies the HasEdge predicate on the "banner" edge.
func HasBanner() predicate.BannerCreative {
	return predicate.BannerCreative(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BannerTable, BannerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBannerWith applies the HasEdge predicate on the "banner" edge with a given conditions (other predicates).
func HasBannerWith(preds ...predicate.Banner) predicate.BannerCreative {
	return predicate.BannerCreative(func(s *sql.Selector) {
		step := newBannerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreative applies the HasEdge predicate on the "creative" edge.
func HasCreative() predicate.BannerCreative {
	return predicate.BannerCreative(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreativeTable, CreativeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreativeWith applies the HasEdge predicate on the "creative" edge with a given conditions (other predicates).
func HasCreativeWith(preds ...predicate.Creative) predicate.BannerCreative {
	return predicate.BannerCreative(func(s *sql.Selector) {
		step := newCreativeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BannerCreative) predicate.BannerCreative {
	return predicate.BannerCreative(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BannerCreative) predicate.BannerCreative {
	return predicate.BannerCreative(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BannerCreative) predicate.BannerCreative {
	return predicate.BannerCreative(sql.NotPredicates(p))
}
