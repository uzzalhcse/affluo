// Code generated by ent, DO NOT EDIT.

package campaign

import (
	"affluo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldDescription, v))
}

// PayoutRate applies equality check predicate on the "payout_rate" field. It's identical to PayoutRateEQ.
func PayoutRate(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldPayoutRate, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldEndDate, v))
}

// TrackingURL applies equality check predicate on the "tracking_url" field. It's identical to TrackingURLEQ.
func TrackingURL(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldTrackingURL, v))
}

// UniqueCode applies equality check predicate on the "unique_code" field. It's identical to UniqueCodeEQ.
func UniqueCode(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldUniqueCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContainsFold(FieldDescription, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldType, vs...))
}

// PayoutRateEQ applies the EQ predicate on the "payout_rate" field.
func PayoutRateEQ(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldPayoutRate, v))
}

// PayoutRateNEQ applies the NEQ predicate on the "payout_rate" field.
func PayoutRateNEQ(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldPayoutRate, v))
}

// PayoutRateIn applies the In predicate on the "payout_rate" field.
func PayoutRateIn(vs ...float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldPayoutRate, vs...))
}

// PayoutRateNotIn applies the NotIn predicate on the "payout_rate" field.
func PayoutRateNotIn(vs ...float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldPayoutRate, vs...))
}

// PayoutRateGT applies the GT predicate on the "payout_rate" field.
func PayoutRateGT(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldPayoutRate, v))
}

// PayoutRateGTE applies the GTE predicate on the "payout_rate" field.
func PayoutRateGTE(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldPayoutRate, v))
}

// PayoutRateLT applies the LT predicate on the "payout_rate" field.
func PayoutRateLT(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldPayoutRate, v))
}

// PayoutRateLTE applies the LTE predicate on the "payout_rate" field.
func PayoutRateLTE(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldPayoutRate, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldNotNull(FieldEndDate))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldStatus, vs...))
}

// TrackingURLEQ applies the EQ predicate on the "tracking_url" field.
func TrackingURLEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldTrackingURL, v))
}

// TrackingURLNEQ applies the NEQ predicate on the "tracking_url" field.
func TrackingURLNEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldTrackingURL, v))
}

// TrackingURLIn applies the In predicate on the "tracking_url" field.
func TrackingURLIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldTrackingURL, vs...))
}

// TrackingURLNotIn applies the NotIn predicate on the "tracking_url" field.
func TrackingURLNotIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldTrackingURL, vs...))
}

// TrackingURLGT applies the GT predicate on the "tracking_url" field.
func TrackingURLGT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldTrackingURL, v))
}

// TrackingURLGTE applies the GTE predicate on the "tracking_url" field.
func TrackingURLGTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldTrackingURL, v))
}

// TrackingURLLT applies the LT predicate on the "tracking_url" field.
func TrackingURLLT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldTrackingURL, v))
}

// TrackingURLLTE applies the LTE predicate on the "tracking_url" field.
func TrackingURLLTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldTrackingURL, v))
}

// TrackingURLContains applies the Contains predicate on the "tracking_url" field.
func TrackingURLContains(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContains(FieldTrackingURL, v))
}

// TrackingURLHasPrefix applies the HasPrefix predicate on the "tracking_url" field.
func TrackingURLHasPrefix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasPrefix(FieldTrackingURL, v))
}

// TrackingURLHasSuffix applies the HasSuffix predicate on the "tracking_url" field.
func TrackingURLHasSuffix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasSuffix(FieldTrackingURL, v))
}

// TrackingURLEqualFold applies the EqualFold predicate on the "tracking_url" field.
func TrackingURLEqualFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEqualFold(FieldTrackingURL, v))
}

// TrackingURLContainsFold applies the ContainsFold predicate on the "tracking_url" field.
func TrackingURLContainsFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContainsFold(FieldTrackingURL, v))
}

// UniqueCodeEQ applies the EQ predicate on the "unique_code" field.
func UniqueCodeEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldUniqueCode, v))
}

// UniqueCodeNEQ applies the NEQ predicate on the "unique_code" field.
func UniqueCodeNEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldUniqueCode, v))
}

// UniqueCodeIn applies the In predicate on the "unique_code" field.
func UniqueCodeIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldUniqueCode, vs...))
}

// UniqueCodeNotIn applies the NotIn predicate on the "unique_code" field.
func UniqueCodeNotIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldUniqueCode, vs...))
}

// UniqueCodeGT applies the GT predicate on the "unique_code" field.
func UniqueCodeGT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldUniqueCode, v))
}

// UniqueCodeGTE applies the GTE predicate on the "unique_code" field.
func UniqueCodeGTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldUniqueCode, v))
}

// UniqueCodeLT applies the LT predicate on the "unique_code" field.
func UniqueCodeLT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldUniqueCode, v))
}

// UniqueCodeLTE applies the LTE predicate on the "unique_code" field.
func UniqueCodeLTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldUniqueCode, v))
}

// UniqueCodeContains applies the Contains predicate on the "unique_code" field.
func UniqueCodeContains(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContains(FieldUniqueCode, v))
}

// UniqueCodeHasPrefix applies the HasPrefix predicate on the "unique_code" field.
func UniqueCodeHasPrefix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasPrefix(FieldUniqueCode, v))
}

// UniqueCodeHasSuffix applies the HasSuffix predicate on the "unique_code" field.
func UniqueCodeHasSuffix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasSuffix(FieldUniqueCode, v))
}

// UniqueCodeEqualFold applies the EqualFold predicate on the "unique_code" field.
func UniqueCodeEqualFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEqualFold(FieldUniqueCode, v))
}

// UniqueCodeContainsFold applies the ContainsFold predicate on the "unique_code" field.
func UniqueCodeContainsFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContainsFold(FieldUniqueCode, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLinks applies the HasEdge predicate on the "links" edge.
func HasLinks() predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LinksTable, LinksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLinksWith applies the HasEdge predicate on the "links" edge with a given conditions (other predicates).
func HasLinksWith(preds ...predicate.CampaignLink) predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := newLinksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTracks applies the HasEdge predicate on the "tracks" edge.
func HasTracks() predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TracksTable, TracksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTracksWith applies the HasEdge predicate on the "tracks" edge with a given conditions (other predicates).
func HasTracksWith(preds ...predicate.Track) predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := newTracksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReferrals applies the HasEdge predicate on the "referrals" edge.
func HasReferrals() predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReferralsTable, ReferralsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReferralsWith applies the HasEdge predicate on the "referrals" edge with a given conditions (other predicates).
func HasReferralsWith(preds ...predicate.Referral) predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := newReferralsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Campaign) predicate.Campaign {
	return predicate.Campaign(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Campaign) predicate.Campaign {
	return predicate.Campaign(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Campaign) predicate.Campaign {
	return predicate.Campaign(sql.NotPredicates(p))
}
