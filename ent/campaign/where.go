// Code generated by ent, DO NOT EDIT.

package campaign

import (
	"affluo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldDescription, v))
}

// UniqueCode applies equality check predicate on the "unique_code" field. It's identical to UniqueCodeEQ.
func UniqueCode(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldUniqueCode, v))
}

// BaseCommissionRate applies equality check predicate on the "base_commission_rate" field. It's identical to BaseCommissionRateEQ.
func BaseCommissionRate(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldBaseCommissionRate, v))
}

// TargetGeography applies equality check predicate on the "target_geography" field. It's identical to TargetGeographyEQ.
func TargetGeography(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldTargetGeography, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldEndDate, v))
}

// TrackingURL applies equality check predicate on the "tracking_url" field. It's identical to TrackingURLEQ.
func TrackingURL(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldTrackingURL, v))
}

// TotalClicks applies equality check predicate on the "total_clicks" field. It's identical to TotalClicksEQ.
func TotalClicks(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldTotalClicks, v))
}

// TotalConversions applies equality check predicate on the "total_conversions" field. It's identical to TotalConversionsEQ.
func TotalConversions(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldTotalConversions, v))
}

// TotalRevenue applies equality check predicate on the "total_revenue" field. It's identical to TotalRevenueEQ.
func TotalRevenue(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldTotalRevenue, v))
}

// ConversionRate applies equality check predicate on the "conversion_rate" field. It's identical to ConversionRateEQ.
func ConversionRate(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldConversionRate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContainsFold(FieldDescription, v))
}

// UniqueCodeEQ applies the EQ predicate on the "unique_code" field.
func UniqueCodeEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldUniqueCode, v))
}

// UniqueCodeNEQ applies the NEQ predicate on the "unique_code" field.
func UniqueCodeNEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldUniqueCode, v))
}

// UniqueCodeIn applies the In predicate on the "unique_code" field.
func UniqueCodeIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldUniqueCode, vs...))
}

// UniqueCodeNotIn applies the NotIn predicate on the "unique_code" field.
func UniqueCodeNotIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldUniqueCode, vs...))
}

// UniqueCodeGT applies the GT predicate on the "unique_code" field.
func UniqueCodeGT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldUniqueCode, v))
}

// UniqueCodeGTE applies the GTE predicate on the "unique_code" field.
func UniqueCodeGTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldUniqueCode, v))
}

// UniqueCodeLT applies the LT predicate on the "unique_code" field.
func UniqueCodeLT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldUniqueCode, v))
}

// UniqueCodeLTE applies the LTE predicate on the "unique_code" field.
func UniqueCodeLTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldUniqueCode, v))
}

// UniqueCodeContains applies the Contains predicate on the "unique_code" field.
func UniqueCodeContains(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContains(FieldUniqueCode, v))
}

// UniqueCodeHasPrefix applies the HasPrefix predicate on the "unique_code" field.
func UniqueCodeHasPrefix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasPrefix(FieldUniqueCode, v))
}

// UniqueCodeHasSuffix applies the HasSuffix predicate on the "unique_code" field.
func UniqueCodeHasSuffix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasSuffix(FieldUniqueCode, v))
}

// UniqueCodeEqualFold applies the EqualFold predicate on the "unique_code" field.
func UniqueCodeEqualFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEqualFold(FieldUniqueCode, v))
}

// UniqueCodeContainsFold applies the ContainsFold predicate on the "unique_code" field.
func UniqueCodeContainsFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContainsFold(FieldUniqueCode, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldType, vs...))
}

// CommissionTypeEQ applies the EQ predicate on the "commission_type" field.
func CommissionTypeEQ(v CommissionType) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldCommissionType, v))
}

// CommissionTypeNEQ applies the NEQ predicate on the "commission_type" field.
func CommissionTypeNEQ(v CommissionType) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldCommissionType, v))
}

// CommissionTypeIn applies the In predicate on the "commission_type" field.
func CommissionTypeIn(vs ...CommissionType) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldCommissionType, vs...))
}

// CommissionTypeNotIn applies the NotIn predicate on the "commission_type" field.
func CommissionTypeNotIn(vs ...CommissionType) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldCommissionType, vs...))
}

// BaseCommissionRateEQ applies the EQ predicate on the "base_commission_rate" field.
func BaseCommissionRateEQ(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldBaseCommissionRate, v))
}

// BaseCommissionRateNEQ applies the NEQ predicate on the "base_commission_rate" field.
func BaseCommissionRateNEQ(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldBaseCommissionRate, v))
}

// BaseCommissionRateIn applies the In predicate on the "base_commission_rate" field.
func BaseCommissionRateIn(vs ...float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldBaseCommissionRate, vs...))
}

// BaseCommissionRateNotIn applies the NotIn predicate on the "base_commission_rate" field.
func BaseCommissionRateNotIn(vs ...float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldBaseCommissionRate, vs...))
}

// BaseCommissionRateGT applies the GT predicate on the "base_commission_rate" field.
func BaseCommissionRateGT(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldBaseCommissionRate, v))
}

// BaseCommissionRateGTE applies the GTE predicate on the "base_commission_rate" field.
func BaseCommissionRateGTE(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldBaseCommissionRate, v))
}

// BaseCommissionRateLT applies the LT predicate on the "base_commission_rate" field.
func BaseCommissionRateLT(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldBaseCommissionRate, v))
}

// BaseCommissionRateLTE applies the LTE predicate on the "base_commission_rate" field.
func BaseCommissionRateLTE(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldBaseCommissionRate, v))
}

// CommissionTiersIsNil applies the IsNil predicate on the "commission_tiers" field.
func CommissionTiersIsNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldIsNull(FieldCommissionTiers))
}

// CommissionTiersNotNil applies the NotNil predicate on the "commission_tiers" field.
func CommissionTiersNotNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldNotNull(FieldCommissionTiers))
}

// TargetGeographyEQ applies the EQ predicate on the "target_geography" field.
func TargetGeographyEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldTargetGeography, v))
}

// TargetGeographyNEQ applies the NEQ predicate on the "target_geography" field.
func TargetGeographyNEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldTargetGeography, v))
}

// TargetGeographyIn applies the In predicate on the "target_geography" field.
func TargetGeographyIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldTargetGeography, vs...))
}

// TargetGeographyNotIn applies the NotIn predicate on the "target_geography" field.
func TargetGeographyNotIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldTargetGeography, vs...))
}

// TargetGeographyGT applies the GT predicate on the "target_geography" field.
func TargetGeographyGT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldTargetGeography, v))
}

// TargetGeographyGTE applies the GTE predicate on the "target_geography" field.
func TargetGeographyGTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldTargetGeography, v))
}

// TargetGeographyLT applies the LT predicate on the "target_geography" field.
func TargetGeographyLT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldTargetGeography, v))
}

// TargetGeographyLTE applies the LTE predicate on the "target_geography" field.
func TargetGeographyLTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldTargetGeography, v))
}

// TargetGeographyContains applies the Contains predicate on the "target_geography" field.
func TargetGeographyContains(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContains(FieldTargetGeography, v))
}

// TargetGeographyHasPrefix applies the HasPrefix predicate on the "target_geography" field.
func TargetGeographyHasPrefix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasPrefix(FieldTargetGeography, v))
}

// TargetGeographyHasSuffix applies the HasSuffix predicate on the "target_geography" field.
func TargetGeographyHasSuffix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasSuffix(FieldTargetGeography, v))
}

// TargetGeographyIsNil applies the IsNil predicate on the "target_geography" field.
func TargetGeographyIsNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldIsNull(FieldTargetGeography))
}

// TargetGeographyNotNil applies the NotNil predicate on the "target_geography" field.
func TargetGeographyNotNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldNotNull(FieldTargetGeography))
}

// TargetGeographyEqualFold applies the EqualFold predicate on the "target_geography" field.
func TargetGeographyEqualFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEqualFold(FieldTargetGeography, v))
}

// TargetGeographyContainsFold applies the ContainsFold predicate on the "target_geography" field.
func TargetGeographyContainsFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContainsFold(FieldTargetGeography, v))
}

// TargetDemographicsIsNil applies the IsNil predicate on the "target_demographics" field.
func TargetDemographicsIsNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldIsNull(FieldTargetDemographics))
}

// TargetDemographicsNotNil applies the NotNil predicate on the "target_demographics" field.
func TargetDemographicsNotNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldNotNull(FieldTargetDemographics))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldNotNull(FieldEndDate))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldStatus, vs...))
}

// TrackingURLEQ applies the EQ predicate on the "tracking_url" field.
func TrackingURLEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldTrackingURL, v))
}

// TrackingURLNEQ applies the NEQ predicate on the "tracking_url" field.
func TrackingURLNEQ(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldTrackingURL, v))
}

// TrackingURLIn applies the In predicate on the "tracking_url" field.
func TrackingURLIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldTrackingURL, vs...))
}

// TrackingURLNotIn applies the NotIn predicate on the "tracking_url" field.
func TrackingURLNotIn(vs ...string) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldTrackingURL, vs...))
}

// TrackingURLGT applies the GT predicate on the "tracking_url" field.
func TrackingURLGT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldTrackingURL, v))
}

// TrackingURLGTE applies the GTE predicate on the "tracking_url" field.
func TrackingURLGTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldTrackingURL, v))
}

// TrackingURLLT applies the LT predicate on the "tracking_url" field.
func TrackingURLLT(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldTrackingURL, v))
}

// TrackingURLLTE applies the LTE predicate on the "tracking_url" field.
func TrackingURLLTE(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldTrackingURL, v))
}

// TrackingURLContains applies the Contains predicate on the "tracking_url" field.
func TrackingURLContains(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContains(FieldTrackingURL, v))
}

// TrackingURLHasPrefix applies the HasPrefix predicate on the "tracking_url" field.
func TrackingURLHasPrefix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasPrefix(FieldTrackingURL, v))
}

// TrackingURLHasSuffix applies the HasSuffix predicate on the "tracking_url" field.
func TrackingURLHasSuffix(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldHasSuffix(FieldTrackingURL, v))
}

// TrackingURLIsNil applies the IsNil predicate on the "tracking_url" field.
func TrackingURLIsNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldIsNull(FieldTrackingURL))
}

// TrackingURLNotNil applies the NotNil predicate on the "tracking_url" field.
func TrackingURLNotNil() predicate.Campaign {
	return predicate.Campaign(sql.FieldNotNull(FieldTrackingURL))
}

// TrackingURLEqualFold applies the EqualFold predicate on the "tracking_url" field.
func TrackingURLEqualFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldEqualFold(FieldTrackingURL, v))
}

// TrackingURLContainsFold applies the ContainsFold predicate on the "tracking_url" field.
func TrackingURLContainsFold(v string) predicate.Campaign {
	return predicate.Campaign(sql.FieldContainsFold(FieldTrackingURL, v))
}

// TotalClicksEQ applies the EQ predicate on the "total_clicks" field.
func TotalClicksEQ(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldTotalClicks, v))
}

// TotalClicksNEQ applies the NEQ predicate on the "total_clicks" field.
func TotalClicksNEQ(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldTotalClicks, v))
}

// TotalClicksIn applies the In predicate on the "total_clicks" field.
func TotalClicksIn(vs ...int) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldTotalClicks, vs...))
}

// TotalClicksNotIn applies the NotIn predicate on the "total_clicks" field.
func TotalClicksNotIn(vs ...int) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldTotalClicks, vs...))
}

// TotalClicksGT applies the GT predicate on the "total_clicks" field.
func TotalClicksGT(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldTotalClicks, v))
}

// TotalClicksGTE applies the GTE predicate on the "total_clicks" field.
func TotalClicksGTE(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldTotalClicks, v))
}

// TotalClicksLT applies the LT predicate on the "total_clicks" field.
func TotalClicksLT(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldTotalClicks, v))
}

// TotalClicksLTE applies the LTE predicate on the "total_clicks" field.
func TotalClicksLTE(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldTotalClicks, v))
}

// TotalConversionsEQ applies the EQ predicate on the "total_conversions" field.
func TotalConversionsEQ(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldTotalConversions, v))
}

// TotalConversionsNEQ applies the NEQ predicate on the "total_conversions" field.
func TotalConversionsNEQ(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldTotalConversions, v))
}

// TotalConversionsIn applies the In predicate on the "total_conversions" field.
func TotalConversionsIn(vs ...int) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldTotalConversions, vs...))
}

// TotalConversionsNotIn applies the NotIn predicate on the "total_conversions" field.
func TotalConversionsNotIn(vs ...int) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldTotalConversions, vs...))
}

// TotalConversionsGT applies the GT predicate on the "total_conversions" field.
func TotalConversionsGT(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldTotalConversions, v))
}

// TotalConversionsGTE applies the GTE predicate on the "total_conversions" field.
func TotalConversionsGTE(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldTotalConversions, v))
}

// TotalConversionsLT applies the LT predicate on the "total_conversions" field.
func TotalConversionsLT(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldTotalConversions, v))
}

// TotalConversionsLTE applies the LTE predicate on the "total_conversions" field.
func TotalConversionsLTE(v int) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldTotalConversions, v))
}

// TotalRevenueEQ applies the EQ predicate on the "total_revenue" field.
func TotalRevenueEQ(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldTotalRevenue, v))
}

// TotalRevenueNEQ applies the NEQ predicate on the "total_revenue" field.
func TotalRevenueNEQ(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldTotalRevenue, v))
}

// TotalRevenueIn applies the In predicate on the "total_revenue" field.
func TotalRevenueIn(vs ...float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldTotalRevenue, vs...))
}

// TotalRevenueNotIn applies the NotIn predicate on the "total_revenue" field.
func TotalRevenueNotIn(vs ...float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldTotalRevenue, vs...))
}

// TotalRevenueGT applies the GT predicate on the "total_revenue" field.
func TotalRevenueGT(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldTotalRevenue, v))
}

// TotalRevenueGTE applies the GTE predicate on the "total_revenue" field.
func TotalRevenueGTE(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldTotalRevenue, v))
}

// TotalRevenueLT applies the LT predicate on the "total_revenue" field.
func TotalRevenueLT(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldTotalRevenue, v))
}

// TotalRevenueLTE applies the LTE predicate on the "total_revenue" field.
func TotalRevenueLTE(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldTotalRevenue, v))
}

// ConversionRateEQ applies the EQ predicate on the "conversion_rate" field.
func ConversionRateEQ(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldConversionRate, v))
}

// ConversionRateNEQ applies the NEQ predicate on the "conversion_rate" field.
func ConversionRateNEQ(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldConversionRate, v))
}

// ConversionRateIn applies the In predicate on the "conversion_rate" field.
func ConversionRateIn(vs ...float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldConversionRate, vs...))
}

// ConversionRateNotIn applies the NotIn predicate on the "conversion_rate" field.
func ConversionRateNotIn(vs ...float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldConversionRate, vs...))
}

// ConversionRateGT applies the GT predicate on the "conversion_rate" field.
func ConversionRateGT(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldConversionRate, v))
}

// ConversionRateGTE applies the GTE predicate on the "conversion_rate" field.
func ConversionRateGTE(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldConversionRate, v))
}

// ConversionRateLT applies the LT predicate on the "conversion_rate" field.
func ConversionRateLT(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldConversionRate, v))
}

// ConversionRateLTE applies the LTE predicate on the "conversion_rate" field.
func ConversionRateLTE(v float64) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldConversionRate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Campaign {
	return predicate.Campaign(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLinks applies the HasEdge predicate on the "links" edge.
func HasLinks() predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LinksTable, LinksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLinksWith applies the HasEdge predicate on the "links" edge with a given conditions (other predicates).
func HasLinksWith(preds ...predicate.CampaignLink) predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := newLinksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTracks applies the HasEdge predicate on the "tracks" edge.
func HasTracks() predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TracksTable, TracksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTracksWith applies the HasEdge predicate on the "tracks" edge with a given conditions (other predicates).
func HasTracksWith(preds ...predicate.Track) predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := newTracksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReferrals applies the HasEdge predicate on the "referrals" edge.
func HasReferrals() predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReferralsTable, ReferralsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReferralsWith applies the HasEdge predicate on the "referrals" edge with a given conditions (other predicates).
func HasReferralsWith(preds ...predicate.Referral) predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := newReferralsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBanners applies the HasEdge predicate on the "banners" edge.
func HasBanners() predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, BannersTable, BannersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBannersWith applies the HasEdge predicate on the "banners" edge with a given conditions (other predicates).
func HasBannersWith(preds ...predicate.Banner) predicate.Campaign {
	return predicate.Campaign(func(s *sql.Selector) {
		step := newBannersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Campaign) predicate.Campaign {
	return predicate.Campaign(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Campaign) predicate.Campaign {
	return predicate.Campaign(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Campaign) predicate.Campaign {
	return predicate.Campaign(sql.NotPredicates(p))
}
