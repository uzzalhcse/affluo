// Code generated by ent, DO NOT EDIT.

package campaign

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the campaign type in the database.
	Label = "campaign"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldUniqueCode holds the string denoting the unique_code field in the database.
	FieldUniqueCode = "unique_code"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCommissionType holds the string denoting the commission_type field in the database.
	FieldCommissionType = "commission_type"
	// FieldBaseCommissionRate holds the string denoting the base_commission_rate field in the database.
	FieldBaseCommissionRate = "base_commission_rate"
	// FieldCommissionTiers holds the string denoting the commission_tiers field in the database.
	FieldCommissionTiers = "commission_tiers"
	// FieldTargetGeography holds the string denoting the target_geography field in the database.
	FieldTargetGeography = "target_geography"
	// FieldTargetDemographics holds the string denoting the target_demographics field in the database.
	FieldTargetDemographics = "target_demographics"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTrackingURL holds the string denoting the tracking_url field in the database.
	FieldTrackingURL = "tracking_url"
	// FieldTotalClicks holds the string denoting the total_clicks field in the database.
	FieldTotalClicks = "total_clicks"
	// FieldTotalConversions holds the string denoting the total_conversions field in the database.
	FieldTotalConversions = "total_conversions"
	// FieldTotalRevenue holds the string denoting the total_revenue field in the database.
	FieldTotalRevenue = "total_revenue"
	// FieldConversionRate holds the string denoting the conversion_rate field in the database.
	FieldConversionRate = "conversion_rate"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeLinks holds the string denoting the links edge name in mutations.
	EdgeLinks = "links"
	// EdgeTracks holds the string denoting the tracks edge name in mutations.
	EdgeTracks = "tracks"
	// EdgeReferrals holds the string denoting the referrals edge name in mutations.
	EdgeReferrals = "referrals"
	// EdgeBanners holds the string denoting the banners edge name in mutations.
	EdgeBanners = "banners"
	// Table holds the table name of the campaign in the database.
	Table = "campaigns"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "campaigns"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_campaigns"
	// LinksTable is the table that holds the links relation/edge.
	LinksTable = "campaign_links"
	// LinksInverseTable is the table name for the CampaignLink entity.
	// It exists in this package in order to avoid circular dependency with the "campaignlink" package.
	LinksInverseTable = "campaign_links"
	// LinksColumn is the table column denoting the links relation/edge.
	LinksColumn = "campaign_links"
	// TracksTable is the table that holds the tracks relation/edge.
	TracksTable = "tracks"
	// TracksInverseTable is the table name for the Track entity.
	// It exists in this package in order to avoid circular dependency with the "track" package.
	TracksInverseTable = "tracks"
	// TracksColumn is the table column denoting the tracks relation/edge.
	TracksColumn = "campaign_tracks"
	// ReferralsTable is the table that holds the referrals relation/edge.
	ReferralsTable = "referrals"
	// ReferralsInverseTable is the table name for the Referral entity.
	// It exists in this package in order to avoid circular dependency with the "referral" package.
	ReferralsInverseTable = "referrals"
	// ReferralsColumn is the table column denoting the referrals relation/edge.
	ReferralsColumn = "campaign_referrals"
	// BannersTable is the table that holds the banners relation/edge. The primary key declared below.
	BannersTable = "campaign_banners"
	// BannersInverseTable is the table name for the Banner entity.
	// It exists in this package in order to avoid circular dependency with the "banner" package.
	BannersInverseTable = "banners"
)

// Columns holds all SQL columns for campaign fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldUniqueCode,
	FieldType,
	FieldCommissionType,
	FieldBaseCommissionRate,
	FieldCommissionTiers,
	FieldTargetGeography,
	FieldTargetDemographics,
	FieldStartDate,
	FieldEndDate,
	FieldStatus,
	FieldTrackingURL,
	FieldTotalClicks,
	FieldTotalConversions,
	FieldTotalRevenue,
	FieldConversionRate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "campaigns"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_campaigns",
}

var (
	// BannersPrimaryKey and BannersColumn2 are the table columns denoting the
	// primary key for the banners relation (M2M).
	BannersPrimaryKey = []string{"campaign_id", "banner_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultBaseCommissionRate holds the default value on creation for the "base_commission_rate" field.
	DefaultBaseCommissionRate float64
	// DefaultTotalClicks holds the default value on creation for the "total_clicks" field.
	DefaultTotalClicks int
	// DefaultTotalConversions holds the default value on creation for the "total_conversions" field.
	DefaultTotalConversions int
	// DefaultTotalRevenue holds the default value on creation for the "total_revenue" field.
	DefaultTotalRevenue float64
	// DefaultConversionRate holds the default value on creation for the "conversion_rate" field.
	DefaultConversionRate float64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// Type defines the type for the "type" enum field.
type Type string

// TypeSale is the default value of the Type enum.
const DefaultType = TypeSale

// Type values.
const (
	TypeSale         Type = "sale"
	TypeLead         Type = "lead"
	TypeClick        Type = "click"
	TypeSubscription Type = "subscription"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeSale, TypeLead, TypeClick, TypeSubscription:
		return nil
	default:
		return fmt.Errorf("campaign: invalid enum value for type field: %q", _type)
	}
}

// CommissionType defines the type for the "commission_type" enum field.
type CommissionType string

// CommissionTypePercentage is the default value of the CommissionType enum.
const DefaultCommissionType = CommissionTypePercentage

// CommissionType values.
const (
	CommissionTypeFlatRate   CommissionType = "flat_rate"
	CommissionTypePercentage CommissionType = "percentage"
	CommissionTypeTiered     CommissionType = "tiered"
)

func (ct CommissionType) String() string {
	return string(ct)
}

// CommissionTypeValidator is a validator for the "commission_type" field enum values. It is called by the builders before save.
func CommissionTypeValidator(ct CommissionType) error {
	switch ct {
	case CommissionTypeFlatRate, CommissionTypePercentage, CommissionTypeTiered:
		return nil
	default:
		return fmt.Errorf("campaign: invalid enum value for commission_type field: %q", ct)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusDraft is the default value of the Status enum.
const DefaultStatus = StatusDraft

// Status values.
const (
	StatusDraft     Status = "draft"
	StatusActive    Status = "active"
	StatusPaused    Status = "paused"
	StatusCompleted Status = "completed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDraft, StatusActive, StatusPaused, StatusCompleted:
		return nil
	default:
		return fmt.Errorf("campaign: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Campaign queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByUniqueCode orders the results by the unique_code field.
func ByUniqueCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUniqueCode, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCommissionType orders the results by the commission_type field.
func ByCommissionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommissionType, opts...).ToFunc()
}

// ByBaseCommissionRate orders the results by the base_commission_rate field.
func ByBaseCommissionRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaseCommissionRate, opts...).ToFunc()
}

// ByTargetGeography orders the results by the target_geography field.
func ByTargetGeography(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetGeography, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTrackingURL orders the results by the tracking_url field.
func ByTrackingURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrackingURL, opts...).ToFunc()
}

// ByTotalClicks orders the results by the total_clicks field.
func ByTotalClicks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalClicks, opts...).ToFunc()
}

// ByTotalConversions orders the results by the total_conversions field.
func ByTotalConversions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalConversions, opts...).ToFunc()
}

// ByTotalRevenue orders the results by the total_revenue field.
func ByTotalRevenue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalRevenue, opts...).ToFunc()
}

// ByConversionRate orders the results by the conversion_rate field.
func ByConversionRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConversionRate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByLinksCount orders the results by links count.
func ByLinksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLinksStep(), opts...)
	}
}

// ByLinks orders the results by links terms.
func ByLinks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLinksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTracksCount orders the results by tracks count.
func ByTracksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTracksStep(), opts...)
	}
}

// ByTracks orders the results by tracks terms.
func ByTracks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTracksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReferralsCount orders the results by referrals count.
func ByReferralsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReferralsStep(), opts...)
	}
}

// ByReferrals orders the results by referrals terms.
func ByReferrals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReferralsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBannersCount orders the results by banners count.
func ByBannersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBannersStep(), opts...)
	}
}

// ByBanners orders the results by banners terms.
func ByBanners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBannersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newLinksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LinksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LinksTable, LinksColumn),
	)
}
func newTracksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TracksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TracksTable, TracksColumn),
	)
}
func newReferralsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReferralsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReferralsTable, ReferralsColumn),
	)
}
func newBannersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BannersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, BannersTable, BannersPrimaryKey...),
	)
}
