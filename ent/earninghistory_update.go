// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/earninghistory"
	"affluo/ent/predicate"
	"affluo/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EarningHistoryUpdate is the builder for updating EarningHistory entities.
type EarningHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *EarningHistoryMutation
}

// Where appends a list predicates to the EarningHistoryUpdate builder.
func (ehu *EarningHistoryUpdate) Where(ps ...predicate.EarningHistory) *EarningHistoryUpdate {
	ehu.mutation.Where(ps...)
	return ehu
}

// SetAmount sets the "amount" field.
func (ehu *EarningHistoryUpdate) SetAmount(f float64) *EarningHistoryUpdate {
	ehu.mutation.ResetAmount()
	ehu.mutation.SetAmount(f)
	return ehu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ehu *EarningHistoryUpdate) SetNillableAmount(f *float64) *EarningHistoryUpdate {
	if f != nil {
		ehu.SetAmount(*f)
	}
	return ehu
}

// AddAmount adds f to the "amount" field.
func (ehu *EarningHistoryUpdate) AddAmount(f float64) *EarningHistoryUpdate {
	ehu.mutation.AddAmount(f)
	return ehu
}

// SetEventType sets the "event_type" field.
func (ehu *EarningHistoryUpdate) SetEventType(s string) *EarningHistoryUpdate {
	ehu.mutation.SetEventType(s)
	return ehu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (ehu *EarningHistoryUpdate) SetNillableEventType(s *string) *EarningHistoryUpdate {
	if s != nil {
		ehu.SetEventType(*s)
	}
	return ehu
}

// SetSource sets the "source" field.
func (ehu *EarningHistoryUpdate) SetSource(s string) *EarningHistoryUpdate {
	ehu.mutation.SetSource(s)
	return ehu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ehu *EarningHistoryUpdate) SetNillableSource(s *string) *EarningHistoryUpdate {
	if s != nil {
		ehu.SetSource(*s)
	}
	return ehu
}

// SetTrackID sets the "track_id" field.
func (ehu *EarningHistoryUpdate) SetTrackID(s string) *EarningHistoryUpdate {
	ehu.mutation.SetTrackID(s)
	return ehu
}

// SetNillableTrackID sets the "track_id" field if the given value is not nil.
func (ehu *EarningHistoryUpdate) SetNillableTrackID(s *string) *EarningHistoryUpdate {
	if s != nil {
		ehu.SetTrackID(*s)
	}
	return ehu
}

// ClearTrackID clears the value of the "track_id" field.
func (ehu *EarningHistoryUpdate) ClearTrackID() *EarningHistoryUpdate {
	ehu.mutation.ClearTrackID()
	return ehu
}

// SetDate sets the "date" field.
func (ehu *EarningHistoryUpdate) SetDate(s string) *EarningHistoryUpdate {
	ehu.mutation.SetDate(s)
	return ehu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ehu *EarningHistoryUpdate) SetNillableDate(s *string) *EarningHistoryUpdate {
	if s != nil {
		ehu.SetDate(*s)
	}
	return ehu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ehu *EarningHistoryUpdate) SetUserID(id int64) *EarningHistoryUpdate {
	ehu.mutation.SetUserID(id)
	return ehu
}

// SetUser sets the "user" edge to the User entity.
func (ehu *EarningHistoryUpdate) SetUser(u *User) *EarningHistoryUpdate {
	return ehu.SetUserID(u.ID)
}

// Mutation returns the EarningHistoryMutation object of the builder.
func (ehu *EarningHistoryUpdate) Mutation() *EarningHistoryMutation {
	return ehu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ehu *EarningHistoryUpdate) ClearUser() *EarningHistoryUpdate {
	ehu.mutation.ClearUser()
	return ehu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ehu *EarningHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ehu.sqlSave, ehu.mutation, ehu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ehu *EarningHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ehu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ehu *EarningHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ehu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ehu *EarningHistoryUpdate) ExecX(ctx context.Context) {
	if err := ehu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ehu *EarningHistoryUpdate) check() error {
	if ehu.mutation.UserCleared() && len(ehu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EarningHistory.user"`)
	}
	return nil
}

func (ehu *EarningHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ehu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(earninghistory.Table, earninghistory.Columns, sqlgraph.NewFieldSpec(earninghistory.FieldID, field.TypeInt64))
	if ps := ehu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ehu.mutation.Amount(); ok {
		_spec.SetField(earninghistory.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ehu.mutation.AddedAmount(); ok {
		_spec.AddField(earninghistory.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ehu.mutation.EventType(); ok {
		_spec.SetField(earninghistory.FieldEventType, field.TypeString, value)
	}
	if value, ok := ehu.mutation.Source(); ok {
		_spec.SetField(earninghistory.FieldSource, field.TypeString, value)
	}
	if value, ok := ehu.mutation.TrackID(); ok {
		_spec.SetField(earninghistory.FieldTrackID, field.TypeString, value)
	}
	if ehu.mutation.TrackIDCleared() {
		_spec.ClearField(earninghistory.FieldTrackID, field.TypeString)
	}
	if value, ok := ehu.mutation.Date(); ok {
		_spec.SetField(earninghistory.FieldDate, field.TypeString, value)
	}
	if ehu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earninghistory.UserTable,
			Columns: []string{earninghistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ehu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earninghistory.UserTable,
			Columns: []string{earninghistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ehu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{earninghistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ehu.mutation.done = true
	return n, nil
}

// EarningHistoryUpdateOne is the builder for updating a single EarningHistory entity.
type EarningHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EarningHistoryMutation
}

// SetAmount sets the "amount" field.
func (ehuo *EarningHistoryUpdateOne) SetAmount(f float64) *EarningHistoryUpdateOne {
	ehuo.mutation.ResetAmount()
	ehuo.mutation.SetAmount(f)
	return ehuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ehuo *EarningHistoryUpdateOne) SetNillableAmount(f *float64) *EarningHistoryUpdateOne {
	if f != nil {
		ehuo.SetAmount(*f)
	}
	return ehuo
}

// AddAmount adds f to the "amount" field.
func (ehuo *EarningHistoryUpdateOne) AddAmount(f float64) *EarningHistoryUpdateOne {
	ehuo.mutation.AddAmount(f)
	return ehuo
}

// SetEventType sets the "event_type" field.
func (ehuo *EarningHistoryUpdateOne) SetEventType(s string) *EarningHistoryUpdateOne {
	ehuo.mutation.SetEventType(s)
	return ehuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (ehuo *EarningHistoryUpdateOne) SetNillableEventType(s *string) *EarningHistoryUpdateOne {
	if s != nil {
		ehuo.SetEventType(*s)
	}
	return ehuo
}

// SetSource sets the "source" field.
func (ehuo *EarningHistoryUpdateOne) SetSource(s string) *EarningHistoryUpdateOne {
	ehuo.mutation.SetSource(s)
	return ehuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ehuo *EarningHistoryUpdateOne) SetNillableSource(s *string) *EarningHistoryUpdateOne {
	if s != nil {
		ehuo.SetSource(*s)
	}
	return ehuo
}

// SetTrackID sets the "track_id" field.
func (ehuo *EarningHistoryUpdateOne) SetTrackID(s string) *EarningHistoryUpdateOne {
	ehuo.mutation.SetTrackID(s)
	return ehuo
}

// SetNillableTrackID sets the "track_id" field if the given value is not nil.
func (ehuo *EarningHistoryUpdateOne) SetNillableTrackID(s *string) *EarningHistoryUpdateOne {
	if s != nil {
		ehuo.SetTrackID(*s)
	}
	return ehuo
}

// ClearTrackID clears the value of the "track_id" field.
func (ehuo *EarningHistoryUpdateOne) ClearTrackID() *EarningHistoryUpdateOne {
	ehuo.mutation.ClearTrackID()
	return ehuo
}

// SetDate sets the "date" field.
func (ehuo *EarningHistoryUpdateOne) SetDate(s string) *EarningHistoryUpdateOne {
	ehuo.mutation.SetDate(s)
	return ehuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ehuo *EarningHistoryUpdateOne) SetNillableDate(s *string) *EarningHistoryUpdateOne {
	if s != nil {
		ehuo.SetDate(*s)
	}
	return ehuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ehuo *EarningHistoryUpdateOne) SetUserID(id int64) *EarningHistoryUpdateOne {
	ehuo.mutation.SetUserID(id)
	return ehuo
}

// SetUser sets the "user" edge to the User entity.
func (ehuo *EarningHistoryUpdateOne) SetUser(u *User) *EarningHistoryUpdateOne {
	return ehuo.SetUserID(u.ID)
}

// Mutation returns the EarningHistoryMutation object of the builder.
func (ehuo *EarningHistoryUpdateOne) Mutation() *EarningHistoryMutation {
	return ehuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ehuo *EarningHistoryUpdateOne) ClearUser() *EarningHistoryUpdateOne {
	ehuo.mutation.ClearUser()
	return ehuo
}

// Where appends a list predicates to the EarningHistoryUpdate builder.
func (ehuo *EarningHistoryUpdateOne) Where(ps ...predicate.EarningHistory) *EarningHistoryUpdateOne {
	ehuo.mutation.Where(ps...)
	return ehuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ehuo *EarningHistoryUpdateOne) Select(field string, fields ...string) *EarningHistoryUpdateOne {
	ehuo.fields = append([]string{field}, fields...)
	return ehuo
}

// Save executes the query and returns the updated EarningHistory entity.
func (ehuo *EarningHistoryUpdateOne) Save(ctx context.Context) (*EarningHistory, error) {
	return withHooks(ctx, ehuo.sqlSave, ehuo.mutation, ehuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ehuo *EarningHistoryUpdateOne) SaveX(ctx context.Context) *EarningHistory {
	node, err := ehuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ehuo *EarningHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ehuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ehuo *EarningHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ehuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ehuo *EarningHistoryUpdateOne) check() error {
	if ehuo.mutation.UserCleared() && len(ehuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EarningHistory.user"`)
	}
	return nil
}

func (ehuo *EarningHistoryUpdateOne) sqlSave(ctx context.Context) (_node *EarningHistory, err error) {
	if err := ehuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(earninghistory.Table, earninghistory.Columns, sqlgraph.NewFieldSpec(earninghistory.FieldID, field.TypeInt64))
	id, ok := ehuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EarningHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ehuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, earninghistory.FieldID)
		for _, f := range fields {
			if !earninghistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != earninghistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ehuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ehuo.mutation.Amount(); ok {
		_spec.SetField(earninghistory.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ehuo.mutation.AddedAmount(); ok {
		_spec.AddField(earninghistory.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ehuo.mutation.EventType(); ok {
		_spec.SetField(earninghistory.FieldEventType, field.TypeString, value)
	}
	if value, ok := ehuo.mutation.Source(); ok {
		_spec.SetField(earninghistory.FieldSource, field.TypeString, value)
	}
	if value, ok := ehuo.mutation.TrackID(); ok {
		_spec.SetField(earninghistory.FieldTrackID, field.TypeString, value)
	}
	if ehuo.mutation.TrackIDCleared() {
		_spec.ClearField(earninghistory.FieldTrackID, field.TypeString)
	}
	if value, ok := ehuo.mutation.Date(); ok {
		_spec.SetField(earninghistory.FieldDate, field.TypeString, value)
	}
	if ehuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earninghistory.UserTable,
			Columns: []string{earninghistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ehuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earninghistory.UserTable,
			Columns: []string{earninghistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EarningHistory{config: ehuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ehuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{earninghistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ehuo.mutation.done = true
	return _node, nil
}
