// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/banner"
	"affluo/ent/bannercreative"
	"affluo/ent/campaign"
	"affluo/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// BannerUpdate is the builder for updating Banner entities.
type BannerUpdate struct {
	config
	hooks    []Hook
	mutation *BannerMutation
}

// Where appends a list predicates to the BannerUpdate builder.
func (bu *BannerUpdate) Where(ps ...predicate.Banner) *BannerUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BannerUpdate) SetName(s string) *BannerUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableName(s *string) *BannerUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetDescription sets the "description" field.
func (bu *BannerUpdate) SetDescription(s string) *BannerUpdate {
	bu.mutation.SetDescription(s)
	return bu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableDescription(s *string) *BannerUpdate {
	if s != nil {
		bu.SetDescription(*s)
	}
	return bu
}

// ClearDescription clears the value of the "description" field.
func (bu *BannerUpdate) ClearDescription() *BannerUpdate {
	bu.mutation.ClearDescription()
	return bu
}

// SetType sets the "type" field.
func (bu *BannerUpdate) SetType(b banner.Type) *BannerUpdate {
	bu.mutation.SetType(b)
	return bu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableType(b *banner.Type) *BannerUpdate {
	if b != nil {
		bu.SetType(*b)
	}
	return bu
}

// SetClickURL sets the "click_url" field.
func (bu *BannerUpdate) SetClickURL(s string) *BannerUpdate {
	bu.mutation.SetClickURL(s)
	return bu
}

// SetNillableClickURL sets the "click_url" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableClickURL(s *string) *BannerUpdate {
	if s != nil {
		bu.SetClickURL(*s)
	}
	return bu
}

// ClearClickURL clears the value of the "click_url" field.
func (bu *BannerUpdate) ClearClickURL() *BannerUpdate {
	bu.mutation.ClearClickURL()
	return bu
}

// SetSize sets the "size" field.
func (bu *BannerUpdate) SetSize(s string) *BannerUpdate {
	bu.mutation.SetSize(s)
	return bu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableSize(s *string) *BannerUpdate {
	if s != nil {
		bu.SetSize(*s)
	}
	return bu
}

// SetStatus sets the "status" field.
func (bu *BannerUpdate) SetStatus(b banner.Status) *BannerUpdate {
	bu.mutation.SetStatus(b)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableStatus(b *banner.Status) *BannerUpdate {
	if b != nil {
		bu.SetStatus(*b)
	}
	return bu
}

// SetAllowedCountries sets the "allowed_countries" field.
func (bu *BannerUpdate) SetAllowedCountries(s []string) *BannerUpdate {
	bu.mutation.SetAllowedCountries(s)
	return bu
}

// AppendAllowedCountries appends s to the "allowed_countries" field.
func (bu *BannerUpdate) AppendAllowedCountries(s []string) *BannerUpdate {
	bu.mutation.AppendAllowedCountries(s)
	return bu
}

// ClearAllowedCountries clears the value of the "allowed_countries" field.
func (bu *BannerUpdate) ClearAllowedCountries() *BannerUpdate {
	bu.mutation.ClearAllowedCountries()
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BannerUpdate) SetUpdatedAt(t time.Time) *BannerUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// AddCampaignIDs adds the "campaigns" edge to the Campaign entity by IDs.
func (bu *BannerUpdate) AddCampaignIDs(ids ...int64) *BannerUpdate {
	bu.mutation.AddCampaignIDs(ids...)
	return bu
}

// AddCampaigns adds the "campaigns" edges to the Campaign entity.
func (bu *BannerUpdate) AddCampaigns(c ...*Campaign) *BannerUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.AddCampaignIDs(ids...)
}

// AddCreativeIDs adds the "creatives" edge to the BannerCreative entity by IDs.
func (bu *BannerUpdate) AddCreativeIDs(ids ...int64) *BannerUpdate {
	bu.mutation.AddCreativeIDs(ids...)
	return bu
}

// AddCreatives adds the "creatives" edges to the BannerCreative entity.
func (bu *BannerUpdate) AddCreatives(b ...*BannerCreative) *BannerUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddCreativeIDs(ids...)
}

// Mutation returns the BannerMutation object of the builder.
func (bu *BannerUpdate) Mutation() *BannerMutation {
	return bu.mutation
}

// ClearCampaigns clears all "campaigns" edges to the Campaign entity.
func (bu *BannerUpdate) ClearCampaigns() *BannerUpdate {
	bu.mutation.ClearCampaigns()
	return bu
}

// RemoveCampaignIDs removes the "campaigns" edge to Campaign entities by IDs.
func (bu *BannerUpdate) RemoveCampaignIDs(ids ...int64) *BannerUpdate {
	bu.mutation.RemoveCampaignIDs(ids...)
	return bu
}

// RemoveCampaigns removes "campaigns" edges to Campaign entities.
func (bu *BannerUpdate) RemoveCampaigns(c ...*Campaign) *BannerUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.RemoveCampaignIDs(ids...)
}

// ClearCreatives clears all "creatives" edges to the BannerCreative entity.
func (bu *BannerUpdate) ClearCreatives() *BannerUpdate {
	bu.mutation.ClearCreatives()
	return bu
}

// RemoveCreativeIDs removes the "creatives" edge to BannerCreative entities by IDs.
func (bu *BannerUpdate) RemoveCreativeIDs(ids ...int64) *BannerUpdate {
	bu.mutation.RemoveCreativeIDs(ids...)
	return bu
}

// RemoveCreatives removes "creatives" edges to BannerCreative entities.
func (bu *BannerUpdate) RemoveCreatives(b ...*BannerCreative) *BannerUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveCreativeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BannerUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BannerUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BannerUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BannerUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BannerUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := banner.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BannerUpdate) check() error {
	if v, ok := bu.mutation.Name(); ok {
		if err := banner.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Banner.name": %w`, err)}
		}
	}
	if v, ok := bu.mutation.GetType(); ok {
		if err := banner.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Banner.type": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Status(); ok {
		if err := banner.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Banner.status": %w`, err)}
		}
	}
	return nil
}

func (bu *BannerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(banner.Table, banner.Columns, sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(banner.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.Description(); ok {
		_spec.SetField(banner.FieldDescription, field.TypeString, value)
	}
	if bu.mutation.DescriptionCleared() {
		_spec.ClearField(banner.FieldDescription, field.TypeString)
	}
	if value, ok := bu.mutation.GetType(); ok {
		_spec.SetField(banner.FieldType, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.ClickURL(); ok {
		_spec.SetField(banner.FieldClickURL, field.TypeString, value)
	}
	if bu.mutation.ClickURLCleared() {
		_spec.ClearField(banner.FieldClickURL, field.TypeString)
	}
	if value, ok := bu.mutation.Size(); ok {
		_spec.SetField(banner.FieldSize, field.TypeString, value)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(banner.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.AllowedCountries(); ok {
		_spec.SetField(banner.FieldAllowedCountries, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedAllowedCountries(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, banner.FieldAllowedCountries, value)
		})
	}
	if bu.mutation.AllowedCountriesCleared() {
		_spec.ClearField(banner.FieldAllowedCountries, field.TypeJSON)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(banner.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.CampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   banner.CampaignsTable,
			Columns: banner.CampaignsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedCampaignsIDs(); len(nodes) > 0 && !bu.mutation.CampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   banner.CampaignsTable,
			Columns: banner.CampaignsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CampaignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   banner.CampaignsTable,
			Columns: banner.CampaignsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CreativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   banner.CreativesTable,
			Columns: []string{banner.CreativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bannercreative.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedCreativesIDs(); len(nodes) > 0 && !bu.mutation.CreativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   banner.CreativesTable,
			Columns: []string{banner.CreativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bannercreative.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CreativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   banner.CreativesTable,
			Columns: []string{banner.CreativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bannercreative.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BannerUpdateOne is the builder for updating a single Banner entity.
type BannerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BannerMutation
}

// SetName sets the "name" field.
func (buo *BannerUpdateOne) SetName(s string) *BannerUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableName(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetDescription sets the "description" field.
func (buo *BannerUpdateOne) SetDescription(s string) *BannerUpdateOne {
	buo.mutation.SetDescription(s)
	return buo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableDescription(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetDescription(*s)
	}
	return buo
}

// ClearDescription clears the value of the "description" field.
func (buo *BannerUpdateOne) ClearDescription() *BannerUpdateOne {
	buo.mutation.ClearDescription()
	return buo
}

// SetType sets the "type" field.
func (buo *BannerUpdateOne) SetType(b banner.Type) *BannerUpdateOne {
	buo.mutation.SetType(b)
	return buo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableType(b *banner.Type) *BannerUpdateOne {
	if b != nil {
		buo.SetType(*b)
	}
	return buo
}

// SetClickURL sets the "click_url" field.
func (buo *BannerUpdateOne) SetClickURL(s string) *BannerUpdateOne {
	buo.mutation.SetClickURL(s)
	return buo
}

// SetNillableClickURL sets the "click_url" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableClickURL(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetClickURL(*s)
	}
	return buo
}

// ClearClickURL clears the value of the "click_url" field.
func (buo *BannerUpdateOne) ClearClickURL() *BannerUpdateOne {
	buo.mutation.ClearClickURL()
	return buo
}

// SetSize sets the "size" field.
func (buo *BannerUpdateOne) SetSize(s string) *BannerUpdateOne {
	buo.mutation.SetSize(s)
	return buo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableSize(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetSize(*s)
	}
	return buo
}

// SetStatus sets the "status" field.
func (buo *BannerUpdateOne) SetStatus(b banner.Status) *BannerUpdateOne {
	buo.mutation.SetStatus(b)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableStatus(b *banner.Status) *BannerUpdateOne {
	if b != nil {
		buo.SetStatus(*b)
	}
	return buo
}

// SetAllowedCountries sets the "allowed_countries" field.
func (buo *BannerUpdateOne) SetAllowedCountries(s []string) *BannerUpdateOne {
	buo.mutation.SetAllowedCountries(s)
	return buo
}

// AppendAllowedCountries appends s to the "allowed_countries" field.
func (buo *BannerUpdateOne) AppendAllowedCountries(s []string) *BannerUpdateOne {
	buo.mutation.AppendAllowedCountries(s)
	return buo
}

// ClearAllowedCountries clears the value of the "allowed_countries" field.
func (buo *BannerUpdateOne) ClearAllowedCountries() *BannerUpdateOne {
	buo.mutation.ClearAllowedCountries()
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BannerUpdateOne) SetUpdatedAt(t time.Time) *BannerUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// AddCampaignIDs adds the "campaigns" edge to the Campaign entity by IDs.
func (buo *BannerUpdateOne) AddCampaignIDs(ids ...int64) *BannerUpdateOne {
	buo.mutation.AddCampaignIDs(ids...)
	return buo
}

// AddCampaigns adds the "campaigns" edges to the Campaign entity.
func (buo *BannerUpdateOne) AddCampaigns(c ...*Campaign) *BannerUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.AddCampaignIDs(ids...)
}

// AddCreativeIDs adds the "creatives" edge to the BannerCreative entity by IDs.
func (buo *BannerUpdateOne) AddCreativeIDs(ids ...int64) *BannerUpdateOne {
	buo.mutation.AddCreativeIDs(ids...)
	return buo
}

// AddCreatives adds the "creatives" edges to the BannerCreative entity.
func (buo *BannerUpdateOne) AddCreatives(b ...*BannerCreative) *BannerUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddCreativeIDs(ids...)
}

// Mutation returns the BannerMutation object of the builder.
func (buo *BannerUpdateOne) Mutation() *BannerMutation {
	return buo.mutation
}

// ClearCampaigns clears all "campaigns" edges to the Campaign entity.
func (buo *BannerUpdateOne) ClearCampaigns() *BannerUpdateOne {
	buo.mutation.ClearCampaigns()
	return buo
}

// RemoveCampaignIDs removes the "campaigns" edge to Campaign entities by IDs.
func (buo *BannerUpdateOne) RemoveCampaignIDs(ids ...int64) *BannerUpdateOne {
	buo.mutation.RemoveCampaignIDs(ids...)
	return buo
}

// RemoveCampaigns removes "campaigns" edges to Campaign entities.
func (buo *BannerUpdateOne) RemoveCampaigns(c ...*Campaign) *BannerUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.RemoveCampaignIDs(ids...)
}

// ClearCreatives clears all "creatives" edges to the BannerCreative entity.
func (buo *BannerUpdateOne) ClearCreatives() *BannerUpdateOne {
	buo.mutation.ClearCreatives()
	return buo
}

// RemoveCreativeIDs removes the "creatives" edge to BannerCreative entities by IDs.
func (buo *BannerUpdateOne) RemoveCreativeIDs(ids ...int64) *BannerUpdateOne {
	buo.mutation.RemoveCreativeIDs(ids...)
	return buo
}

// RemoveCreatives removes "creatives" edges to BannerCreative entities.
func (buo *BannerUpdateOne) RemoveCreatives(b ...*BannerCreative) *BannerUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveCreativeIDs(ids...)
}

// Where appends a list predicates to the BannerUpdate builder.
func (buo *BannerUpdateOne) Where(ps ...predicate.Banner) *BannerUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BannerUpdateOne) Select(field string, fields ...string) *BannerUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Banner entity.
func (buo *BannerUpdateOne) Save(ctx context.Context) (*Banner, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BannerUpdateOne) SaveX(ctx context.Context) *Banner {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BannerUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BannerUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BannerUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := banner.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BannerUpdateOne) check() error {
	if v, ok := buo.mutation.Name(); ok {
		if err := banner.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Banner.name": %w`, err)}
		}
	}
	if v, ok := buo.mutation.GetType(); ok {
		if err := banner.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Banner.type": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Status(); ok {
		if err := banner.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Banner.status": %w`, err)}
		}
	}
	return nil
}

func (buo *BannerUpdateOne) sqlSave(ctx context.Context) (_node *Banner, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(banner.Table, banner.Columns, sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Banner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, banner.FieldID)
		for _, f := range fields {
			if !banner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != banner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(banner.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.Description(); ok {
		_spec.SetField(banner.FieldDescription, field.TypeString, value)
	}
	if buo.mutation.DescriptionCleared() {
		_spec.ClearField(banner.FieldDescription, field.TypeString)
	}
	if value, ok := buo.mutation.GetType(); ok {
		_spec.SetField(banner.FieldType, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.ClickURL(); ok {
		_spec.SetField(banner.FieldClickURL, field.TypeString, value)
	}
	if buo.mutation.ClickURLCleared() {
		_spec.ClearField(banner.FieldClickURL, field.TypeString)
	}
	if value, ok := buo.mutation.Size(); ok {
		_spec.SetField(banner.FieldSize, field.TypeString, value)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(banner.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.AllowedCountries(); ok {
		_spec.SetField(banner.FieldAllowedCountries, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedAllowedCountries(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, banner.FieldAllowedCountries, value)
		})
	}
	if buo.mutation.AllowedCountriesCleared() {
		_spec.ClearField(banner.FieldAllowedCountries, field.TypeJSON)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(banner.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.CampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   banner.CampaignsTable,
			Columns: banner.CampaignsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedCampaignsIDs(); len(nodes) > 0 && !buo.mutation.CampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   banner.CampaignsTable,
			Columns: banner.CampaignsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CampaignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   banner.CampaignsTable,
			Columns: banner.CampaignsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CreativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   banner.CreativesTable,
			Columns: []string{banner.CreativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bannercreative.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedCreativesIDs(); len(nodes) > 0 && !buo.mutation.CreativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   banner.CreativesTable,
			Columns: []string{banner.CreativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bannercreative.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CreativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   banner.CreativesTable,
			Columns: []string{banner.CreativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bannercreative.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Banner{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
