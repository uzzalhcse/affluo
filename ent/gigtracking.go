// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/gigtracking"
	"affluo/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GigTracking is the model entity for the GigTracking schema.
type GigTracking struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// AffiliateUserID holds the value of the "affiliate_user_id" field.
	AffiliateUserID string `json:"affiliate_user_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// UtmQuery holds the value of the "utm_query" field.
	UtmQuery string `json:"utm_query,omitempty"`
	// Lp holds the value of the "lp" field.
	Lp string `json:"lp,omitempty"`
	// TrackID holds the value of the "track_id" field.
	TrackID string `json:"track_id,omitempty"`
	// Revenue holds the value of the "revenue" field.
	Revenue float64 `json:"revenue,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GigTrackingQuery when eager-loading is set.
	Edges                  GigTrackingEdges `json:"edges"`
	gig_tracking_publisher *int64
	selectValues           sql.SelectValues
}

// GigTrackingEdges holds the relations/edges for other nodes in the graph.
type GigTrackingEdges struct {
	// Publisher holds the value of the publisher edge.
	Publisher *User `json:"publisher,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PublisherOrErr returns the Publisher value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GigTrackingEdges) PublisherOrErr() (*User, error) {
	if e.Publisher != nil {
		return e.Publisher, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "publisher"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GigTracking) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gigtracking.FieldRevenue:
			values[i] = new(sql.NullFloat64)
		case gigtracking.FieldID:
			values[i] = new(sql.NullInt64)
		case gigtracking.FieldAffiliateUserID, gigtracking.FieldType, gigtracking.FieldUtmQuery, gigtracking.FieldLp, gigtracking.FieldTrackID:
			values[i] = new(sql.NullString)
		case gigtracking.FieldDate, gigtracking.FieldCreatedAt, gigtracking.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case gigtracking.ForeignKeys[0]: // gig_tracking_publisher
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GigTracking fields.
func (gt *GigTracking) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gigtracking.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gt.ID = int64(value.Int64)
		case gigtracking.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				gt.Date = value.Time
			}
		case gigtracking.FieldAffiliateUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field affiliate_user_id", values[i])
			} else if value.Valid {
				gt.AffiliateUserID = value.String
			}
		case gigtracking.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				gt.Type = value.String
			}
		case gigtracking.FieldUtmQuery:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field utm_query", values[i])
			} else if value.Valid {
				gt.UtmQuery = value.String
			}
		case gigtracking.FieldLp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lp", values[i])
			} else if value.Valid {
				gt.Lp = value.String
			}
		case gigtracking.FieldTrackID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field track_id", values[i])
			} else if value.Valid {
				gt.TrackID = value.String
			}
		case gigtracking.FieldRevenue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field revenue", values[i])
			} else if value.Valid {
				gt.Revenue = value.Float64
			}
		case gigtracking.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gt.CreatedAt = value.Time
			}
		case gigtracking.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gt.UpdatedAt = value.Time
			}
		case gigtracking.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field gig_tracking_publisher", value)
			} else if value.Valid {
				gt.gig_tracking_publisher = new(int64)
				*gt.gig_tracking_publisher = int64(value.Int64)
			}
		default:
			gt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GigTracking.
// This includes values selected through modifiers, order, etc.
func (gt *GigTracking) Value(name string) (ent.Value, error) {
	return gt.selectValues.Get(name)
}

// QueryPublisher queries the "publisher" edge of the GigTracking entity.
func (gt *GigTracking) QueryPublisher() *UserQuery {
	return NewGigTrackingClient(gt.config).QueryPublisher(gt)
}

// Update returns a builder for updating this GigTracking.
// Note that you need to call GigTracking.Unwrap() before calling this method if this GigTracking
// was returned from a transaction, and the transaction was committed or rolled back.
func (gt *GigTracking) Update() *GigTrackingUpdateOne {
	return NewGigTrackingClient(gt.config).UpdateOne(gt)
}

// Unwrap unwraps the GigTracking entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gt *GigTracking) Unwrap() *GigTracking {
	_tx, ok := gt.config.driver.(*txDriver)
	if !ok {
		panic("ent: GigTracking is not a transactional entity")
	}
	gt.config.driver = _tx.drv
	return gt
}

// String implements the fmt.Stringer.
func (gt *GigTracking) String() string {
	var builder strings.Builder
	builder.WriteString("GigTracking(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gt.ID))
	builder.WriteString("date=")
	builder.WriteString(gt.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("affiliate_user_id=")
	builder.WriteString(gt.AffiliateUserID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(gt.Type)
	builder.WriteString(", ")
	builder.WriteString("utm_query=")
	builder.WriteString(gt.UtmQuery)
	builder.WriteString(", ")
	builder.WriteString("lp=")
	builder.WriteString(gt.Lp)
	builder.WriteString(", ")
	builder.WriteString("track_id=")
	builder.WriteString(gt.TrackID)
	builder.WriteString(", ")
	builder.WriteString("revenue=")
	builder.WriteString(fmt.Sprintf("%v", gt.Revenue))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GigTrackings is a parsable slice of GigTracking.
type GigTrackings []*GigTracking
