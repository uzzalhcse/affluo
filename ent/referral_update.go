// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/campaign"
	"affluo/ent/predicate"
	"affluo/ent/referral"
	"affluo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReferralUpdate is the builder for updating Referral entities.
type ReferralUpdate struct {
	config
	hooks    []Hook
	mutation *ReferralMutation
}

// Where appends a list predicates to the ReferralUpdate builder.
func (ru *ReferralUpdate) Where(ps ...predicate.Referral) *ReferralUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetStatus sets the "status" field.
func (ru *ReferralUpdate) SetStatus(r referral.Status) *ReferralUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *ReferralUpdate) SetNillableStatus(r *referral.Status) *ReferralUpdate {
	if r != nil {
		ru.SetStatus(*r)
	}
	return ru
}

// SetCommissionAmount sets the "commission_amount" field.
func (ru *ReferralUpdate) SetCommissionAmount(f float64) *ReferralUpdate {
	ru.mutation.ResetCommissionAmount()
	ru.mutation.SetCommissionAmount(f)
	return ru
}

// SetNillableCommissionAmount sets the "commission_amount" field if the given value is not nil.
func (ru *ReferralUpdate) SetNillableCommissionAmount(f *float64) *ReferralUpdate {
	if f != nil {
		ru.SetCommissionAmount(*f)
	}
	return ru
}

// AddCommissionAmount adds f to the "commission_amount" field.
func (ru *ReferralUpdate) AddCommissionAmount(f float64) *ReferralUpdate {
	ru.mutation.AddCommissionAmount(f)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *ReferralUpdate) SetCreatedAt(t time.Time) *ReferralUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *ReferralUpdate) SetNillableCreatedAt(t *time.Time) *ReferralUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetProcessedAt sets the "processed_at" field.
func (ru *ReferralUpdate) SetProcessedAt(t time.Time) *ReferralUpdate {
	ru.mutation.SetProcessedAt(t)
	return ru
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (ru *ReferralUpdate) SetNillableProcessedAt(t *time.Time) *ReferralUpdate {
	if t != nil {
		ru.SetProcessedAt(*t)
	}
	return ru
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (ru *ReferralUpdate) ClearProcessedAt() *ReferralUpdate {
	ru.mutation.ClearProcessedAt()
	return ru
}

// SetReferrerID sets the "referrer" edge to the User entity by ID.
func (ru *ReferralUpdate) SetReferrerID(id int64) *ReferralUpdate {
	ru.mutation.SetReferrerID(id)
	return ru
}

// SetNillableReferrerID sets the "referrer" edge to the User entity by ID if the given value is not nil.
func (ru *ReferralUpdate) SetNillableReferrerID(id *int64) *ReferralUpdate {
	if id != nil {
		ru = ru.SetReferrerID(*id)
	}
	return ru
}

// SetReferrer sets the "referrer" edge to the User entity.
func (ru *ReferralUpdate) SetReferrer(u *User) *ReferralUpdate {
	return ru.SetReferrerID(u.ID)
}

// SetCampaignID sets the "campaign" edge to the Campaign entity by ID.
func (ru *ReferralUpdate) SetCampaignID(id int64) *ReferralUpdate {
	ru.mutation.SetCampaignID(id)
	return ru
}

// SetNillableCampaignID sets the "campaign" edge to the Campaign entity by ID if the given value is not nil.
func (ru *ReferralUpdate) SetNillableCampaignID(id *int64) *ReferralUpdate {
	if id != nil {
		ru = ru.SetCampaignID(*id)
	}
	return ru
}

// SetCampaign sets the "campaign" edge to the Campaign entity.
func (ru *ReferralUpdate) SetCampaign(c *Campaign) *ReferralUpdate {
	return ru.SetCampaignID(c.ID)
}

// Mutation returns the ReferralMutation object of the builder.
func (ru *ReferralUpdate) Mutation() *ReferralMutation {
	return ru.mutation
}

// ClearReferrer clears the "referrer" edge to the User entity.
func (ru *ReferralUpdate) ClearReferrer() *ReferralUpdate {
	ru.mutation.ClearReferrer()
	return ru
}

// ClearCampaign clears the "campaign" edge to the Campaign entity.
func (ru *ReferralUpdate) ClearCampaign() *ReferralUpdate {
	ru.mutation.ClearCampaign()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReferralUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReferralUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReferralUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReferralUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReferralUpdate) check() error {
	if v, ok := ru.mutation.Status(); ok {
		if err := referral.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Referral.status": %w`, err)}
		}
	}
	return nil
}

func (ru *ReferralUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(referral.Table, referral.Columns, sqlgraph.NewFieldSpec(referral.FieldID, field.TypeInt64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(referral.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.CommissionAmount(); ok {
		_spec.SetField(referral.FieldCommissionAmount, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedCommissionAmount(); ok {
		_spec.AddField(referral.FieldCommissionAmount, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(referral.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.ProcessedAt(); ok {
		_spec.SetField(referral.FieldProcessedAt, field.TypeTime, value)
	}
	if ru.mutation.ProcessedAtCleared() {
		_spec.ClearField(referral.FieldProcessedAt, field.TypeTime)
	}
	if ru.mutation.ReferrerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   referral.ReferrerTable,
			Columns: []string{referral.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ReferrerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   referral.ReferrerTable,
			Columns: []string{referral.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   referral.CampaignTable,
			Columns: []string{referral.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   referral.CampaignTable,
			Columns: []string{referral.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{referral.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReferralUpdateOne is the builder for updating a single Referral entity.
type ReferralUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReferralMutation
}

// SetStatus sets the "status" field.
func (ruo *ReferralUpdateOne) SetStatus(r referral.Status) *ReferralUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *ReferralUpdateOne) SetNillableStatus(r *referral.Status) *ReferralUpdateOne {
	if r != nil {
		ruo.SetStatus(*r)
	}
	return ruo
}

// SetCommissionAmount sets the "commission_amount" field.
func (ruo *ReferralUpdateOne) SetCommissionAmount(f float64) *ReferralUpdateOne {
	ruo.mutation.ResetCommissionAmount()
	ruo.mutation.SetCommissionAmount(f)
	return ruo
}

// SetNillableCommissionAmount sets the "commission_amount" field if the given value is not nil.
func (ruo *ReferralUpdateOne) SetNillableCommissionAmount(f *float64) *ReferralUpdateOne {
	if f != nil {
		ruo.SetCommissionAmount(*f)
	}
	return ruo
}

// AddCommissionAmount adds f to the "commission_amount" field.
func (ruo *ReferralUpdateOne) AddCommissionAmount(f float64) *ReferralUpdateOne {
	ruo.mutation.AddCommissionAmount(f)
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *ReferralUpdateOne) SetCreatedAt(t time.Time) *ReferralUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *ReferralUpdateOne) SetNillableCreatedAt(t *time.Time) *ReferralUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetProcessedAt sets the "processed_at" field.
func (ruo *ReferralUpdateOne) SetProcessedAt(t time.Time) *ReferralUpdateOne {
	ruo.mutation.SetProcessedAt(t)
	return ruo
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (ruo *ReferralUpdateOne) SetNillableProcessedAt(t *time.Time) *ReferralUpdateOne {
	if t != nil {
		ruo.SetProcessedAt(*t)
	}
	return ruo
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (ruo *ReferralUpdateOne) ClearProcessedAt() *ReferralUpdateOne {
	ruo.mutation.ClearProcessedAt()
	return ruo
}

// SetReferrerID sets the "referrer" edge to the User entity by ID.
func (ruo *ReferralUpdateOne) SetReferrerID(id int64) *ReferralUpdateOne {
	ruo.mutation.SetReferrerID(id)
	return ruo
}

// SetNillableReferrerID sets the "referrer" edge to the User entity by ID if the given value is not nil.
func (ruo *ReferralUpdateOne) SetNillableReferrerID(id *int64) *ReferralUpdateOne {
	if id != nil {
		ruo = ruo.SetReferrerID(*id)
	}
	return ruo
}

// SetReferrer sets the "referrer" edge to the User entity.
func (ruo *ReferralUpdateOne) SetReferrer(u *User) *ReferralUpdateOne {
	return ruo.SetReferrerID(u.ID)
}

// SetCampaignID sets the "campaign" edge to the Campaign entity by ID.
func (ruo *ReferralUpdateOne) SetCampaignID(id int64) *ReferralUpdateOne {
	ruo.mutation.SetCampaignID(id)
	return ruo
}

// SetNillableCampaignID sets the "campaign" edge to the Campaign entity by ID if the given value is not nil.
func (ruo *ReferralUpdateOne) SetNillableCampaignID(id *int64) *ReferralUpdateOne {
	if id != nil {
		ruo = ruo.SetCampaignID(*id)
	}
	return ruo
}

// SetCampaign sets the "campaign" edge to the Campaign entity.
func (ruo *ReferralUpdateOne) SetCampaign(c *Campaign) *ReferralUpdateOne {
	return ruo.SetCampaignID(c.ID)
}

// Mutation returns the ReferralMutation object of the builder.
func (ruo *ReferralUpdateOne) Mutation() *ReferralMutation {
	return ruo.mutation
}

// ClearReferrer clears the "referrer" edge to the User entity.
func (ruo *ReferralUpdateOne) ClearReferrer() *ReferralUpdateOne {
	ruo.mutation.ClearReferrer()
	return ruo
}

// ClearCampaign clears the "campaign" edge to the Campaign entity.
func (ruo *ReferralUpdateOne) ClearCampaign() *ReferralUpdateOne {
	ruo.mutation.ClearCampaign()
	return ruo
}

// Where appends a list predicates to the ReferralUpdate builder.
func (ruo *ReferralUpdateOne) Where(ps ...predicate.Referral) *ReferralUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReferralUpdateOne) Select(field string, fields ...string) *ReferralUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Referral entity.
func (ruo *ReferralUpdateOne) Save(ctx context.Context) (*Referral, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReferralUpdateOne) SaveX(ctx context.Context) *Referral {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReferralUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReferralUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReferralUpdateOne) check() error {
	if v, ok := ruo.mutation.Status(); ok {
		if err := referral.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Referral.status": %w`, err)}
		}
	}
	return nil
}

func (ruo *ReferralUpdateOne) sqlSave(ctx context.Context) (_node *Referral, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(referral.Table, referral.Columns, sqlgraph.NewFieldSpec(referral.FieldID, field.TypeInt64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Referral.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, referral.FieldID)
		for _, f := range fields {
			if !referral.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != referral.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(referral.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.CommissionAmount(); ok {
		_spec.SetField(referral.FieldCommissionAmount, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedCommissionAmount(); ok {
		_spec.AddField(referral.FieldCommissionAmount, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(referral.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.ProcessedAt(); ok {
		_spec.SetField(referral.FieldProcessedAt, field.TypeTime, value)
	}
	if ruo.mutation.ProcessedAtCleared() {
		_spec.ClearField(referral.FieldProcessedAt, field.TypeTime)
	}
	if ruo.mutation.ReferrerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   referral.ReferrerTable,
			Columns: []string{referral.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ReferrerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   referral.ReferrerTable,
			Columns: []string{referral.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   referral.CampaignTable,
			Columns: []string{referral.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   referral.CampaignTable,
			Columns: []string{referral.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Referral{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{referral.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
