// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/commissionplan"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CommissionPlan is the model entity for the CommissionPlan schema.
type CommissionPlan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Type holds the value of the "type" field.
	Type commissionplan.Type `json:"type,omitempty"`
	// ClickCommission holds the value of the "click_commission" field.
	ClickCommission float64 `json:"click_commission,omitempty"`
	// ImpressionCommission holds the value of the "impression_commission" field.
	ImpressionCommission float64 `json:"impression_commission,omitempty"`
	// FirstLeadCommission holds the value of the "first_lead_commission" field.
	FirstLeadCommission float64 `json:"first_lead_commission,omitempty"`
	// RepeatLeadCommission holds the value of the "repeat_lead_commission" field.
	RepeatLeadCommission float64 `json:"repeat_lead_commission,omitempty"`
	// ValidMonths holds the value of the "valid_months" field.
	ValidMonths int `json:"valid_months,omitempty"`
	// MinimumPayout holds the value of the "minimum_payout" field.
	MinimumPayout float64 `json:"minimum_payout,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// IsDefault holds the value of the "is_default" field.
	IsDefault bool `json:"is_default,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommissionPlanQuery when eager-loading is set.
	Edges        CommissionPlanEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommissionPlanEdges holds the relations/edges for other nodes in the graph.
type CommissionPlanEdges struct {
	// Publishers holds the value of the publishers edge.
	Publishers []*User `json:"publishers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PublishersOrErr returns the Publishers value or an error if the edge
// was not loaded in eager-loading.
func (e CommissionPlanEdges) PublishersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Publishers, nil
	}
	return nil, &NotLoadedError{edge: "publishers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommissionPlan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case commissionplan.FieldIsActive, commissionplan.FieldIsDefault:
			values[i] = new(sql.NullBool)
		case commissionplan.FieldClickCommission, commissionplan.FieldImpressionCommission, commissionplan.FieldFirstLeadCommission, commissionplan.FieldRepeatLeadCommission, commissionplan.FieldMinimumPayout:
			values[i] = new(sql.NullFloat64)
		case commissionplan.FieldID, commissionplan.FieldValidMonths:
			values[i] = new(sql.NullInt64)
		case commissionplan.FieldName, commissionplan.FieldDescription, commissionplan.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommissionPlan fields.
func (cp *CommissionPlan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commissionplan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = int(value.Int64)
		case commissionplan.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cp.Name = value.String
			}
		case commissionplan.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cp.Description = value.String
			}
		case commissionplan.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				cp.Type = commissionplan.Type(value.String)
			}
		case commissionplan.FieldClickCommission:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field click_commission", values[i])
			} else if value.Valid {
				cp.ClickCommission = value.Float64
			}
		case commissionplan.FieldImpressionCommission:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field impression_commission", values[i])
			} else if value.Valid {
				cp.ImpressionCommission = value.Float64
			}
		case commissionplan.FieldFirstLeadCommission:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field first_lead_commission", values[i])
			} else if value.Valid {
				cp.FirstLeadCommission = value.Float64
			}
		case commissionplan.FieldRepeatLeadCommission:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field repeat_lead_commission", values[i])
			} else if value.Valid {
				cp.RepeatLeadCommission = value.Float64
			}
		case commissionplan.FieldValidMonths:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field valid_months", values[i])
			} else if value.Valid {
				cp.ValidMonths = int(value.Int64)
			}
		case commissionplan.FieldMinimumPayout:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field minimum_payout", values[i])
			} else if value.Valid {
				cp.MinimumPayout = value.Float64
			}
		case commissionplan.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				cp.IsActive = value.Bool
			}
		case commissionplan.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				cp.IsDefault = value.Bool
			}
		default:
			cp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CommissionPlan.
// This includes values selected through modifiers, order, etc.
func (cp *CommissionPlan) Value(name string) (ent.Value, error) {
	return cp.selectValues.Get(name)
}

// QueryPublishers queries the "publishers" edge of the CommissionPlan entity.
func (cp *CommissionPlan) QueryPublishers() *UserQuery {
	return NewCommissionPlanClient(cp.config).QueryPublishers(cp)
}

// Update returns a builder for updating this CommissionPlan.
// Note that you need to call CommissionPlan.Unwrap() before calling this method if this CommissionPlan
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CommissionPlan) Update() *CommissionPlanUpdateOne {
	return NewCommissionPlanClient(cp.config).UpdateOne(cp)
}

// Unwrap unwraps the CommissionPlan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CommissionPlan) Unwrap() *CommissionPlan {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommissionPlan is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CommissionPlan) String() string {
	var builder strings.Builder
	builder.WriteString("CommissionPlan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("name=")
	builder.WriteString(cp.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(cp.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", cp.Type))
	builder.WriteString(", ")
	builder.WriteString("click_commission=")
	builder.WriteString(fmt.Sprintf("%v", cp.ClickCommission))
	builder.WriteString(", ")
	builder.WriteString("impression_commission=")
	builder.WriteString(fmt.Sprintf("%v", cp.ImpressionCommission))
	builder.WriteString(", ")
	builder.WriteString("first_lead_commission=")
	builder.WriteString(fmt.Sprintf("%v", cp.FirstLeadCommission))
	builder.WriteString(", ")
	builder.WriteString("repeat_lead_commission=")
	builder.WriteString(fmt.Sprintf("%v", cp.RepeatLeadCommission))
	builder.WriteString(", ")
	builder.WriteString("valid_months=")
	builder.WriteString(fmt.Sprintf("%v", cp.ValidMonths))
	builder.WriteString(", ")
	builder.WriteString("minimum_payout=")
	builder.WriteString(fmt.Sprintf("%v", cp.MinimumPayout))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", cp.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", cp.IsDefault))
	builder.WriteByte(')')
	return builder.String()
}

// CommissionPlans is a parsable slice of CommissionPlan.
type CommissionPlans []*CommissionPlan
