// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/banner"
	"affluo/ent/bannercreative"
	"affluo/ent/creative"
	"affluo/ent/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BannerCreativeQuery is the builder for querying BannerCreative entities.
type BannerCreativeQuery struct {
	config
	ctx          *QueryContext
	order        []bannercreative.OrderOption
	inters       []Interceptor
	predicates   []predicate.BannerCreative
	withBanner   *BannerQuery
	withCreative *CreativeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BannerCreativeQuery builder.
func (bcq *BannerCreativeQuery) Where(ps ...predicate.BannerCreative) *BannerCreativeQuery {
	bcq.predicates = append(bcq.predicates, ps...)
	return bcq
}

// Limit the number of records to be returned by this query.
func (bcq *BannerCreativeQuery) Limit(limit int) *BannerCreativeQuery {
	bcq.ctx.Limit = &limit
	return bcq
}

// Offset to start from.
func (bcq *BannerCreativeQuery) Offset(offset int) *BannerCreativeQuery {
	bcq.ctx.Offset = &offset
	return bcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bcq *BannerCreativeQuery) Unique(unique bool) *BannerCreativeQuery {
	bcq.ctx.Unique = &unique
	return bcq
}

// Order specifies how the records should be ordered.
func (bcq *BannerCreativeQuery) Order(o ...bannercreative.OrderOption) *BannerCreativeQuery {
	bcq.order = append(bcq.order, o...)
	return bcq
}

// QueryBanner chains the current query on the "banner" edge.
func (bcq *BannerCreativeQuery) QueryBanner() *BannerQuery {
	query := (&BannerClient{config: bcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bannercreative.Table, bannercreative.FieldID, selector),
			sqlgraph.To(banner.Table, banner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, bannercreative.BannerTable, bannercreative.BannerColumn),
		)
		fromU = sqlgraph.SetNeighbors(bcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreative chains the current query on the "creative" edge.
func (bcq *BannerCreativeQuery) QueryCreative() *CreativeQuery {
	query := (&CreativeClient{config: bcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bannercreative.Table, bannercreative.FieldID, selector),
			sqlgraph.To(creative.Table, creative.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, bannercreative.CreativeTable, bannercreative.CreativeColumn),
		)
		fromU = sqlgraph.SetNeighbors(bcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BannerCreative entity from the query.
// Returns a *NotFoundError when no BannerCreative was found.
func (bcq *BannerCreativeQuery) First(ctx context.Context) (*BannerCreative, error) {
	nodes, err := bcq.Limit(1).All(setContextOp(ctx, bcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{bannercreative.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bcq *BannerCreativeQuery) FirstX(ctx context.Context) *BannerCreative {
	node, err := bcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BannerCreative ID from the query.
// Returns a *NotFoundError when no BannerCreative ID was found.
func (bcq *BannerCreativeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bcq.Limit(1).IDs(setContextOp(ctx, bcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{bannercreative.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bcq *BannerCreativeQuery) FirstIDX(ctx context.Context) int {
	id, err := bcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BannerCreative entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BannerCreative entity is found.
// Returns a *NotFoundError when no BannerCreative entities are found.
func (bcq *BannerCreativeQuery) Only(ctx context.Context) (*BannerCreative, error) {
	nodes, err := bcq.Limit(2).All(setContextOp(ctx, bcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{bannercreative.Label}
	default:
		return nil, &NotSingularError{bannercreative.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bcq *BannerCreativeQuery) OnlyX(ctx context.Context) *BannerCreative {
	node, err := bcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BannerCreative ID in the query.
// Returns a *NotSingularError when more than one BannerCreative ID is found.
// Returns a *NotFoundError when no entities are found.
func (bcq *BannerCreativeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bcq.Limit(2).IDs(setContextOp(ctx, bcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{bannercreative.Label}
	default:
		err = &NotSingularError{bannercreative.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bcq *BannerCreativeQuery) OnlyIDX(ctx context.Context) int {
	id, err := bcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BannerCreatives.
func (bcq *BannerCreativeQuery) All(ctx context.Context) ([]*BannerCreative, error) {
	ctx = setContextOp(ctx, bcq.ctx, ent.OpQueryAll)
	if err := bcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BannerCreative, *BannerCreativeQuery]()
	return withInterceptors[[]*BannerCreative](ctx, bcq, qr, bcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bcq *BannerCreativeQuery) AllX(ctx context.Context) []*BannerCreative {
	nodes, err := bcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BannerCreative IDs.
func (bcq *BannerCreativeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if bcq.ctx.Unique == nil && bcq.path != nil {
		bcq.Unique(true)
	}
	ctx = setContextOp(ctx, bcq.ctx, ent.OpQueryIDs)
	if err = bcq.Select(bannercreative.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bcq *BannerCreativeQuery) IDsX(ctx context.Context) []int {
	ids, err := bcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bcq *BannerCreativeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bcq.ctx, ent.OpQueryCount)
	if err := bcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bcq, querierCount[*BannerCreativeQuery](), bcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bcq *BannerCreativeQuery) CountX(ctx context.Context) int {
	count, err := bcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bcq *BannerCreativeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bcq.ctx, ent.OpQueryExist)
	switch _, err := bcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bcq *BannerCreativeQuery) ExistX(ctx context.Context) bool {
	exist, err := bcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BannerCreativeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bcq *BannerCreativeQuery) Clone() *BannerCreativeQuery {
	if bcq == nil {
		return nil
	}
	return &BannerCreativeQuery{
		config:       bcq.config,
		ctx:          bcq.ctx.Clone(),
		order:        append([]bannercreative.OrderOption{}, bcq.order...),
		inters:       append([]Interceptor{}, bcq.inters...),
		predicates:   append([]predicate.BannerCreative{}, bcq.predicates...),
		withBanner:   bcq.withBanner.Clone(),
		withCreative: bcq.withCreative.Clone(),
		// clone intermediate query.
		sql:  bcq.sql.Clone(),
		path: bcq.path,
	}
}

// WithBanner tells the query-builder to eager-load the nodes that are connected to
// the "banner" edge. The optional arguments are used to configure the query builder of the edge.
func (bcq *BannerCreativeQuery) WithBanner(opts ...func(*BannerQuery)) *BannerCreativeQuery {
	query := (&BannerClient{config: bcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bcq.withBanner = query
	return bcq
}

// WithCreative tells the query-builder to eager-load the nodes that are connected to
// the "creative" edge. The optional arguments are used to configure the query builder of the edge.
func (bcq *BannerCreativeQuery) WithCreative(opts ...func(*CreativeQuery)) *BannerCreativeQuery {
	query := (&CreativeClient{config: bcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bcq.withCreative = query
	return bcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		BannerID int64 `json:"banner_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BannerCreative.Query().
//		GroupBy(bannercreative.FieldBannerID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bcq *BannerCreativeQuery) GroupBy(field string, fields ...string) *BannerCreativeGroupBy {
	bcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BannerCreativeGroupBy{build: bcq}
	grbuild.flds = &bcq.ctx.Fields
	grbuild.label = bannercreative.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		BannerID int64 `json:"banner_id,omitempty"`
//	}
//
//	client.BannerCreative.Query().
//		Select(bannercreative.FieldBannerID).
//		Scan(ctx, &v)
func (bcq *BannerCreativeQuery) Select(fields ...string) *BannerCreativeSelect {
	bcq.ctx.Fields = append(bcq.ctx.Fields, fields...)
	sbuild := &BannerCreativeSelect{BannerCreativeQuery: bcq}
	sbuild.label = bannercreative.Label
	sbuild.flds, sbuild.scan = &bcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BannerCreativeSelect configured with the given aggregations.
func (bcq *BannerCreativeQuery) Aggregate(fns ...AggregateFunc) *BannerCreativeSelect {
	return bcq.Select().Aggregate(fns...)
}

func (bcq *BannerCreativeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bcq); err != nil {
				return err
			}
		}
	}
	for _, f := range bcq.ctx.Fields {
		if !bannercreative.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bcq.path != nil {
		prev, err := bcq.path(ctx)
		if err != nil {
			return err
		}
		bcq.sql = prev
	}
	return nil
}

func (bcq *BannerCreativeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BannerCreative, error) {
	var (
		nodes       = []*BannerCreative{}
		_spec       = bcq.querySpec()
		loadedTypes = [2]bool{
			bcq.withBanner != nil,
			bcq.withCreative != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BannerCreative).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BannerCreative{config: bcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bcq.withBanner; query != nil {
		if err := bcq.loadBanner(ctx, query, nodes, nil,
			func(n *BannerCreative, e *Banner) { n.Edges.Banner = e }); err != nil {
			return nil, err
		}
	}
	if query := bcq.withCreative; query != nil {
		if err := bcq.loadCreative(ctx, query, nodes, nil,
			func(n *BannerCreative, e *Creative) { n.Edges.Creative = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bcq *BannerCreativeQuery) loadBanner(ctx context.Context, query *BannerQuery, nodes []*BannerCreative, init func(*BannerCreative), assign func(*BannerCreative, *Banner)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*BannerCreative)
	for i := range nodes {
		fk := nodes[i].BannerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(banner.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "banner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bcq *BannerCreativeQuery) loadCreative(ctx context.Context, query *CreativeQuery, nodes []*BannerCreative, init func(*BannerCreative), assign func(*BannerCreative, *Creative)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*BannerCreative)
	for i := range nodes {
		fk := nodes[i].CreativeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(creative.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creative_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (bcq *BannerCreativeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bcq.querySpec()
	_spec.Node.Columns = bcq.ctx.Fields
	if len(bcq.ctx.Fields) > 0 {
		_spec.Unique = bcq.ctx.Unique != nil && *bcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bcq.driver, _spec)
}

func (bcq *BannerCreativeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(bannercreative.Table, bannercreative.Columns, sqlgraph.NewFieldSpec(bannercreative.FieldID, field.TypeInt))
	_spec.From = bcq.sql
	if unique := bcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bcq.path != nil {
		_spec.Unique = true
	}
	if fields := bcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bannercreative.FieldID)
		for i := range fields {
			if fields[i] != bannercreative.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if bcq.withBanner != nil {
			_spec.Node.AddColumnOnce(bannercreative.FieldBannerID)
		}
		if bcq.withCreative != nil {
			_spec.Node.AddColumnOnce(bannercreative.FieldCreativeID)
		}
	}
	if ps := bcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bcq *BannerCreativeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bcq.driver.Dialect())
	t1 := builder.Table(bannercreative.Table)
	columns := bcq.ctx.Fields
	if len(columns) == 0 {
		columns = bannercreative.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bcq.sql != nil {
		selector = bcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bcq.ctx.Unique != nil && *bcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range bcq.predicates {
		p(selector)
	}
	for _, p := range bcq.order {
		p(selector)
	}
	if offset := bcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BannerCreativeGroupBy is the group-by builder for BannerCreative entities.
type BannerCreativeGroupBy struct {
	selector
	build *BannerCreativeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bcgb *BannerCreativeGroupBy) Aggregate(fns ...AggregateFunc) *BannerCreativeGroupBy {
	bcgb.fns = append(bcgb.fns, fns...)
	return bcgb
}

// Scan applies the selector query and scans the result into the given value.
func (bcgb *BannerCreativeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bcgb.build.ctx, ent.OpQueryGroupBy)
	if err := bcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BannerCreativeQuery, *BannerCreativeGroupBy](ctx, bcgb.build, bcgb, bcgb.build.inters, v)
}

func (bcgb *BannerCreativeGroupBy) sqlScan(ctx context.Context, root *BannerCreativeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bcgb.fns))
	for _, fn := range bcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bcgb.flds)+len(bcgb.fns))
		for _, f := range *bcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BannerCreativeSelect is the builder for selecting fields of BannerCreative entities.
type BannerCreativeSelect struct {
	*BannerCreativeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bcs *BannerCreativeSelect) Aggregate(fns ...AggregateFunc) *BannerCreativeSelect {
	bcs.fns = append(bcs.fns, fns...)
	return bcs
}

// Scan applies the selector query and scans the result into the given value.
func (bcs *BannerCreativeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bcs.ctx, ent.OpQuerySelect)
	if err := bcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BannerCreativeQuery, *BannerCreativeSelect](ctx, bcs.BannerCreativeQuery, bcs, bcs.inters, v)
}

func (bcs *BannerCreativeSelect) sqlScan(ctx context.Context, root *BannerCreativeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bcs.fns))
	for _, fn := range bcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
