// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/earninghistory"
	"affluo/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EarningHistory is the model entity for the EarningHistory schema.
type EarningHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// lead,account_create,click,impression
	EventType string `json:"event_type,omitempty"`
	// banner,gigs
	Source string `json:"source,omitempty"`
	// TrackID holds the value of the "track_id" field.
	TrackID string `json:"track_id,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EarningHistoryQuery when eager-loading is set.
	Edges                  EarningHistoryEdges `json:"edges"`
	user_earning_histories *int64
	selectValues           sql.SelectValues
}

// EarningHistoryEdges holds the relations/edges for other nodes in the graph.
type EarningHistoryEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EarningHistoryEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EarningHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case earninghistory.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case earninghistory.FieldID:
			values[i] = new(sql.NullInt64)
		case earninghistory.FieldEventType, earninghistory.FieldSource, earninghistory.FieldTrackID, earninghistory.FieldDate:
			values[i] = new(sql.NullString)
		case earninghistory.ForeignKeys[0]: // user_earning_histories
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EarningHistory fields.
func (eh *EarningHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case earninghistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eh.ID = int64(value.Int64)
		case earninghistory.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				eh.Amount = value.Float64
			}
		case earninghistory.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				eh.EventType = value.String
			}
		case earninghistory.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				eh.Source = value.String
			}
		case earninghistory.FieldTrackID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field track_id", values[i])
			} else if value.Valid {
				eh.TrackID = value.String
			}
		case earninghistory.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				eh.Date = value.String
			}
		case earninghistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_earning_histories", value)
			} else if value.Valid {
				eh.user_earning_histories = new(int64)
				*eh.user_earning_histories = int64(value.Int64)
			}
		default:
			eh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EarningHistory.
// This includes values selected through modifiers, order, etc.
func (eh *EarningHistory) Value(name string) (ent.Value, error) {
	return eh.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the EarningHistory entity.
func (eh *EarningHistory) QueryUser() *UserQuery {
	return NewEarningHistoryClient(eh.config).QueryUser(eh)
}

// Update returns a builder for updating this EarningHistory.
// Note that you need to call EarningHistory.Unwrap() before calling this method if this EarningHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (eh *EarningHistory) Update() *EarningHistoryUpdateOne {
	return NewEarningHistoryClient(eh.config).UpdateOne(eh)
}

// Unwrap unwraps the EarningHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eh *EarningHistory) Unwrap() *EarningHistory {
	_tx, ok := eh.config.driver.(*txDriver)
	if !ok {
		panic("ent: EarningHistory is not a transactional entity")
	}
	eh.config.driver = _tx.drv
	return eh
}

// String implements the fmt.Stringer.
func (eh *EarningHistory) String() string {
	var builder strings.Builder
	builder.WriteString("EarningHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eh.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", eh.Amount))
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(eh.EventType)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(eh.Source)
	builder.WriteString(", ")
	builder.WriteString("track_id=")
	builder.WriteString(eh.TrackID)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(eh.Date)
	builder.WriteByte(')')
	return builder.String()
}

// EarningHistories is a parsable slice of EarningHistory.
type EarningHistories []*EarningHistory
