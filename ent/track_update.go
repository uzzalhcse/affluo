// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/campaign"
	"affluo/ent/campaignlink"
	"affluo/ent/predicate"
	"affluo/ent/track"
	"affluo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrackUpdate is the builder for updating Track entities.
type TrackUpdate struct {
	config
	hooks    []Hook
	mutation *TrackMutation
}

// Where appends a list predicates to the TrackUpdate builder.
func (tu *TrackUpdate) Where(ps ...predicate.Track) *TrackUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetIPAddress sets the "ip_address" field.
func (tu *TrackUpdate) SetIPAddress(s string) *TrackUpdate {
	tu.mutation.SetIPAddress(s)
	return tu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableIPAddress(s *string) *TrackUpdate {
	if s != nil {
		tu.SetIPAddress(*s)
	}
	return tu
}

// SetUserAgent sets the "user_agent" field.
func (tu *TrackUpdate) SetUserAgent(s string) *TrackUpdate {
	tu.mutation.SetUserAgent(s)
	return tu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableUserAgent(s *string) *TrackUpdate {
	if s != nil {
		tu.SetUserAgent(*s)
	}
	return tu
}

// SetDeviceFingerprint sets the "device_fingerprint" field.
func (tu *TrackUpdate) SetDeviceFingerprint(s string) *TrackUpdate {
	tu.mutation.SetDeviceFingerprint(s)
	return tu
}

// SetNillableDeviceFingerprint sets the "device_fingerprint" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableDeviceFingerprint(s *string) *TrackUpdate {
	if s != nil {
		tu.SetDeviceFingerprint(*s)
	}
	return tu
}

// SetReferrer sets the "referrer" field.
func (tu *TrackUpdate) SetReferrer(s string) *TrackUpdate {
	tu.mutation.SetReferrer(s)
	return tu
}

// SetNillableReferrer sets the "referrer" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableReferrer(s *string) *TrackUpdate {
	if s != nil {
		tu.SetReferrer(*s)
	}
	return tu
}

// ClearReferrer clears the value of the "referrer" field.
func (tu *TrackUpdate) ClearReferrer() *TrackUpdate {
	tu.mutation.ClearReferrer()
	return tu
}

// SetType sets the "type" field.
func (tu *TrackUpdate) SetType(t track.Type) *TrackUpdate {
	tu.mutation.SetType(t)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableType(t *track.Type) *TrackUpdate {
	if t != nil {
		tu.SetType(*t)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TrackUpdate) SetStatus(t track.Status) *TrackUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableStatus(t *track.Status) *TrackUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TrackUpdate) SetCreatedAt(t time.Time) *TrackUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableCreatedAt(t *time.Time) *TrackUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetIsUniqueClick sets the "is_unique_click" field.
func (tu *TrackUpdate) SetIsUniqueClick(b bool) *TrackUpdate {
	tu.mutation.SetIsUniqueClick(b)
	return tu
}

// SetNillableIsUniqueClick sets the "is_unique_click" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableIsUniqueClick(b *bool) *TrackUpdate {
	if b != nil {
		tu.SetIsUniqueClick(*b)
	}
	return tu
}

// SetAdditionalMetadata sets the "additional_metadata" field.
func (tu *TrackUpdate) SetAdditionalMetadata(m map[string]interface{}) *TrackUpdate {
	tu.mutation.SetAdditionalMetadata(m)
	return tu
}

// ClearAdditionalMetadata clears the value of the "additional_metadata" field.
func (tu *TrackUpdate) ClearAdditionalMetadata() *TrackUpdate {
	tu.mutation.ClearAdditionalMetadata()
	return tu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (tu *TrackUpdate) SetUserID(id int64) *TrackUpdate {
	tu.mutation.SetUserID(id)
	return tu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (tu *TrackUpdate) SetNillableUserID(id *int64) *TrackUpdate {
	if id != nil {
		tu = tu.SetUserID(*id)
	}
	return tu
}

// SetUser sets the "user" edge to the User entity.
func (tu *TrackUpdate) SetUser(u *User) *TrackUpdate {
	return tu.SetUserID(u.ID)
}

// SetCampaignID sets the "campaign" edge to the Campaign entity by ID.
func (tu *TrackUpdate) SetCampaignID(id int64) *TrackUpdate {
	tu.mutation.SetCampaignID(id)
	return tu
}

// SetNillableCampaignID sets the "campaign" edge to the Campaign entity by ID if the given value is not nil.
func (tu *TrackUpdate) SetNillableCampaignID(id *int64) *TrackUpdate {
	if id != nil {
		tu = tu.SetCampaignID(*id)
	}
	return tu
}

// SetCampaign sets the "campaign" edge to the Campaign entity.
func (tu *TrackUpdate) SetCampaign(c *Campaign) *TrackUpdate {
	return tu.SetCampaignID(c.ID)
}

// SetLinkID sets the "link" edge to the CampaignLink entity by ID.
func (tu *TrackUpdate) SetLinkID(id int64) *TrackUpdate {
	tu.mutation.SetLinkID(id)
	return tu
}

// SetNillableLinkID sets the "link" edge to the CampaignLink entity by ID if the given value is not nil.
func (tu *TrackUpdate) SetNillableLinkID(id *int64) *TrackUpdate {
	if id != nil {
		tu = tu.SetLinkID(*id)
	}
	return tu
}

// SetLink sets the "link" edge to the CampaignLink entity.
func (tu *TrackUpdate) SetLink(c *CampaignLink) *TrackUpdate {
	return tu.SetLinkID(c.ID)
}

// Mutation returns the TrackMutation object of the builder.
func (tu *TrackUpdate) Mutation() *TrackMutation {
	return tu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tu *TrackUpdate) ClearUser() *TrackUpdate {
	tu.mutation.ClearUser()
	return tu
}

// ClearCampaign clears the "campaign" edge to the Campaign entity.
func (tu *TrackUpdate) ClearCampaign() *TrackUpdate {
	tu.mutation.ClearCampaign()
	return tu
}

// ClearLink clears the "link" edge to the CampaignLink entity.
func (tu *TrackUpdate) ClearLink() *TrackUpdate {
	tu.mutation.ClearLink()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TrackUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TrackUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TrackUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TrackUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TrackUpdate) check() error {
	if v, ok := tu.mutation.GetType(); ok {
		if err := track.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Track.type": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := track.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Track.status": %w`, err)}
		}
	}
	return nil
}

func (tu *TrackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(track.Table, track.Columns, sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.IPAddress(); ok {
		_spec.SetField(track.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := tu.mutation.UserAgent(); ok {
		_spec.SetField(track.FieldUserAgent, field.TypeString, value)
	}
	if value, ok := tu.mutation.DeviceFingerprint(); ok {
		_spec.SetField(track.FieldDeviceFingerprint, field.TypeString, value)
	}
	if value, ok := tu.mutation.Referrer(); ok {
		_spec.SetField(track.FieldReferrer, field.TypeString, value)
	}
	if tu.mutation.ReferrerCleared() {
		_spec.ClearField(track.FieldReferrer, field.TypeString)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(track.FieldType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(track.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(track.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.IsUniqueClick(); ok {
		_spec.SetField(track.FieldIsUniqueClick, field.TypeBool, value)
	}
	if value, ok := tu.mutation.AdditionalMetadata(); ok {
		_spec.SetField(track.FieldAdditionalMetadata, field.TypeJSON, value)
	}
	if tu.mutation.AdditionalMetadataCleared() {
		_spec.ClearField(track.FieldAdditionalMetadata, field.TypeJSON)
	}
	if tu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.UserTable,
			Columns: []string{track.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.UserTable,
			Columns: []string{track.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.CampaignTable,
			Columns: []string{track.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.CampaignTable,
			Columns: []string{track.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.LinkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.LinkTable,
			Columns: []string{track.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignlink.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.LinkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.LinkTable,
			Columns: []string{track.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignlink.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{track.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TrackUpdateOne is the builder for updating a single Track entity.
type TrackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TrackMutation
}

// SetIPAddress sets the "ip_address" field.
func (tuo *TrackUpdateOne) SetIPAddress(s string) *TrackUpdateOne {
	tuo.mutation.SetIPAddress(s)
	return tuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableIPAddress(s *string) *TrackUpdateOne {
	if s != nil {
		tuo.SetIPAddress(*s)
	}
	return tuo
}

// SetUserAgent sets the "user_agent" field.
func (tuo *TrackUpdateOne) SetUserAgent(s string) *TrackUpdateOne {
	tuo.mutation.SetUserAgent(s)
	return tuo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableUserAgent(s *string) *TrackUpdateOne {
	if s != nil {
		tuo.SetUserAgent(*s)
	}
	return tuo
}

// SetDeviceFingerprint sets the "device_fingerprint" field.
func (tuo *TrackUpdateOne) SetDeviceFingerprint(s string) *TrackUpdateOne {
	tuo.mutation.SetDeviceFingerprint(s)
	return tuo
}

// SetNillableDeviceFingerprint sets the "device_fingerprint" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableDeviceFingerprint(s *string) *TrackUpdateOne {
	if s != nil {
		tuo.SetDeviceFingerprint(*s)
	}
	return tuo
}

// SetReferrer sets the "referrer" field.
func (tuo *TrackUpdateOne) SetReferrer(s string) *TrackUpdateOne {
	tuo.mutation.SetReferrer(s)
	return tuo
}

// SetNillableReferrer sets the "referrer" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableReferrer(s *string) *TrackUpdateOne {
	if s != nil {
		tuo.SetReferrer(*s)
	}
	return tuo
}

// ClearReferrer clears the value of the "referrer" field.
func (tuo *TrackUpdateOne) ClearReferrer() *TrackUpdateOne {
	tuo.mutation.ClearReferrer()
	return tuo
}

// SetType sets the "type" field.
func (tuo *TrackUpdateOne) SetType(t track.Type) *TrackUpdateOne {
	tuo.mutation.SetType(t)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableType(t *track.Type) *TrackUpdateOne {
	if t != nil {
		tuo.SetType(*t)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TrackUpdateOne) SetStatus(t track.Status) *TrackUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableStatus(t *track.Status) *TrackUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TrackUpdateOne) SetCreatedAt(t time.Time) *TrackUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableCreatedAt(t *time.Time) *TrackUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetIsUniqueClick sets the "is_unique_click" field.
func (tuo *TrackUpdateOne) SetIsUniqueClick(b bool) *TrackUpdateOne {
	tuo.mutation.SetIsUniqueClick(b)
	return tuo
}

// SetNillableIsUniqueClick sets the "is_unique_click" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableIsUniqueClick(b *bool) *TrackUpdateOne {
	if b != nil {
		tuo.SetIsUniqueClick(*b)
	}
	return tuo
}

// SetAdditionalMetadata sets the "additional_metadata" field.
func (tuo *TrackUpdateOne) SetAdditionalMetadata(m map[string]interface{}) *TrackUpdateOne {
	tuo.mutation.SetAdditionalMetadata(m)
	return tuo
}

// ClearAdditionalMetadata clears the value of the "additional_metadata" field.
func (tuo *TrackUpdateOne) ClearAdditionalMetadata() *TrackUpdateOne {
	tuo.mutation.ClearAdditionalMetadata()
	return tuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (tuo *TrackUpdateOne) SetUserID(id int64) *TrackUpdateOne {
	tuo.mutation.SetUserID(id)
	return tuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableUserID(id *int64) *TrackUpdateOne {
	if id != nil {
		tuo = tuo.SetUserID(*id)
	}
	return tuo
}

// SetUser sets the "user" edge to the User entity.
func (tuo *TrackUpdateOne) SetUser(u *User) *TrackUpdateOne {
	return tuo.SetUserID(u.ID)
}

// SetCampaignID sets the "campaign" edge to the Campaign entity by ID.
func (tuo *TrackUpdateOne) SetCampaignID(id int64) *TrackUpdateOne {
	tuo.mutation.SetCampaignID(id)
	return tuo
}

// SetNillableCampaignID sets the "campaign" edge to the Campaign entity by ID if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableCampaignID(id *int64) *TrackUpdateOne {
	if id != nil {
		tuo = tuo.SetCampaignID(*id)
	}
	return tuo
}

// SetCampaign sets the "campaign" edge to the Campaign entity.
func (tuo *TrackUpdateOne) SetCampaign(c *Campaign) *TrackUpdateOne {
	return tuo.SetCampaignID(c.ID)
}

// SetLinkID sets the "link" edge to the CampaignLink entity by ID.
func (tuo *TrackUpdateOne) SetLinkID(id int64) *TrackUpdateOne {
	tuo.mutation.SetLinkID(id)
	return tuo
}

// SetNillableLinkID sets the "link" edge to the CampaignLink entity by ID if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableLinkID(id *int64) *TrackUpdateOne {
	if id != nil {
		tuo = tuo.SetLinkID(*id)
	}
	return tuo
}

// SetLink sets the "link" edge to the CampaignLink entity.
func (tuo *TrackUpdateOne) SetLink(c *CampaignLink) *TrackUpdateOne {
	return tuo.SetLinkID(c.ID)
}

// Mutation returns the TrackMutation object of the builder.
func (tuo *TrackUpdateOne) Mutation() *TrackMutation {
	return tuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tuo *TrackUpdateOne) ClearUser() *TrackUpdateOne {
	tuo.mutation.ClearUser()
	return tuo
}

// ClearCampaign clears the "campaign" edge to the Campaign entity.
func (tuo *TrackUpdateOne) ClearCampaign() *TrackUpdateOne {
	tuo.mutation.ClearCampaign()
	return tuo
}

// ClearLink clears the "link" edge to the CampaignLink entity.
func (tuo *TrackUpdateOne) ClearLink() *TrackUpdateOne {
	tuo.mutation.ClearLink()
	return tuo
}

// Where appends a list predicates to the TrackUpdate builder.
func (tuo *TrackUpdateOne) Where(ps ...predicate.Track) *TrackUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TrackUpdateOne) Select(field string, fields ...string) *TrackUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Track entity.
func (tuo *TrackUpdateOne) Save(ctx context.Context) (*Track, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TrackUpdateOne) SaveX(ctx context.Context) *Track {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TrackUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TrackUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TrackUpdateOne) check() error {
	if v, ok := tuo.mutation.GetType(); ok {
		if err := track.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Track.type": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := track.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Track.status": %w`, err)}
		}
	}
	return nil
}

func (tuo *TrackUpdateOne) sqlSave(ctx context.Context) (_node *Track, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(track.Table, track.Columns, sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Track.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, track.FieldID)
		for _, f := range fields {
			if !track.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != track.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.IPAddress(); ok {
		_spec.SetField(track.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := tuo.mutation.UserAgent(); ok {
		_spec.SetField(track.FieldUserAgent, field.TypeString, value)
	}
	if value, ok := tuo.mutation.DeviceFingerprint(); ok {
		_spec.SetField(track.FieldDeviceFingerprint, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Referrer(); ok {
		_spec.SetField(track.FieldReferrer, field.TypeString, value)
	}
	if tuo.mutation.ReferrerCleared() {
		_spec.ClearField(track.FieldReferrer, field.TypeString)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(track.FieldType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(track.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(track.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.IsUniqueClick(); ok {
		_spec.SetField(track.FieldIsUniqueClick, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.AdditionalMetadata(); ok {
		_spec.SetField(track.FieldAdditionalMetadata, field.TypeJSON, value)
	}
	if tuo.mutation.AdditionalMetadataCleared() {
		_spec.ClearField(track.FieldAdditionalMetadata, field.TypeJSON)
	}
	if tuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.UserTable,
			Columns: []string{track.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.UserTable,
			Columns: []string{track.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.CampaignTable,
			Columns: []string{track.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.CampaignTable,
			Columns: []string{track.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.LinkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.LinkTable,
			Columns: []string{track.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignlink.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.LinkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.LinkTable,
			Columns: []string{track.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignlink.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Track{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{track.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
