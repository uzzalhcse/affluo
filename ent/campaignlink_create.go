// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/campaign"
	"affluo/ent/campaignlink"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CampaignLinkCreate is the builder for creating a CampaignLink entity.
type CampaignLinkCreate struct {
	config
	mutation *CampaignLinkMutation
	hooks    []Hook
}

// SetUniqueCode sets the "unique_code" field.
func (clc *CampaignLinkCreate) SetUniqueCode(s string) *CampaignLinkCreate {
	clc.mutation.SetUniqueCode(s)
	return clc
}

// SetOriginalURL sets the "original_url" field.
func (clc *CampaignLinkCreate) SetOriginalURL(s string) *CampaignLinkCreate {
	clc.mutation.SetOriginalURL(s)
	return clc
}

// SetTrackingURL sets the "tracking_url" field.
func (clc *CampaignLinkCreate) SetTrackingURL(s string) *CampaignLinkCreate {
	clc.mutation.SetTrackingURL(s)
	return clc
}

// SetCreatedAt sets the "created_at" field.
func (clc *CampaignLinkCreate) SetCreatedAt(t time.Time) *CampaignLinkCreate {
	clc.mutation.SetCreatedAt(t)
	return clc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clc *CampaignLinkCreate) SetNillableCreatedAt(t *time.Time) *CampaignLinkCreate {
	if t != nil {
		clc.SetCreatedAt(*t)
	}
	return clc
}

// SetIsActive sets the "is_active" field.
func (clc *CampaignLinkCreate) SetIsActive(b bool) *CampaignLinkCreate {
	clc.mutation.SetIsActive(b)
	return clc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (clc *CampaignLinkCreate) SetNillableIsActive(b *bool) *CampaignLinkCreate {
	if b != nil {
		clc.SetIsActive(*b)
	}
	return clc
}

// SetID sets the "id" field.
func (clc *CampaignLinkCreate) SetID(i int64) *CampaignLinkCreate {
	clc.mutation.SetID(i)
	return clc
}

// SetCampaignID sets the "campaign" edge to the Campaign entity by ID.
func (clc *CampaignLinkCreate) SetCampaignID(id int64) *CampaignLinkCreate {
	clc.mutation.SetCampaignID(id)
	return clc
}

// SetNillableCampaignID sets the "campaign" edge to the Campaign entity by ID if the given value is not nil.
func (clc *CampaignLinkCreate) SetNillableCampaignID(id *int64) *CampaignLinkCreate {
	if id != nil {
		clc = clc.SetCampaignID(*id)
	}
	return clc
}

// SetCampaign sets the "campaign" edge to the Campaign entity.
func (clc *CampaignLinkCreate) SetCampaign(c *Campaign) *CampaignLinkCreate {
	return clc.SetCampaignID(c.ID)
}

// Mutation returns the CampaignLinkMutation object of the builder.
func (clc *CampaignLinkCreate) Mutation() *CampaignLinkMutation {
	return clc.mutation
}

// Save creates the CampaignLink in the database.
func (clc *CampaignLinkCreate) Save(ctx context.Context) (*CampaignLink, error) {
	clc.defaults()
	return withHooks(ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *CampaignLinkCreate) SaveX(ctx context.Context) *CampaignLink {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *CampaignLinkCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *CampaignLinkCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clc *CampaignLinkCreate) defaults() {
	if _, ok := clc.mutation.CreatedAt(); !ok {
		v := campaignlink.DefaultCreatedAt()
		clc.mutation.SetCreatedAt(v)
	}
	if _, ok := clc.mutation.IsActive(); !ok {
		v := campaignlink.DefaultIsActive
		clc.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *CampaignLinkCreate) check() error {
	if _, ok := clc.mutation.UniqueCode(); !ok {
		return &ValidationError{Name: "unique_code", err: errors.New(`ent: missing required field "CampaignLink.unique_code"`)}
	}
	if _, ok := clc.mutation.OriginalURL(); !ok {
		return &ValidationError{Name: "original_url", err: errors.New(`ent: missing required field "CampaignLink.original_url"`)}
	}
	if _, ok := clc.mutation.TrackingURL(); !ok {
		return &ValidationError{Name: "tracking_url", err: errors.New(`ent: missing required field "CampaignLink.tracking_url"`)}
	}
	if _, ok := clc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CampaignLink.created_at"`)}
	}
	if _, ok := clc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "CampaignLink.is_active"`)}
	}
	if v, ok := clc.mutation.ID(); ok {
		if err := campaignlink.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "CampaignLink.id": %w`, err)}
		}
	}
	return nil
}

func (clc *CampaignLinkCreate) sqlSave(ctx context.Context) (*CampaignLink, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *CampaignLinkCreate) createSpec() (*CampaignLink, *sqlgraph.CreateSpec) {
	var (
		_node = &CampaignLink{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(campaignlink.Table, sqlgraph.NewFieldSpec(campaignlink.FieldID, field.TypeInt64))
	)
	if id, ok := clc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := clc.mutation.UniqueCode(); ok {
		_spec.SetField(campaignlink.FieldUniqueCode, field.TypeString, value)
		_node.UniqueCode = value
	}
	if value, ok := clc.mutation.OriginalURL(); ok {
		_spec.SetField(campaignlink.FieldOriginalURL, field.TypeString, value)
		_node.OriginalURL = value
	}
	if value, ok := clc.mutation.TrackingURL(); ok {
		_spec.SetField(campaignlink.FieldTrackingURL, field.TypeString, value)
		_node.TrackingURL = value
	}
	if value, ok := clc.mutation.CreatedAt(); ok {
		_spec.SetField(campaignlink.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := clc.mutation.IsActive(); ok {
		_spec.SetField(campaignlink.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if nodes := clc.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaignlink.CampaignTable,
			Columns: []string{campaignlink.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.campaign_links = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CampaignLinkCreateBulk is the builder for creating many CampaignLink entities in bulk.
type CampaignLinkCreateBulk struct {
	config
	err      error
	builders []*CampaignLinkCreate
}

// Save creates the CampaignLink entities in the database.
func (clcb *CampaignLinkCreateBulk) Save(ctx context.Context) ([]*CampaignLink, error) {
	if clcb.err != nil {
		return nil, clcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*CampaignLink, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CampaignLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *CampaignLinkCreateBulk) SaveX(ctx context.Context) []*CampaignLink {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *CampaignLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *CampaignLinkCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}
