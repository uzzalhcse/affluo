// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/gigtracking"
	"affluo/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GigTrackingDelete is the builder for deleting a GigTracking entity.
type GigTrackingDelete struct {
	config
	hooks    []Hook
	mutation *GigTrackingMutation
}

// Where appends a list predicates to the GigTrackingDelete builder.
func (gtd *GigTrackingDelete) Where(ps ...predicate.GigTracking) *GigTrackingDelete {
	gtd.mutation.Where(ps...)
	return gtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gtd *GigTrackingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gtd.sqlExec, gtd.mutation, gtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gtd *GigTrackingDelete) ExecX(ctx context.Context) int {
	n, err := gtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gtd *GigTrackingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(gigtracking.Table, sqlgraph.NewFieldSpec(gigtracking.FieldID, field.TypeInt64))
	if ps := gtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gtd.mutation.done = true
	return affected, err
}

// GigTrackingDeleteOne is the builder for deleting a single GigTracking entity.
type GigTrackingDeleteOne struct {
	gtd *GigTrackingDelete
}

// Where appends a list predicates to the GigTrackingDelete builder.
func (gtdo *GigTrackingDeleteOne) Where(ps ...predicate.GigTracking) *GigTrackingDeleteOne {
	gtdo.gtd.mutation.Where(ps...)
	return gtdo
}

// Exec executes the deletion query.
func (gtdo *GigTrackingDeleteOne) Exec(ctx context.Context) error {
	n, err := gtdo.gtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{gigtracking.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gtdo *GigTrackingDeleteOne) ExecX(ctx context.Context) {
	if err := gtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
