// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/banner"
	"affluo/ent/bannercreative"
	"affluo/ent/creative"
	"affluo/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BannerCreativeUpdate is the builder for updating BannerCreative entities.
type BannerCreativeUpdate struct {
	config
	hooks    []Hook
	mutation *BannerCreativeMutation
}

// Where appends a list predicates to the BannerCreativeUpdate builder.
func (bcu *BannerCreativeUpdate) Where(ps ...predicate.BannerCreative) *BannerCreativeUpdate {
	bcu.mutation.Where(ps...)
	return bcu
}

// SetBannerID sets the "banner_id" field.
func (bcu *BannerCreativeUpdate) SetBannerID(i int64) *BannerCreativeUpdate {
	bcu.mutation.SetBannerID(i)
	return bcu
}

// SetNillableBannerID sets the "banner_id" field if the given value is not nil.
func (bcu *BannerCreativeUpdate) SetNillableBannerID(i *int64) *BannerCreativeUpdate {
	if i != nil {
		bcu.SetBannerID(*i)
	}
	return bcu
}

// SetCreativeID sets the "creative_id" field.
func (bcu *BannerCreativeUpdate) SetCreativeID(i int64) *BannerCreativeUpdate {
	bcu.mutation.SetCreativeID(i)
	return bcu
}

// SetNillableCreativeID sets the "creative_id" field if the given value is not nil.
func (bcu *BannerCreativeUpdate) SetNillableCreativeID(i *int64) *BannerCreativeUpdate {
	if i != nil {
		bcu.SetCreativeID(*i)
	}
	return bcu
}

// SetUpdatedAt sets the "updated_at" field.
func (bcu *BannerCreativeUpdate) SetUpdatedAt(t time.Time) *BannerCreativeUpdate {
	bcu.mutation.SetUpdatedAt(t)
	return bcu
}

// SetIsPrimary sets the "is_primary" field.
func (bcu *BannerCreativeUpdate) SetIsPrimary(b bool) *BannerCreativeUpdate {
	bcu.mutation.SetIsPrimary(b)
	return bcu
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (bcu *BannerCreativeUpdate) SetNillableIsPrimary(b *bool) *BannerCreativeUpdate {
	if b != nil {
		bcu.SetIsPrimary(*b)
	}
	return bcu
}

// SetDisplayOrder sets the "display_order" field.
func (bcu *BannerCreativeUpdate) SetDisplayOrder(i int) *BannerCreativeUpdate {
	bcu.mutation.ResetDisplayOrder()
	bcu.mutation.SetDisplayOrder(i)
	return bcu
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (bcu *BannerCreativeUpdate) SetNillableDisplayOrder(i *int) *BannerCreativeUpdate {
	if i != nil {
		bcu.SetDisplayOrder(*i)
	}
	return bcu
}

// AddDisplayOrder adds i to the "display_order" field.
func (bcu *BannerCreativeUpdate) AddDisplayOrder(i int) *BannerCreativeUpdate {
	bcu.mutation.AddDisplayOrder(i)
	return bcu
}

// ClearDisplayOrder clears the value of the "display_order" field.
func (bcu *BannerCreativeUpdate) ClearDisplayOrder() *BannerCreativeUpdate {
	bcu.mutation.ClearDisplayOrder()
	return bcu
}

// SetBanner sets the "banner" edge to the Banner entity.
func (bcu *BannerCreativeUpdate) SetBanner(b *Banner) *BannerCreativeUpdate {
	return bcu.SetBannerID(b.ID)
}

// SetCreative sets the "creative" edge to the Creative entity.
func (bcu *BannerCreativeUpdate) SetCreative(c *Creative) *BannerCreativeUpdate {
	return bcu.SetCreativeID(c.ID)
}

// Mutation returns the BannerCreativeMutation object of the builder.
func (bcu *BannerCreativeUpdate) Mutation() *BannerCreativeMutation {
	return bcu.mutation
}

// ClearBanner clears the "banner" edge to the Banner entity.
func (bcu *BannerCreativeUpdate) ClearBanner() *BannerCreativeUpdate {
	bcu.mutation.ClearBanner()
	return bcu
}

// ClearCreative clears the "creative" edge to the Creative entity.
func (bcu *BannerCreativeUpdate) ClearCreative() *BannerCreativeUpdate {
	bcu.mutation.ClearCreative()
	return bcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bcu *BannerCreativeUpdate) Save(ctx context.Context) (int, error) {
	bcu.defaults()
	return withHooks(ctx, bcu.sqlSave, bcu.mutation, bcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcu *BannerCreativeUpdate) SaveX(ctx context.Context) int {
	affected, err := bcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bcu *BannerCreativeUpdate) Exec(ctx context.Context) error {
	_, err := bcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcu *BannerCreativeUpdate) ExecX(ctx context.Context) {
	if err := bcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcu *BannerCreativeUpdate) defaults() {
	if _, ok := bcu.mutation.UpdatedAt(); !ok {
		v := bannercreative.UpdateDefaultUpdatedAt()
		bcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcu *BannerCreativeUpdate) check() error {
	if bcu.mutation.BannerCleared() && len(bcu.mutation.BannerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BannerCreative.banner"`)
	}
	if bcu.mutation.CreativeCleared() && len(bcu.mutation.CreativeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BannerCreative.creative"`)
	}
	return nil
}

func (bcu *BannerCreativeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bannercreative.Table, bannercreative.Columns, sqlgraph.NewFieldSpec(bannercreative.FieldID, field.TypeInt))
	if ps := bcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcu.mutation.UpdatedAt(); ok {
		_spec.SetField(bannercreative.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bcu.mutation.IsPrimary(); ok {
		_spec.SetField(bannercreative.FieldIsPrimary, field.TypeBool, value)
	}
	if value, ok := bcu.mutation.DisplayOrder(); ok {
		_spec.SetField(bannercreative.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(bannercreative.FieldDisplayOrder, field.TypeInt, value)
	}
	if bcu.mutation.DisplayOrderCleared() {
		_spec.ClearField(bannercreative.FieldDisplayOrder, field.TypeInt)
	}
	if bcu.mutation.BannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bannercreative.BannerTable,
			Columns: []string{bannercreative.BannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.BannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bannercreative.BannerTable,
			Columns: []string{bannercreative.BannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bcu.mutation.CreativeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bannercreative.CreativeTable,
			Columns: []string{bannercreative.CreativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creative.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.CreativeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bannercreative.CreativeTable,
			Columns: []string{bannercreative.CreativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creative.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bannercreative.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bcu.mutation.done = true
	return n, nil
}

// BannerCreativeUpdateOne is the builder for updating a single BannerCreative entity.
type BannerCreativeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BannerCreativeMutation
}

// SetBannerID sets the "banner_id" field.
func (bcuo *BannerCreativeUpdateOne) SetBannerID(i int64) *BannerCreativeUpdateOne {
	bcuo.mutation.SetBannerID(i)
	return bcuo
}

// SetNillableBannerID sets the "banner_id" field if the given value is not nil.
func (bcuo *BannerCreativeUpdateOne) SetNillableBannerID(i *int64) *BannerCreativeUpdateOne {
	if i != nil {
		bcuo.SetBannerID(*i)
	}
	return bcuo
}

// SetCreativeID sets the "creative_id" field.
func (bcuo *BannerCreativeUpdateOne) SetCreativeID(i int64) *BannerCreativeUpdateOne {
	bcuo.mutation.SetCreativeID(i)
	return bcuo
}

// SetNillableCreativeID sets the "creative_id" field if the given value is not nil.
func (bcuo *BannerCreativeUpdateOne) SetNillableCreativeID(i *int64) *BannerCreativeUpdateOne {
	if i != nil {
		bcuo.SetCreativeID(*i)
	}
	return bcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bcuo *BannerCreativeUpdateOne) SetUpdatedAt(t time.Time) *BannerCreativeUpdateOne {
	bcuo.mutation.SetUpdatedAt(t)
	return bcuo
}

// SetIsPrimary sets the "is_primary" field.
func (bcuo *BannerCreativeUpdateOne) SetIsPrimary(b bool) *BannerCreativeUpdateOne {
	bcuo.mutation.SetIsPrimary(b)
	return bcuo
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (bcuo *BannerCreativeUpdateOne) SetNillableIsPrimary(b *bool) *BannerCreativeUpdateOne {
	if b != nil {
		bcuo.SetIsPrimary(*b)
	}
	return bcuo
}

// SetDisplayOrder sets the "display_order" field.
func (bcuo *BannerCreativeUpdateOne) SetDisplayOrder(i int) *BannerCreativeUpdateOne {
	bcuo.mutation.ResetDisplayOrder()
	bcuo.mutation.SetDisplayOrder(i)
	return bcuo
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (bcuo *BannerCreativeUpdateOne) SetNillableDisplayOrder(i *int) *BannerCreativeUpdateOne {
	if i != nil {
		bcuo.SetDisplayOrder(*i)
	}
	return bcuo
}

// AddDisplayOrder adds i to the "display_order" field.
func (bcuo *BannerCreativeUpdateOne) AddDisplayOrder(i int) *BannerCreativeUpdateOne {
	bcuo.mutation.AddDisplayOrder(i)
	return bcuo
}

// ClearDisplayOrder clears the value of the "display_order" field.
func (bcuo *BannerCreativeUpdateOne) ClearDisplayOrder() *BannerCreativeUpdateOne {
	bcuo.mutation.ClearDisplayOrder()
	return bcuo
}

// SetBanner sets the "banner" edge to the Banner entity.
func (bcuo *BannerCreativeUpdateOne) SetBanner(b *Banner) *BannerCreativeUpdateOne {
	return bcuo.SetBannerID(b.ID)
}

// SetCreative sets the "creative" edge to the Creative entity.
func (bcuo *BannerCreativeUpdateOne) SetCreative(c *Creative) *BannerCreativeUpdateOne {
	return bcuo.SetCreativeID(c.ID)
}

// Mutation returns the BannerCreativeMutation object of the builder.
func (bcuo *BannerCreativeUpdateOne) Mutation() *BannerCreativeMutation {
	return bcuo.mutation
}

// ClearBanner clears the "banner" edge to the Banner entity.
func (bcuo *BannerCreativeUpdateOne) ClearBanner() *BannerCreativeUpdateOne {
	bcuo.mutation.ClearBanner()
	return bcuo
}

// ClearCreative clears the "creative" edge to the Creative entity.
func (bcuo *BannerCreativeUpdateOne) ClearCreative() *BannerCreativeUpdateOne {
	bcuo.mutation.ClearCreative()
	return bcuo
}

// Where appends a list predicates to the BannerCreativeUpdate builder.
func (bcuo *BannerCreativeUpdateOne) Where(ps ...predicate.BannerCreative) *BannerCreativeUpdateOne {
	bcuo.mutation.Where(ps...)
	return bcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bcuo *BannerCreativeUpdateOne) Select(field string, fields ...string) *BannerCreativeUpdateOne {
	bcuo.fields = append([]string{field}, fields...)
	return bcuo
}

// Save executes the query and returns the updated BannerCreative entity.
func (bcuo *BannerCreativeUpdateOne) Save(ctx context.Context) (*BannerCreative, error) {
	bcuo.defaults()
	return withHooks(ctx, bcuo.sqlSave, bcuo.mutation, bcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcuo *BannerCreativeUpdateOne) SaveX(ctx context.Context) *BannerCreative {
	node, err := bcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bcuo *BannerCreativeUpdateOne) Exec(ctx context.Context) error {
	_, err := bcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcuo *BannerCreativeUpdateOne) ExecX(ctx context.Context) {
	if err := bcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcuo *BannerCreativeUpdateOne) defaults() {
	if _, ok := bcuo.mutation.UpdatedAt(); !ok {
		v := bannercreative.UpdateDefaultUpdatedAt()
		bcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcuo *BannerCreativeUpdateOne) check() error {
	if bcuo.mutation.BannerCleared() && len(bcuo.mutation.BannerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BannerCreative.banner"`)
	}
	if bcuo.mutation.CreativeCleared() && len(bcuo.mutation.CreativeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BannerCreative.creative"`)
	}
	return nil
}

func (bcuo *BannerCreativeUpdateOne) sqlSave(ctx context.Context) (_node *BannerCreative, err error) {
	if err := bcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bannercreative.Table, bannercreative.Columns, sqlgraph.NewFieldSpec(bannercreative.FieldID, field.TypeInt))
	id, ok := bcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BannerCreative.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bannercreative.FieldID)
		for _, f := range fields {
			if !bannercreative.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bannercreative.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(bannercreative.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bcuo.mutation.IsPrimary(); ok {
		_spec.SetField(bannercreative.FieldIsPrimary, field.TypeBool, value)
	}
	if value, ok := bcuo.mutation.DisplayOrder(); ok {
		_spec.SetField(bannercreative.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(bannercreative.FieldDisplayOrder, field.TypeInt, value)
	}
	if bcuo.mutation.DisplayOrderCleared() {
		_spec.ClearField(bannercreative.FieldDisplayOrder, field.TypeInt)
	}
	if bcuo.mutation.BannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bannercreative.BannerTable,
			Columns: []string{bannercreative.BannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.BannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bannercreative.BannerTable,
			Columns: []string{bannercreative.BannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bcuo.mutation.CreativeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bannercreative.CreativeTable,
			Columns: []string{bannercreative.CreativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creative.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.CreativeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bannercreative.CreativeTable,
			Columns: []string{bannercreative.CreativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creative.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BannerCreative{config: bcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bannercreative.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bcuo.mutation.done = true
	return _node, nil
}
