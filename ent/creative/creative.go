// Code generated by ent, DO NOT EDIT.

package creative

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the creative type in the database.
	Label = "creative"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeBanners holds the string denoting the banners edge name in mutations.
	EdgeBanners = "banners"
	// EdgeBannerCreatives holds the string denoting the banner_creatives edge name in mutations.
	EdgeBannerCreatives = "banner_creatives"
	// Table holds the table name of the creative in the database.
	Table = "creatives"
	// BannersTable is the table that holds the banners relation/edge. The primary key declared below.
	BannersTable = "banner_creatives"
	// BannersInverseTable is the table name for the Banner entity.
	// It exists in this package in order to avoid circular dependency with the "banner" package.
	BannersInverseTable = "banners"
	// BannerCreativesTable is the table that holds the banner_creatives relation/edge.
	BannerCreativesTable = "banner_creatives"
	// BannerCreativesInverseTable is the table name for the BannerCreative entity.
	// It exists in this package in order to avoid circular dependency with the "bannercreative" package.
	BannerCreativesInverseTable = "banner_creatives"
	// BannerCreativesColumn is the table column denoting the banner_creatives relation/edge.
	BannerCreativesColumn = "creative_id"
)

// Columns holds all SQL columns for creative fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldImageURL,
	FieldSize,
	FieldEnabled,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// BannersPrimaryKey and BannersColumn2 are the table columns denoting the
	// primary key for the banners relation (M2M).
	BannersPrimaryKey = []string{"banner_id", "creative_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// OrderOption defines the ordering options for the Creative queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByBannersCount orders the results by banners count.
func ByBannersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBannersStep(), opts...)
	}
}

// ByBanners orders the results by banners terms.
func ByBanners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBannersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBannerCreativesCount orders the results by banner_creatives count.
func ByBannerCreativesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBannerCreativesStep(), opts...)
	}
}

// ByBannerCreatives orders the results by banner_creatives terms.
func ByBannerCreatives(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBannerCreativesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBannersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BannersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, BannersTable, BannersPrimaryKey...),
	)
}
func newBannerCreativesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BannerCreativesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, BannerCreativesTable, BannerCreativesColumn),
	)
}
