// Code generated by ent, DO NOT EDIT.

package referral

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the referral type in the database.
	Label = "referral"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCommissionAmount holds the string denoting the commission_amount field in the database.
	FieldCommissionAmount = "commission_amount"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldProcessedAt holds the string denoting the processed_at field in the database.
	FieldProcessedAt = "processed_at"
	// EdgeReferrer holds the string denoting the referrer edge name in mutations.
	EdgeReferrer = "referrer"
	// EdgeCampaign holds the string denoting the campaign edge name in mutations.
	EdgeCampaign = "campaign"
	// Table holds the table name of the referral in the database.
	Table = "referrals"
	// ReferrerTable is the table that holds the referrer relation/edge.
	ReferrerTable = "referrals"
	// ReferrerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReferrerInverseTable = "users"
	// ReferrerColumn is the table column denoting the referrer relation/edge.
	ReferrerColumn = "user_referrals"
	// CampaignTable is the table that holds the campaign relation/edge.
	CampaignTable = "referrals"
	// CampaignInverseTable is the table name for the Campaign entity.
	// It exists in this package in order to avoid circular dependency with the "campaign" package.
	CampaignInverseTable = "campaigns"
	// CampaignColumn is the table column denoting the campaign relation/edge.
	CampaignColumn = "campaign_referrals"
)

// Columns holds all SQL columns for referral fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldCommissionAmount,
	FieldCreatedAt,
	FieldProcessedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "referrals"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"campaign_referrals",
	"user_referrals",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending  Status = "pending"
	StatusApproved Status = "approved"
	StatusRejected Status = "rejected"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusApproved, StatusRejected:
		return nil
	default:
		return fmt.Errorf("referral: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Referral queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCommissionAmount orders the results by the commission_amount field.
func ByCommissionAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommissionAmount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByProcessedAt orders the results by the processed_at field.
func ByProcessedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessedAt, opts...).ToFunc()
}

// ByReferrerField orders the results by referrer field.
func ByReferrerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReferrerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCampaignField orders the results by campaign field.
func ByCampaignField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCampaignStep(), sql.OrderByField(field, opts...))
	}
}
func newReferrerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReferrerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReferrerTable, ReferrerColumn),
	)
}
func newCampaignStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CampaignInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CampaignTable, CampaignColumn),
	)
}
