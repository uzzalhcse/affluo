// Code generated by ent, DO NOT EDIT.

package referral

import (
	"affluo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Referral {
	return predicate.Referral(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Referral {
	return predicate.Referral(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Referral {
	return predicate.Referral(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Referral {
	return predicate.Referral(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Referral {
	return predicate.Referral(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Referral {
	return predicate.Referral(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Referral {
	return predicate.Referral(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Referral {
	return predicate.Referral(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Referral {
	return predicate.Referral(sql.FieldLTE(FieldID, id))
}

// CommissionAmount applies equality check predicate on the "commission_amount" field. It's identical to CommissionAmountEQ.
func CommissionAmount(v float64) predicate.Referral {
	return predicate.Referral(sql.FieldEQ(FieldCommissionAmount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldEQ(FieldCreatedAt, v))
}

// ProcessedAt applies equality check predicate on the "processed_at" field. It's identical to ProcessedAtEQ.
func ProcessedAt(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldEQ(FieldProcessedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Referral {
	return predicate.Referral(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Referral {
	return predicate.Referral(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Referral {
	return predicate.Referral(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Referral {
	return predicate.Referral(sql.FieldNotIn(FieldStatus, vs...))
}

// CommissionAmountEQ applies the EQ predicate on the "commission_amount" field.
func CommissionAmountEQ(v float64) predicate.Referral {
	return predicate.Referral(sql.FieldEQ(FieldCommissionAmount, v))
}

// CommissionAmountNEQ applies the NEQ predicate on the "commission_amount" field.
func CommissionAmountNEQ(v float64) predicate.Referral {
	return predicate.Referral(sql.FieldNEQ(FieldCommissionAmount, v))
}

// CommissionAmountIn applies the In predicate on the "commission_amount" field.
func CommissionAmountIn(vs ...float64) predicate.Referral {
	return predicate.Referral(sql.FieldIn(FieldCommissionAmount, vs...))
}

// CommissionAmountNotIn applies the NotIn predicate on the "commission_amount" field.
func CommissionAmountNotIn(vs ...float64) predicate.Referral {
	return predicate.Referral(sql.FieldNotIn(FieldCommissionAmount, vs...))
}

// CommissionAmountGT applies the GT predicate on the "commission_amount" field.
func CommissionAmountGT(v float64) predicate.Referral {
	return predicate.Referral(sql.FieldGT(FieldCommissionAmount, v))
}

// CommissionAmountGTE applies the GTE predicate on the "commission_amount" field.
func CommissionAmountGTE(v float64) predicate.Referral {
	return predicate.Referral(sql.FieldGTE(FieldCommissionAmount, v))
}

// CommissionAmountLT applies the LT predicate on the "commission_amount" field.
func CommissionAmountLT(v float64) predicate.Referral {
	return predicate.Referral(sql.FieldLT(FieldCommissionAmount, v))
}

// CommissionAmountLTE applies the LTE predicate on the "commission_amount" field.
func CommissionAmountLTE(v float64) predicate.Referral {
	return predicate.Referral(sql.FieldLTE(FieldCommissionAmount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldLTE(FieldCreatedAt, v))
}

// ProcessedAtEQ applies the EQ predicate on the "processed_at" field.
func ProcessedAtEQ(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldEQ(FieldProcessedAt, v))
}

// ProcessedAtNEQ applies the NEQ predicate on the "processed_at" field.
func ProcessedAtNEQ(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldNEQ(FieldProcessedAt, v))
}

// ProcessedAtIn applies the In predicate on the "processed_at" field.
func ProcessedAtIn(vs ...time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldIn(FieldProcessedAt, vs...))
}

// ProcessedAtNotIn applies the NotIn predicate on the "processed_at" field.
func ProcessedAtNotIn(vs ...time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldNotIn(FieldProcessedAt, vs...))
}

// ProcessedAtGT applies the GT predicate on the "processed_at" field.
func ProcessedAtGT(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldGT(FieldProcessedAt, v))
}

// ProcessedAtGTE applies the GTE predicate on the "processed_at" field.
func ProcessedAtGTE(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldGTE(FieldProcessedAt, v))
}

// ProcessedAtLT applies the LT predicate on the "processed_at" field.
func ProcessedAtLT(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldLT(FieldProcessedAt, v))
}

// ProcessedAtLTE applies the LTE predicate on the "processed_at" field.
func ProcessedAtLTE(v time.Time) predicate.Referral {
	return predicate.Referral(sql.FieldLTE(FieldProcessedAt, v))
}

// ProcessedAtIsNil applies the IsNil predicate on the "processed_at" field.
func ProcessedAtIsNil() predicate.Referral {
	return predicate.Referral(sql.FieldIsNull(FieldProcessedAt))
}

// ProcessedAtNotNil applies the NotNil predicate on the "processed_at" field.
func ProcessedAtNotNil() predicate.Referral {
	return predicate.Referral(sql.FieldNotNull(FieldProcessedAt))
}

// HasReferrer applies the HasEdge predicate on the "referrer" edge.
func HasReferrer() predicate.Referral {
	return predicate.Referral(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReferrerTable, ReferrerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReferrerWith applies the HasEdge predicate on the "referrer" edge with a given conditions (other predicates).
func HasReferrerWith(preds ...predicate.User) predicate.Referral {
	return predicate.Referral(func(s *sql.Selector) {
		step := newReferrerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCampaign applies the HasEdge predicate on the "campaign" edge.
func HasCampaign() predicate.Referral {
	return predicate.Referral(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CampaignTable, CampaignColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCampaignWith applies the HasEdge predicate on the "campaign" edge with a given conditions (other predicates).
func HasCampaignWith(preds ...predicate.Campaign) predicate.Referral {
	return predicate.Referral(func(s *sql.Selector) {
		step := newCampaignStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Referral) predicate.Referral {
	return predicate.Referral(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Referral) predicate.Referral {
	return predicate.Referral(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Referral) predicate.Referral {
	return predicate.Referral(sql.NotPredicates(p))
}
