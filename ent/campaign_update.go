// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/campaign"
	"affluo/ent/campaignlink"
	"affluo/ent/predicate"
	"affluo/ent/referral"
	"affluo/ent/track"
	"affluo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CampaignUpdate is the builder for updating Campaign entities.
type CampaignUpdate struct {
	config
	hooks    []Hook
	mutation *CampaignMutation
}

// Where appends a list predicates to the CampaignUpdate builder.
func (cu *CampaignUpdate) Where(ps ...predicate.Campaign) *CampaignUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CampaignUpdate) SetName(s string) *CampaignUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableName(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *CampaignUpdate) SetDescription(s string) *CampaignUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableDescription(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CampaignUpdate) ClearDescription() *CampaignUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetType sets the "type" field.
func (cu *CampaignUpdate) SetType(c campaign.Type) *CampaignUpdate {
	cu.mutation.SetType(c)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableType(c *campaign.Type) *CampaignUpdate {
	if c != nil {
		cu.SetType(*c)
	}
	return cu
}

// SetPayoutRate sets the "payout_rate" field.
func (cu *CampaignUpdate) SetPayoutRate(f float64) *CampaignUpdate {
	cu.mutation.ResetPayoutRate()
	cu.mutation.SetPayoutRate(f)
	return cu
}

// SetNillablePayoutRate sets the "payout_rate" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillablePayoutRate(f *float64) *CampaignUpdate {
	if f != nil {
		cu.SetPayoutRate(*f)
	}
	return cu
}

// AddPayoutRate adds f to the "payout_rate" field.
func (cu *CampaignUpdate) AddPayoutRate(f float64) *CampaignUpdate {
	cu.mutation.AddPayoutRate(f)
	return cu
}

// SetStartDate sets the "start_date" field.
func (cu *CampaignUpdate) SetStartDate(t time.Time) *CampaignUpdate {
	cu.mutation.SetStartDate(t)
	return cu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableStartDate(t *time.Time) *CampaignUpdate {
	if t != nil {
		cu.SetStartDate(*t)
	}
	return cu
}

// SetEndDate sets the "end_date" field.
func (cu *CampaignUpdate) SetEndDate(t time.Time) *CampaignUpdate {
	cu.mutation.SetEndDate(t)
	return cu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableEndDate(t *time.Time) *CampaignUpdate {
	if t != nil {
		cu.SetEndDate(*t)
	}
	return cu
}

// ClearEndDate clears the value of the "end_date" field.
func (cu *CampaignUpdate) ClearEndDate() *CampaignUpdate {
	cu.mutation.ClearEndDate()
	return cu
}

// SetStatus sets the "status" field.
func (cu *CampaignUpdate) SetStatus(c campaign.Status) *CampaignUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableStatus(c *campaign.Status) *CampaignUpdate {
	if c != nil {
		cu.SetStatus(*c)
	}
	return cu
}

// SetTrackingURL sets the "tracking_url" field.
func (cu *CampaignUpdate) SetTrackingURL(s string) *CampaignUpdate {
	cu.mutation.SetTrackingURL(s)
	return cu
}

// SetNillableTrackingURL sets the "tracking_url" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableTrackingURL(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetTrackingURL(*s)
	}
	return cu
}

// SetUniqueCode sets the "unique_code" field.
func (cu *CampaignUpdate) SetUniqueCode(s string) *CampaignUpdate {
	cu.mutation.SetUniqueCode(s)
	return cu
}

// SetNillableUniqueCode sets the "unique_code" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableUniqueCode(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetUniqueCode(*s)
	}
	return cu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cu *CampaignUpdate) SetOwnerID(id int64) *CampaignUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cu *CampaignUpdate) SetNillableOwnerID(id *int64) *CampaignUpdate {
	if id != nil {
		cu = cu.SetOwnerID(*id)
	}
	return cu
}

// SetOwner sets the "owner" edge to the User entity.
func (cu *CampaignUpdate) SetOwner(u *User) *CampaignUpdate {
	return cu.SetOwnerID(u.ID)
}

// AddLinkIDs adds the "links" edge to the CampaignLink entity by IDs.
func (cu *CampaignUpdate) AddLinkIDs(ids ...int64) *CampaignUpdate {
	cu.mutation.AddLinkIDs(ids...)
	return cu
}

// AddLinks adds the "links" edges to the CampaignLink entity.
func (cu *CampaignUpdate) AddLinks(c ...*CampaignLink) *CampaignUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddLinkIDs(ids...)
}

// AddTrackIDs adds the "tracks" edge to the Track entity by IDs.
func (cu *CampaignUpdate) AddTrackIDs(ids ...int64) *CampaignUpdate {
	cu.mutation.AddTrackIDs(ids...)
	return cu
}

// AddTracks adds the "tracks" edges to the Track entity.
func (cu *CampaignUpdate) AddTracks(t ...*Track) *CampaignUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTrackIDs(ids...)
}

// AddReferralIDs adds the "referrals" edge to the Referral entity by IDs.
func (cu *CampaignUpdate) AddReferralIDs(ids ...int64) *CampaignUpdate {
	cu.mutation.AddReferralIDs(ids...)
	return cu
}

// AddReferrals adds the "referrals" edges to the Referral entity.
func (cu *CampaignUpdate) AddReferrals(r ...*Referral) *CampaignUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddReferralIDs(ids...)
}

// Mutation returns the CampaignMutation object of the builder.
func (cu *CampaignUpdate) Mutation() *CampaignMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cu *CampaignUpdate) ClearOwner() *CampaignUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// ClearLinks clears all "links" edges to the CampaignLink entity.
func (cu *CampaignUpdate) ClearLinks() *CampaignUpdate {
	cu.mutation.ClearLinks()
	return cu
}

// RemoveLinkIDs removes the "links" edge to CampaignLink entities by IDs.
func (cu *CampaignUpdate) RemoveLinkIDs(ids ...int64) *CampaignUpdate {
	cu.mutation.RemoveLinkIDs(ids...)
	return cu
}

// RemoveLinks removes "links" edges to CampaignLink entities.
func (cu *CampaignUpdate) RemoveLinks(c ...*CampaignLink) *CampaignUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveLinkIDs(ids...)
}

// ClearTracks clears all "tracks" edges to the Track entity.
func (cu *CampaignUpdate) ClearTracks() *CampaignUpdate {
	cu.mutation.ClearTracks()
	return cu
}

// RemoveTrackIDs removes the "tracks" edge to Track entities by IDs.
func (cu *CampaignUpdate) RemoveTrackIDs(ids ...int64) *CampaignUpdate {
	cu.mutation.RemoveTrackIDs(ids...)
	return cu
}

// RemoveTracks removes "tracks" edges to Track entities.
func (cu *CampaignUpdate) RemoveTracks(t ...*Track) *CampaignUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTrackIDs(ids...)
}

// ClearReferrals clears all "referrals" edges to the Referral entity.
func (cu *CampaignUpdate) ClearReferrals() *CampaignUpdate {
	cu.mutation.ClearReferrals()
	return cu
}

// RemoveReferralIDs removes the "referrals" edge to Referral entities by IDs.
func (cu *CampaignUpdate) RemoveReferralIDs(ids ...int64) *CampaignUpdate {
	cu.mutation.RemoveReferralIDs(ids...)
	return cu
}

// RemoveReferrals removes "referrals" edges to Referral entities.
func (cu *CampaignUpdate) RemoveReferrals(r ...*Referral) *CampaignUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveReferralIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CampaignUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CampaignUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CampaignUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CampaignUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CampaignUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := campaign.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Campaign.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.GetType(); ok {
		if err := campaign.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Campaign.type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Status(); ok {
		if err := campaign.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Campaign.status": %w`, err)}
		}
	}
	return nil
}

func (cu *CampaignUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(campaign.Table, campaign.Columns, sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(campaign.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(campaign.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(campaign.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(campaign.FieldType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.PayoutRate(); ok {
		_spec.SetField(campaign.FieldPayoutRate, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedPayoutRate(); ok {
		_spec.AddField(campaign.FieldPayoutRate, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.StartDate(); ok {
		_spec.SetField(campaign.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := cu.mutation.EndDate(); ok {
		_spec.SetField(campaign.FieldEndDate, field.TypeTime, value)
	}
	if cu.mutation.EndDateCleared() {
		_spec.ClearField(campaign.FieldEndDate, field.TypeTime)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(campaign.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.TrackingURL(); ok {
		_spec.SetField(campaign.FieldTrackingURL, field.TypeString, value)
	}
	if value, ok := cu.mutation.UniqueCode(); ok {
		_spec.SetField(campaign.FieldUniqueCode, field.TypeString, value)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaign.OwnerTable,
			Columns: []string{campaign.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaign.OwnerTable,
			Columns: []string{campaign.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.LinksTable,
			Columns: []string{campaign.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignlink.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedLinksIDs(); len(nodes) > 0 && !cu.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.LinksTable,
			Columns: []string{campaign.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignlink.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.LinksTable,
			Columns: []string{campaign.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignlink.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TracksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.TracksTable,
			Columns: []string{campaign.TracksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTracksIDs(); len(nodes) > 0 && !cu.mutation.TracksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.TracksTable,
			Columns: []string{campaign.TracksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TracksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.TracksTable,
			Columns: []string{campaign.TracksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ReferralsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.ReferralsTable,
			Columns: []string{campaign.ReferralsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referral.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedReferralsIDs(); len(nodes) > 0 && !cu.mutation.ReferralsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.ReferralsTable,
			Columns: []string{campaign.ReferralsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referral.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ReferralsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.ReferralsTable,
			Columns: []string{campaign.ReferralsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referral.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{campaign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CampaignUpdateOne is the builder for updating a single Campaign entity.
type CampaignUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CampaignMutation
}

// SetName sets the "name" field.
func (cuo *CampaignUpdateOne) SetName(s string) *CampaignUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableName(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CampaignUpdateOne) SetDescription(s string) *CampaignUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableDescription(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CampaignUpdateOne) ClearDescription() *CampaignUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetType sets the "type" field.
func (cuo *CampaignUpdateOne) SetType(c campaign.Type) *CampaignUpdateOne {
	cuo.mutation.SetType(c)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableType(c *campaign.Type) *CampaignUpdateOne {
	if c != nil {
		cuo.SetType(*c)
	}
	return cuo
}

// SetPayoutRate sets the "payout_rate" field.
func (cuo *CampaignUpdateOne) SetPayoutRate(f float64) *CampaignUpdateOne {
	cuo.mutation.ResetPayoutRate()
	cuo.mutation.SetPayoutRate(f)
	return cuo
}

// SetNillablePayoutRate sets the "payout_rate" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillablePayoutRate(f *float64) *CampaignUpdateOne {
	if f != nil {
		cuo.SetPayoutRate(*f)
	}
	return cuo
}

// AddPayoutRate adds f to the "payout_rate" field.
func (cuo *CampaignUpdateOne) AddPayoutRate(f float64) *CampaignUpdateOne {
	cuo.mutation.AddPayoutRate(f)
	return cuo
}

// SetStartDate sets the "start_date" field.
func (cuo *CampaignUpdateOne) SetStartDate(t time.Time) *CampaignUpdateOne {
	cuo.mutation.SetStartDate(t)
	return cuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableStartDate(t *time.Time) *CampaignUpdateOne {
	if t != nil {
		cuo.SetStartDate(*t)
	}
	return cuo
}

// SetEndDate sets the "end_date" field.
func (cuo *CampaignUpdateOne) SetEndDate(t time.Time) *CampaignUpdateOne {
	cuo.mutation.SetEndDate(t)
	return cuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableEndDate(t *time.Time) *CampaignUpdateOne {
	if t != nil {
		cuo.SetEndDate(*t)
	}
	return cuo
}

// ClearEndDate clears the value of the "end_date" field.
func (cuo *CampaignUpdateOne) ClearEndDate() *CampaignUpdateOne {
	cuo.mutation.ClearEndDate()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CampaignUpdateOne) SetStatus(c campaign.Status) *CampaignUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableStatus(c *campaign.Status) *CampaignUpdateOne {
	if c != nil {
		cuo.SetStatus(*c)
	}
	return cuo
}

// SetTrackingURL sets the "tracking_url" field.
func (cuo *CampaignUpdateOne) SetTrackingURL(s string) *CampaignUpdateOne {
	cuo.mutation.SetTrackingURL(s)
	return cuo
}

// SetNillableTrackingURL sets the "tracking_url" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableTrackingURL(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetTrackingURL(*s)
	}
	return cuo
}

// SetUniqueCode sets the "unique_code" field.
func (cuo *CampaignUpdateOne) SetUniqueCode(s string) *CampaignUpdateOne {
	cuo.mutation.SetUniqueCode(s)
	return cuo
}

// SetNillableUniqueCode sets the "unique_code" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableUniqueCode(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetUniqueCode(*s)
	}
	return cuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cuo *CampaignUpdateOne) SetOwnerID(id int64) *CampaignUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableOwnerID(id *int64) *CampaignUpdateOne {
	if id != nil {
		cuo = cuo.SetOwnerID(*id)
	}
	return cuo
}

// SetOwner sets the "owner" edge to the User entity.
func (cuo *CampaignUpdateOne) SetOwner(u *User) *CampaignUpdateOne {
	return cuo.SetOwnerID(u.ID)
}

// AddLinkIDs adds the "links" edge to the CampaignLink entity by IDs.
func (cuo *CampaignUpdateOne) AddLinkIDs(ids ...int64) *CampaignUpdateOne {
	cuo.mutation.AddLinkIDs(ids...)
	return cuo
}

// AddLinks adds the "links" edges to the CampaignLink entity.
func (cuo *CampaignUpdateOne) AddLinks(c ...*CampaignLink) *CampaignUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddLinkIDs(ids...)
}

// AddTrackIDs adds the "tracks" edge to the Track entity by IDs.
func (cuo *CampaignUpdateOne) AddTrackIDs(ids ...int64) *CampaignUpdateOne {
	cuo.mutation.AddTrackIDs(ids...)
	return cuo
}

// AddTracks adds the "tracks" edges to the Track entity.
func (cuo *CampaignUpdateOne) AddTracks(t ...*Track) *CampaignUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTrackIDs(ids...)
}

// AddReferralIDs adds the "referrals" edge to the Referral entity by IDs.
func (cuo *CampaignUpdateOne) AddReferralIDs(ids ...int64) *CampaignUpdateOne {
	cuo.mutation.AddReferralIDs(ids...)
	return cuo
}

// AddReferrals adds the "referrals" edges to the Referral entity.
func (cuo *CampaignUpdateOne) AddReferrals(r ...*Referral) *CampaignUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddReferralIDs(ids...)
}

// Mutation returns the CampaignMutation object of the builder.
func (cuo *CampaignUpdateOne) Mutation() *CampaignMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cuo *CampaignUpdateOne) ClearOwner() *CampaignUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// ClearLinks clears all "links" edges to the CampaignLink entity.
func (cuo *CampaignUpdateOne) ClearLinks() *CampaignUpdateOne {
	cuo.mutation.ClearLinks()
	return cuo
}

// RemoveLinkIDs removes the "links" edge to CampaignLink entities by IDs.
func (cuo *CampaignUpdateOne) RemoveLinkIDs(ids ...int64) *CampaignUpdateOne {
	cuo.mutation.RemoveLinkIDs(ids...)
	return cuo
}

// RemoveLinks removes "links" edges to CampaignLink entities.
func (cuo *CampaignUpdateOne) RemoveLinks(c ...*CampaignLink) *CampaignUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveLinkIDs(ids...)
}

// ClearTracks clears all "tracks" edges to the Track entity.
func (cuo *CampaignUpdateOne) ClearTracks() *CampaignUpdateOne {
	cuo.mutation.ClearTracks()
	return cuo
}

// RemoveTrackIDs removes the "tracks" edge to Track entities by IDs.
func (cuo *CampaignUpdateOne) RemoveTrackIDs(ids ...int64) *CampaignUpdateOne {
	cuo.mutation.RemoveTrackIDs(ids...)
	return cuo
}

// RemoveTracks removes "tracks" edges to Track entities.
func (cuo *CampaignUpdateOne) RemoveTracks(t ...*Track) *CampaignUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTrackIDs(ids...)
}

// ClearReferrals clears all "referrals" edges to the Referral entity.
func (cuo *CampaignUpdateOne) ClearReferrals() *CampaignUpdateOne {
	cuo.mutation.ClearReferrals()
	return cuo
}

// RemoveReferralIDs removes the "referrals" edge to Referral entities by IDs.
func (cuo *CampaignUpdateOne) RemoveReferralIDs(ids ...int64) *CampaignUpdateOne {
	cuo.mutation.RemoveReferralIDs(ids...)
	return cuo
}

// RemoveReferrals removes "referrals" edges to Referral entities.
func (cuo *CampaignUpdateOne) RemoveReferrals(r ...*Referral) *CampaignUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveReferralIDs(ids...)
}

// Where appends a list predicates to the CampaignUpdate builder.
func (cuo *CampaignUpdateOne) Where(ps ...predicate.Campaign) *CampaignUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CampaignUpdateOne) Select(field string, fields ...string) *CampaignUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Campaign entity.
func (cuo *CampaignUpdateOne) Save(ctx context.Context) (*Campaign, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CampaignUpdateOne) SaveX(ctx context.Context) *Campaign {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CampaignUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CampaignUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CampaignUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := campaign.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Campaign.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.GetType(); ok {
		if err := campaign.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Campaign.type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Status(); ok {
		if err := campaign.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Campaign.status": %w`, err)}
		}
	}
	return nil
}

func (cuo *CampaignUpdateOne) sqlSave(ctx context.Context) (_node *Campaign, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(campaign.Table, campaign.Columns, sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Campaign.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, campaign.FieldID)
		for _, f := range fields {
			if !campaign.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != campaign.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(campaign.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(campaign.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(campaign.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(campaign.FieldType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.PayoutRate(); ok {
		_spec.SetField(campaign.FieldPayoutRate, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedPayoutRate(); ok {
		_spec.AddField(campaign.FieldPayoutRate, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.StartDate(); ok {
		_spec.SetField(campaign.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.EndDate(); ok {
		_spec.SetField(campaign.FieldEndDate, field.TypeTime, value)
	}
	if cuo.mutation.EndDateCleared() {
		_spec.ClearField(campaign.FieldEndDate, field.TypeTime)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(campaign.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.TrackingURL(); ok {
		_spec.SetField(campaign.FieldTrackingURL, field.TypeString, value)
	}
	if value, ok := cuo.mutation.UniqueCode(); ok {
		_spec.SetField(campaign.FieldUniqueCode, field.TypeString, value)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaign.OwnerTable,
			Columns: []string{campaign.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   campaign.OwnerTable,
			Columns: []string{campaign.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.LinksTable,
			Columns: []string{campaign.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignlink.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedLinksIDs(); len(nodes) > 0 && !cuo.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.LinksTable,
			Columns: []string{campaign.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignlink.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.LinksTable,
			Columns: []string{campaign.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaignlink.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TracksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.TracksTable,
			Columns: []string{campaign.TracksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTracksIDs(); len(nodes) > 0 && !cuo.mutation.TracksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.TracksTable,
			Columns: []string{campaign.TracksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TracksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.TracksTable,
			Columns: []string{campaign.TracksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ReferralsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.ReferralsTable,
			Columns: []string{campaign.ReferralsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referral.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedReferralsIDs(); len(nodes) > 0 && !cuo.mutation.ReferralsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.ReferralsTable,
			Columns: []string{campaign.ReferralsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referral.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ReferralsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   campaign.ReferralsTable,
			Columns: []string{campaign.ReferralsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referral.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Campaign{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{campaign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
