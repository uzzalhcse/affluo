// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/affiliate"
	"affluo/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Affiliate is the model entity for the Affiliate schema.
type Affiliate struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// TrackingCode holds the value of the "tracking_code" field.
	TrackingCode string `json:"tracking_code,omitempty"`
	// AffiliateUserID holds the value of the "affiliate_user_id" field.
	AffiliateUserID string `json:"affiliate_user_id,omitempty"`
	// Source holds the value of the "source" field.
	Source affiliate.Source `json:"source,omitempty"`
	// RegistrationDate holds the value of the "registration_date" field.
	RegistrationDate time.Time `json:"registration_date,omitempty"`
	// FirstTransactionDate holds the value of the "first_transaction_date" field.
	FirstTransactionDate time.Time `json:"first_transaction_date,omitempty"`
	// Commission holds the value of the "commission" field.
	Commission float64 `json:"commission,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AffiliateQuery when eager-loading is set.
	Edges           AffiliateEdges `json:"edges"`
	user_affiliates *int64
	selectValues    sql.SelectValues
}

// AffiliateEdges holds the relations/edges for other nodes in the graph.
type AffiliateEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AffiliateEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Affiliate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case affiliate.FieldCommission:
			values[i] = new(sql.NullFloat64)
		case affiliate.FieldID:
			values[i] = new(sql.NullInt64)
		case affiliate.FieldTrackingCode, affiliate.FieldAffiliateUserID, affiliate.FieldSource:
			values[i] = new(sql.NullString)
		case affiliate.FieldRegistrationDate, affiliate.FieldFirstTransactionDate, affiliate.FieldDate:
			values[i] = new(sql.NullTime)
		case affiliate.ForeignKeys[0]: // user_affiliates
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Affiliate fields.
func (a *Affiliate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case affiliate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int64(value.Int64)
		case affiliate.FieldTrackingCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_code", values[i])
			} else if value.Valid {
				a.TrackingCode = value.String
			}
		case affiliate.FieldAffiliateUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field affiliate_user_id", values[i])
			} else if value.Valid {
				a.AffiliateUserID = value.String
			}
		case affiliate.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				a.Source = affiliate.Source(value.String)
			}
		case affiliate.FieldRegistrationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registration_date", values[i])
			} else if value.Valid {
				a.RegistrationDate = value.Time
			}
		case affiliate.FieldFirstTransactionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field first_transaction_date", values[i])
			} else if value.Valid {
				a.FirstTransactionDate = value.Time
			}
		case affiliate.FieldCommission:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field commission", values[i])
			} else if value.Valid {
				a.Commission = value.Float64
			}
		case affiliate.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				a.Date = value.Time
			}
		case affiliate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_affiliates", value)
			} else if value.Valid {
				a.user_affiliates = new(int64)
				*a.user_affiliates = int64(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Affiliate.
// This includes values selected through modifiers, order, etc.
func (a *Affiliate) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Affiliate entity.
func (a *Affiliate) QueryUser() *UserQuery {
	return NewAffiliateClient(a.config).QueryUser(a)
}

// Update returns a builder for updating this Affiliate.
// Note that you need to call Affiliate.Unwrap() before calling this method if this Affiliate
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Affiliate) Update() *AffiliateUpdateOne {
	return NewAffiliateClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Affiliate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Affiliate) Unwrap() *Affiliate {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Affiliate is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Affiliate) String() string {
	var builder strings.Builder
	builder.WriteString("Affiliate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("tracking_code=")
	builder.WriteString(a.TrackingCode)
	builder.WriteString(", ")
	builder.WriteString("affiliate_user_id=")
	builder.WriteString(a.AffiliateUserID)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", a.Source))
	builder.WriteString(", ")
	builder.WriteString("registration_date=")
	builder.WriteString(a.RegistrationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("first_transaction_date=")
	builder.WriteString(a.FirstTransactionDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("commission=")
	builder.WriteString(fmt.Sprintf("%v", a.Commission))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(a.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Affiliates is a parsable slice of Affiliate.
type Affiliates []*Affiliate
