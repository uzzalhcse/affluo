// Code generated by ent, DO NOT EDIT.

package earninghistory

import (
	"affluo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEQ(FieldAmount, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEQ(FieldEventType, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEQ(FieldSource, v))
}

// TrackID applies equality check predicate on the "track_id" field. It's identical to TrackIDEQ.
func TrackID(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEQ(FieldTrackID, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEQ(FieldDate, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldLTE(FieldAmount, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldContainsFold(FieldEventType, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldHasSuffix(FieldSource, v))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldContainsFold(FieldSource, v))
}

// TrackIDEQ applies the EQ predicate on the "track_id" field.
func TrackIDEQ(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEQ(FieldTrackID, v))
}

// TrackIDNEQ applies the NEQ predicate on the "track_id" field.
func TrackIDNEQ(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldNEQ(FieldTrackID, v))
}

// TrackIDIn applies the In predicate on the "track_id" field.
func TrackIDIn(vs ...string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldIn(FieldTrackID, vs...))
}

// TrackIDNotIn applies the NotIn predicate on the "track_id" field.
func TrackIDNotIn(vs ...string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldNotIn(FieldTrackID, vs...))
}

// TrackIDGT applies the GT predicate on the "track_id" field.
func TrackIDGT(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldGT(FieldTrackID, v))
}

// TrackIDGTE applies the GTE predicate on the "track_id" field.
func TrackIDGTE(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldGTE(FieldTrackID, v))
}

// TrackIDLT applies the LT predicate on the "track_id" field.
func TrackIDLT(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldLT(FieldTrackID, v))
}

// TrackIDLTE applies the LTE predicate on the "track_id" field.
func TrackIDLTE(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldLTE(FieldTrackID, v))
}

// TrackIDContains applies the Contains predicate on the "track_id" field.
func TrackIDContains(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldContains(FieldTrackID, v))
}

// TrackIDHasPrefix applies the HasPrefix predicate on the "track_id" field.
func TrackIDHasPrefix(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldHasPrefix(FieldTrackID, v))
}

// TrackIDHasSuffix applies the HasSuffix predicate on the "track_id" field.
func TrackIDHasSuffix(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldHasSuffix(FieldTrackID, v))
}

// TrackIDIsNil applies the IsNil predicate on the "track_id" field.
func TrackIDIsNil() predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldIsNull(FieldTrackID))
}

// TrackIDNotNil applies the NotNil predicate on the "track_id" field.
func TrackIDNotNil() predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldNotNull(FieldTrackID))
}

// TrackIDEqualFold applies the EqualFold predicate on the "track_id" field.
func TrackIDEqualFold(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEqualFold(FieldTrackID, v))
}

// TrackIDContainsFold applies the ContainsFold predicate on the "track_id" field.
func TrackIDContainsFold(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldContainsFold(FieldTrackID, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldLTE(FieldDate, v))
}

// DateContains applies the Contains predicate on the "date" field.
func DateContains(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldContains(FieldDate, v))
}

// DateHasPrefix applies the HasPrefix predicate on the "date" field.
func DateHasPrefix(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldHasPrefix(FieldDate, v))
}

// DateHasSuffix applies the HasSuffix predicate on the "date" field.
func DateHasSuffix(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldHasSuffix(FieldDate, v))
}

// DateEqualFold applies the EqualFold predicate on the "date" field.
func DateEqualFold(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldEqualFold(FieldDate, v))
}

// DateContainsFold applies the ContainsFold predicate on the "date" field.
func DateContainsFold(v string) predicate.EarningHistory {
	return predicate.EarningHistory(sql.FieldContainsFold(FieldDate, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.EarningHistory {
	return predicate.EarningHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.EarningHistory {
	return predicate.EarningHistory(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EarningHistory) predicate.EarningHistory {
	return predicate.EarningHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EarningHistory) predicate.EarningHistory {
	return predicate.EarningHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EarningHistory) predicate.EarningHistory {
	return predicate.EarningHistory(sql.NotPredicates(p))
}
