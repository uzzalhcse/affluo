// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/banner"
	"affluo/ent/lead"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Lead is the model entity for the Lead schema.
type Lead struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ReferenceID holds the value of the "reference_id" field.
	ReferenceID string `json:"reference_id,omitempty"`
	// Type holds the value of the "type" field.
	Type lead.Type `json:"type,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LeadQuery when eager-loading is set.
	Edges        LeadEdges `json:"edges"`
	banner_leads *int64
	selectValues sql.SelectValues
}

// LeadEdges holds the relations/edges for other nodes in the graph.
type LeadEdges struct {
	// Banner holds the value of the banner edge.
	Banner *Banner `json:"banner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BannerOrErr returns the Banner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LeadEdges) BannerOrErr() (*Banner, error) {
	if e.Banner != nil {
		return e.Banner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: banner.Label}
	}
	return nil, &NotLoadedError{edge: "banner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lead) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lead.FieldMetadata:
			values[i] = new([]byte)
		case lead.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case lead.FieldID:
			values[i] = new(sql.NullInt64)
		case lead.FieldReferenceID, lead.FieldType, lead.FieldCurrency, lead.FieldIPAddress, lead.FieldUserAgent:
			values[i] = new(sql.NullString)
		case lead.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case lead.ForeignKeys[0]: // banner_leads
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lead fields.
func (l *Lead) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lead.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int64(value.Int64)
		case lead.FieldReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_id", values[i])
			} else if value.Valid {
				l.ReferenceID = value.String
			}
		case lead.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				l.Type = lead.Type(value.String)
			}
		case lead.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				l.Amount = value.Float64
			}
		case lead.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				l.Currency = value.String
			}
		case lead.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				l.IPAddress = value.String
			}
		case lead.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				l.UserAgent = value.String
			}
		case lead.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &l.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case lead.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case lead.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field banner_leads", value)
			} else if value.Valid {
				l.banner_leads = new(int64)
				*l.banner_leads = int64(value.Int64)
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Lead.
// This includes values selected through modifiers, order, etc.
func (l *Lead) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryBanner queries the "banner" edge of the Lead entity.
func (l *Lead) QueryBanner() *BannerQuery {
	return NewLeadClient(l.config).QueryBanner(l)
}

// Update returns a builder for updating this Lead.
// Note that you need to call Lead.Unwrap() before calling this method if this Lead
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lead) Update() *LeadUpdateOne {
	return NewLeadClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Lead entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Lead) Unwrap() *Lead {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lead is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lead) String() string {
	var builder strings.Builder
	builder.WriteString("Lead(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("reference_id=")
	builder.WriteString(l.ReferenceID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", l.Type))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", l.Amount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(l.Currency)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(l.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(l.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", l.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Leads is a parsable slice of Lead.
type Leads []*Lead
