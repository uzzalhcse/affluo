// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/banner"
	"affluo/ent/bannerstats"
	"affluo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BannerStatsCreate is the builder for creating a BannerStats entity.
type BannerStatsCreate struct {
	config
	mutation *BannerStatsMutation
	hooks    []Hook
}

// SetDate sets the "date" field.
func (bsc *BannerStatsCreate) SetDate(t time.Time) *BannerStatsCreate {
	bsc.mutation.SetDate(t)
	return bsc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillableDate(t *time.Time) *BannerStatsCreate {
	if t != nil {
		bsc.SetDate(*t)
	}
	return bsc
}

// SetImpressions sets the "impressions" field.
func (bsc *BannerStatsCreate) SetImpressions(i int64) *BannerStatsCreate {
	bsc.mutation.SetImpressions(i)
	return bsc
}

// SetNillableImpressions sets the "impressions" field if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillableImpressions(i *int64) *BannerStatsCreate {
	if i != nil {
		bsc.SetImpressions(*i)
	}
	return bsc
}

// SetClicks sets the "clicks" field.
func (bsc *BannerStatsCreate) SetClicks(i int64) *BannerStatsCreate {
	bsc.mutation.SetClicks(i)
	return bsc
}

// SetNillableClicks sets the "clicks" field if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillableClicks(i *int64) *BannerStatsCreate {
	if i != nil {
		bsc.SetClicks(*i)
	}
	return bsc
}

// SetLeads sets the "leads" field.
func (bsc *BannerStatsCreate) SetLeads(i int64) *BannerStatsCreate {
	bsc.mutation.SetLeads(i)
	return bsc
}

// SetNillableLeads sets the "leads" field if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillableLeads(i *int64) *BannerStatsCreate {
	if i != nil {
		bsc.SetLeads(*i)
	}
	return bsc
}

// SetEarnings sets the "earnings" field.
func (bsc *BannerStatsCreate) SetEarnings(f float64) *BannerStatsCreate {
	bsc.mutation.SetEarnings(f)
	return bsc
}

// SetNillableEarnings sets the "earnings" field if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillableEarnings(f *float64) *BannerStatsCreate {
	if f != nil {
		bsc.SetEarnings(*f)
	}
	return bsc
}

// SetCtr sets the "ctr" field.
func (bsc *BannerStatsCreate) SetCtr(f float64) *BannerStatsCreate {
	bsc.mutation.SetCtr(f)
	return bsc
}

// SetNillableCtr sets the "ctr" field if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillableCtr(f *float64) *BannerStatsCreate {
	if f != nil {
		bsc.SetCtr(*f)
	}
	return bsc
}

// SetConversionRate sets the "conversion_rate" field.
func (bsc *BannerStatsCreate) SetConversionRate(f float64) *BannerStatsCreate {
	bsc.mutation.SetConversionRate(f)
	return bsc
}

// SetNillableConversionRate sets the "conversion_rate" field if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillableConversionRate(f *float64) *BannerStatsCreate {
	if f != nil {
		bsc.SetConversionRate(*f)
	}
	return bsc
}

// SetDeviceType sets the "device_type" field.
func (bsc *BannerStatsCreate) SetDeviceType(s string) *BannerStatsCreate {
	bsc.mutation.SetDeviceType(s)
	return bsc
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillableDeviceType(s *string) *BannerStatsCreate {
	if s != nil {
		bsc.SetDeviceType(*s)
	}
	return bsc
}

// SetBrowser sets the "browser" field.
func (bsc *BannerStatsCreate) SetBrowser(s string) *BannerStatsCreate {
	bsc.mutation.SetBrowser(s)
	return bsc
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillableBrowser(s *string) *BannerStatsCreate {
	if s != nil {
		bsc.SetBrowser(*s)
	}
	return bsc
}

// SetOs sets the "os" field.
func (bsc *BannerStatsCreate) SetOs(s string) *BannerStatsCreate {
	bsc.mutation.SetOs(s)
	return bsc
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillableOs(s *string) *BannerStatsCreate {
	if s != nil {
		bsc.SetOs(*s)
	}
	return bsc
}

// SetCreatedAt sets the "created_at" field.
func (bsc *BannerStatsCreate) SetCreatedAt(t time.Time) *BannerStatsCreate {
	bsc.mutation.SetCreatedAt(t)
	return bsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillableCreatedAt(t *time.Time) *BannerStatsCreate {
	if t != nil {
		bsc.SetCreatedAt(*t)
	}
	return bsc
}

// SetUpdatedAt sets the "updated_at" field.
func (bsc *BannerStatsCreate) SetUpdatedAt(t time.Time) *BannerStatsCreate {
	bsc.mutation.SetUpdatedAt(t)
	return bsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillableUpdatedAt(t *time.Time) *BannerStatsCreate {
	if t != nil {
		bsc.SetUpdatedAt(*t)
	}
	return bsc
}

// SetID sets the "id" field.
func (bsc *BannerStatsCreate) SetID(i int64) *BannerStatsCreate {
	bsc.mutation.SetID(i)
	return bsc
}

// SetBannerID sets the "banner" edge to the Banner entity by ID.
func (bsc *BannerStatsCreate) SetBannerID(id int64) *BannerStatsCreate {
	bsc.mutation.SetBannerID(id)
	return bsc
}

// SetNillableBannerID sets the "banner" edge to the Banner entity by ID if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillableBannerID(id *int64) *BannerStatsCreate {
	if id != nil {
		bsc = bsc.SetBannerID(*id)
	}
	return bsc
}

// SetBanner sets the "banner" edge to the Banner entity.
func (bsc *BannerStatsCreate) SetBanner(b *Banner) *BannerStatsCreate {
	return bsc.SetBannerID(b.ID)
}

// SetPublisherID sets the "publisher" edge to the User entity by ID.
func (bsc *BannerStatsCreate) SetPublisherID(id int64) *BannerStatsCreate {
	bsc.mutation.SetPublisherID(id)
	return bsc
}

// SetNillablePublisherID sets the "publisher" edge to the User entity by ID if the given value is not nil.
func (bsc *BannerStatsCreate) SetNillablePublisherID(id *int64) *BannerStatsCreate {
	if id != nil {
		bsc = bsc.SetPublisherID(*id)
	}
	return bsc
}

// SetPublisher sets the "publisher" edge to the User entity.
func (bsc *BannerStatsCreate) SetPublisher(u *User) *BannerStatsCreate {
	return bsc.SetPublisherID(u.ID)
}

// Mutation returns the BannerStatsMutation object of the builder.
func (bsc *BannerStatsCreate) Mutation() *BannerStatsMutation {
	return bsc.mutation
}

// Save creates the BannerStats in the database.
func (bsc *BannerStatsCreate) Save(ctx context.Context) (*BannerStats, error) {
	bsc.defaults()
	return withHooks(ctx, bsc.sqlSave, bsc.mutation, bsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bsc *BannerStatsCreate) SaveX(ctx context.Context) *BannerStats {
	v, err := bsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bsc *BannerStatsCreate) Exec(ctx context.Context) error {
	_, err := bsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsc *BannerStatsCreate) ExecX(ctx context.Context) {
	if err := bsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsc *BannerStatsCreate) defaults() {
	if _, ok := bsc.mutation.Date(); !ok {
		v := bannerstats.DefaultDate()
		bsc.mutation.SetDate(v)
	}
	if _, ok := bsc.mutation.Impressions(); !ok {
		v := bannerstats.DefaultImpressions
		bsc.mutation.SetImpressions(v)
	}
	if _, ok := bsc.mutation.Clicks(); !ok {
		v := bannerstats.DefaultClicks
		bsc.mutation.SetClicks(v)
	}
	if _, ok := bsc.mutation.Leads(); !ok {
		v := bannerstats.DefaultLeads
		bsc.mutation.SetLeads(v)
	}
	if _, ok := bsc.mutation.Earnings(); !ok {
		v := bannerstats.DefaultEarnings
		bsc.mutation.SetEarnings(v)
	}
	if _, ok := bsc.mutation.CreatedAt(); !ok {
		v := bannerstats.DefaultCreatedAt()
		bsc.mutation.SetCreatedAt(v)
	}
	if _, ok := bsc.mutation.UpdatedAt(); !ok {
		v := bannerstats.DefaultUpdatedAt()
		bsc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsc *BannerStatsCreate) check() error {
	if _, ok := bsc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "BannerStats.date"`)}
	}
	if _, ok := bsc.mutation.Impressions(); !ok {
		return &ValidationError{Name: "impressions", err: errors.New(`ent: missing required field "BannerStats.impressions"`)}
	}
	if _, ok := bsc.mutation.Clicks(); !ok {
		return &ValidationError{Name: "clicks", err: errors.New(`ent: missing required field "BannerStats.clicks"`)}
	}
	if _, ok := bsc.mutation.Leads(); !ok {
		return &ValidationError{Name: "leads", err: errors.New(`ent: missing required field "BannerStats.leads"`)}
	}
	if _, ok := bsc.mutation.Earnings(); !ok {
		return &ValidationError{Name: "earnings", err: errors.New(`ent: missing required field "BannerStats.earnings"`)}
	}
	if _, ok := bsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BannerStats.created_at"`)}
	}
	if _, ok := bsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BannerStats.updated_at"`)}
	}
	return nil
}

func (bsc *BannerStatsCreate) sqlSave(ctx context.Context) (*BannerStats, error) {
	if err := bsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	bsc.mutation.id = &_node.ID
	bsc.mutation.done = true
	return _node, nil
}

func (bsc *BannerStatsCreate) createSpec() (*BannerStats, *sqlgraph.CreateSpec) {
	var (
		_node = &BannerStats{config: bsc.config}
		_spec = sqlgraph.NewCreateSpec(bannerstats.Table, sqlgraph.NewFieldSpec(bannerstats.FieldID, field.TypeInt64))
	)
	if id, ok := bsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bsc.mutation.Date(); ok {
		_spec.SetField(bannerstats.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := bsc.mutation.Impressions(); ok {
		_spec.SetField(bannerstats.FieldImpressions, field.TypeInt64, value)
		_node.Impressions = value
	}
	if value, ok := bsc.mutation.Clicks(); ok {
		_spec.SetField(bannerstats.FieldClicks, field.TypeInt64, value)
		_node.Clicks = value
	}
	if value, ok := bsc.mutation.Leads(); ok {
		_spec.SetField(bannerstats.FieldLeads, field.TypeInt64, value)
		_node.Leads = value
	}
	if value, ok := bsc.mutation.Earnings(); ok {
		_spec.SetField(bannerstats.FieldEarnings, field.TypeFloat64, value)
		_node.Earnings = value
	}
	if value, ok := bsc.mutation.Ctr(); ok {
		_spec.SetField(bannerstats.FieldCtr, field.TypeFloat64, value)
		_node.Ctr = value
	}
	if value, ok := bsc.mutation.ConversionRate(); ok {
		_spec.SetField(bannerstats.FieldConversionRate, field.TypeFloat64, value)
		_node.ConversionRate = value
	}
	if value, ok := bsc.mutation.DeviceType(); ok {
		_spec.SetField(bannerstats.FieldDeviceType, field.TypeString, value)
		_node.DeviceType = value
	}
	if value, ok := bsc.mutation.Browser(); ok {
		_spec.SetField(bannerstats.FieldBrowser, field.TypeString, value)
		_node.Browser = value
	}
	if value, ok := bsc.mutation.Os(); ok {
		_spec.SetField(bannerstats.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := bsc.mutation.CreatedAt(); ok {
		_spec.SetField(bannerstats.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bsc.mutation.UpdatedAt(); ok {
		_spec.SetField(bannerstats.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bsc.mutation.BannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bannerstats.BannerTable,
			Columns: []string{bannerstats.BannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.banner_stats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bsc.mutation.PublisherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bannerstats.PublisherTable,
			Columns: []string{bannerstats.PublisherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_stats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BannerStatsCreateBulk is the builder for creating many BannerStats entities in bulk.
type BannerStatsCreateBulk struct {
	config
	err      error
	builders []*BannerStatsCreate
}

// Save creates the BannerStats entities in the database.
func (bscb *BannerStatsCreateBulk) Save(ctx context.Context) ([]*BannerStats, error) {
	if bscb.err != nil {
		return nil, bscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bscb.builders))
	nodes := make([]*BannerStats, len(bscb.builders))
	mutators := make([]Mutator, len(bscb.builders))
	for i := range bscb.builders {
		func(i int, root context.Context) {
			builder := bscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BannerStatsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bscb *BannerStatsCreateBulk) SaveX(ctx context.Context) []*BannerStats {
	v, err := bscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bscb *BannerStatsCreateBulk) Exec(ctx context.Context) error {
	_, err := bscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bscb *BannerStatsCreateBulk) ExecX(ctx context.Context) {
	if err := bscb.Exec(ctx); err != nil {
		panic(err)
	}
}
