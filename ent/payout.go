// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/payout"
	"affluo/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Payout is the model entity for the Payout schema.
type Payout struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// PaidAt holds the value of the "paid_at" field.
	PaidAt time.Time `json:"paid_at,omitempty"`
	// Status holds the value of the "status" field.
	Status payout.Status `json:"status,omitempty"`
	// TransactionID holds the value of the "transaction_id" field.
	TransactionID string `json:"transaction_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PayoutQuery when eager-loading is set.
	Edges        PayoutEdges `json:"edges"`
	user_payouts *int64
	selectValues sql.SelectValues
}

// PayoutEdges holds the relations/edges for other nodes in the graph.
type PayoutEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PayoutEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Payout) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case payout.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case payout.FieldID, payout.FieldStatus, payout.FieldTransactionID:
			values[i] = new(sql.NullString)
		case payout.FieldPaidAt:
			values[i] = new(sql.NullTime)
		case payout.ForeignKeys[0]: // user_payouts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Payout fields.
func (pa *Payout) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case payout.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pa.ID = value.String
			}
		case payout.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pa.Amount = value.Float64
			}
		case payout.FieldPaidAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field paid_at", values[i])
			} else if value.Valid {
				pa.PaidAt = value.Time
			}
		case payout.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pa.Status = payout.Status(value.String)
			}
		case payout.FieldTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_id", values[i])
			} else if value.Valid {
				pa.TransactionID = value.String
			}
		case payout.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_payouts", value)
			} else if value.Valid {
				pa.user_payouts = new(int64)
				*pa.user_payouts = int64(value.Int64)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Payout.
// This includes values selected through modifiers, order, etc.
func (pa *Payout) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Payout entity.
func (pa *Payout) QueryUser() *UserQuery {
	return NewPayoutClient(pa.config).QueryUser(pa)
}

// Update returns a builder for updating this Payout.
// Note that you need to call Payout.Unwrap() before calling this method if this Payout
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Payout) Update() *PayoutUpdateOne {
	return NewPayoutClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Payout entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Payout) Unwrap() *Payout {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Payout is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Payout) String() string {
	var builder strings.Builder
	builder.WriteString("Payout(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.Amount))
	builder.WriteString(", ")
	builder.WriteString("paid_at=")
	builder.WriteString(pa.PaidAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pa.Status))
	builder.WriteString(", ")
	builder.WriteString("transaction_id=")
	builder.WriteString(pa.TransactionID)
	builder.WriteByte(')')
	return builder.String()
}

// Payouts is a parsable slice of Payout.
type Payouts []*Payout
