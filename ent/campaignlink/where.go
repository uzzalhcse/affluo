// Code generated by ent, DO NOT EDIT.

package campaignlink

import (
	"affluo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldLTE(FieldID, id))
}

// UniqueCode applies equality check predicate on the "unique_code" field. It's identical to UniqueCodeEQ.
func UniqueCode(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEQ(FieldUniqueCode, v))
}

// OriginalURL applies equality check predicate on the "original_url" field. It's identical to OriginalURLEQ.
func OriginalURL(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEQ(FieldOriginalURL, v))
}

// TrackingURL applies equality check predicate on the "tracking_url" field. It's identical to TrackingURLEQ.
func TrackingURL(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEQ(FieldTrackingURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEQ(FieldCreatedAt, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEQ(FieldIsActive, v))
}

// UniqueCodeEQ applies the EQ predicate on the "unique_code" field.
func UniqueCodeEQ(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEQ(FieldUniqueCode, v))
}

// UniqueCodeNEQ applies the NEQ predicate on the "unique_code" field.
func UniqueCodeNEQ(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldNEQ(FieldUniqueCode, v))
}

// UniqueCodeIn applies the In predicate on the "unique_code" field.
func UniqueCodeIn(vs ...string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldIn(FieldUniqueCode, vs...))
}

// UniqueCodeNotIn applies the NotIn predicate on the "unique_code" field.
func UniqueCodeNotIn(vs ...string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldNotIn(FieldUniqueCode, vs...))
}

// UniqueCodeGT applies the GT predicate on the "unique_code" field.
func UniqueCodeGT(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldGT(FieldUniqueCode, v))
}

// UniqueCodeGTE applies the GTE predicate on the "unique_code" field.
func UniqueCodeGTE(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldGTE(FieldUniqueCode, v))
}

// UniqueCodeLT applies the LT predicate on the "unique_code" field.
func UniqueCodeLT(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldLT(FieldUniqueCode, v))
}

// UniqueCodeLTE applies the LTE predicate on the "unique_code" field.
func UniqueCodeLTE(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldLTE(FieldUniqueCode, v))
}

// UniqueCodeContains applies the Contains predicate on the "unique_code" field.
func UniqueCodeContains(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldContains(FieldUniqueCode, v))
}

// UniqueCodeHasPrefix applies the HasPrefix predicate on the "unique_code" field.
func UniqueCodeHasPrefix(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldHasPrefix(FieldUniqueCode, v))
}

// UniqueCodeHasSuffix applies the HasSuffix predicate on the "unique_code" field.
func UniqueCodeHasSuffix(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldHasSuffix(FieldUniqueCode, v))
}

// UniqueCodeEqualFold applies the EqualFold predicate on the "unique_code" field.
func UniqueCodeEqualFold(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEqualFold(FieldUniqueCode, v))
}

// UniqueCodeContainsFold applies the ContainsFold predicate on the "unique_code" field.
func UniqueCodeContainsFold(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldContainsFold(FieldUniqueCode, v))
}

// OriginalURLEQ applies the EQ predicate on the "original_url" field.
func OriginalURLEQ(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEQ(FieldOriginalURL, v))
}

// OriginalURLNEQ applies the NEQ predicate on the "original_url" field.
func OriginalURLNEQ(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldNEQ(FieldOriginalURL, v))
}

// OriginalURLIn applies the In predicate on the "original_url" field.
func OriginalURLIn(vs ...string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldIn(FieldOriginalURL, vs...))
}

// OriginalURLNotIn applies the NotIn predicate on the "original_url" field.
func OriginalURLNotIn(vs ...string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldNotIn(FieldOriginalURL, vs...))
}

// OriginalURLGT applies the GT predicate on the "original_url" field.
func OriginalURLGT(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldGT(FieldOriginalURL, v))
}

// OriginalURLGTE applies the GTE predicate on the "original_url" field.
func OriginalURLGTE(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldGTE(FieldOriginalURL, v))
}

// OriginalURLLT applies the LT predicate on the "original_url" field.
func OriginalURLLT(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldLT(FieldOriginalURL, v))
}

// OriginalURLLTE applies the LTE predicate on the "original_url" field.
func OriginalURLLTE(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldLTE(FieldOriginalURL, v))
}

// OriginalURLContains applies the Contains predicate on the "original_url" field.
func OriginalURLContains(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldContains(FieldOriginalURL, v))
}

// OriginalURLHasPrefix applies the HasPrefix predicate on the "original_url" field.
func OriginalURLHasPrefix(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldHasPrefix(FieldOriginalURL, v))
}

// OriginalURLHasSuffix applies the HasSuffix predicate on the "original_url" field.
func OriginalURLHasSuffix(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldHasSuffix(FieldOriginalURL, v))
}

// OriginalURLEqualFold applies the EqualFold predicate on the "original_url" field.
func OriginalURLEqualFold(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEqualFold(FieldOriginalURL, v))
}

// OriginalURLContainsFold applies the ContainsFold predicate on the "original_url" field.
func OriginalURLContainsFold(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldContainsFold(FieldOriginalURL, v))
}

// TrackingURLEQ applies the EQ predicate on the "tracking_url" field.
func TrackingURLEQ(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEQ(FieldTrackingURL, v))
}

// TrackingURLNEQ applies the NEQ predicate on the "tracking_url" field.
func TrackingURLNEQ(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldNEQ(FieldTrackingURL, v))
}

// TrackingURLIn applies the In predicate on the "tracking_url" field.
func TrackingURLIn(vs ...string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldIn(FieldTrackingURL, vs...))
}

// TrackingURLNotIn applies the NotIn predicate on the "tracking_url" field.
func TrackingURLNotIn(vs ...string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldNotIn(FieldTrackingURL, vs...))
}

// TrackingURLGT applies the GT predicate on the "tracking_url" field.
func TrackingURLGT(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldGT(FieldTrackingURL, v))
}

// TrackingURLGTE applies the GTE predicate on the "tracking_url" field.
func TrackingURLGTE(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldGTE(FieldTrackingURL, v))
}

// TrackingURLLT applies the LT predicate on the "tracking_url" field.
func TrackingURLLT(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldLT(FieldTrackingURL, v))
}

// TrackingURLLTE applies the LTE predicate on the "tracking_url" field.
func TrackingURLLTE(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldLTE(FieldTrackingURL, v))
}

// TrackingURLContains applies the Contains predicate on the "tracking_url" field.
func TrackingURLContains(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldContains(FieldTrackingURL, v))
}

// TrackingURLHasPrefix applies the HasPrefix predicate on the "tracking_url" field.
func TrackingURLHasPrefix(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldHasPrefix(FieldTrackingURL, v))
}

// TrackingURLHasSuffix applies the HasSuffix predicate on the "tracking_url" field.
func TrackingURLHasSuffix(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldHasSuffix(FieldTrackingURL, v))
}

// TrackingURLEqualFold applies the EqualFold predicate on the "tracking_url" field.
func TrackingURLEqualFold(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEqualFold(FieldTrackingURL, v))
}

// TrackingURLContainsFold applies the ContainsFold predicate on the "tracking_url" field.
func TrackingURLContainsFold(v string) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldContainsFold(FieldTrackingURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldLTE(FieldCreatedAt, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.CampaignLink {
	return predicate.CampaignLink(sql.FieldNEQ(FieldIsActive, v))
}

// HasCampaign applies the HasEdge predicate on the "campaign" edge.
func HasCampaign() predicate.CampaignLink {
	return predicate.CampaignLink(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CampaignTable, CampaignColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCampaignWith applies the HasEdge predicate on the "campaign" edge with a given conditions (other predicates).
func HasCampaignWith(preds ...predicate.Campaign) predicate.CampaignLink {
	return predicate.CampaignLink(func(s *sql.Selector) {
		step := newCampaignStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTracks applies the HasEdge predicate on the "tracks" edge.
func HasTracks() predicate.CampaignLink {
	return predicate.CampaignLink(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TracksTable, TracksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTracksWith applies the HasEdge predicate on the "tracks" edge with a given conditions (other predicates).
func HasTracksWith(preds ...predicate.Track) predicate.CampaignLink {
	return predicate.CampaignLink(func(s *sql.Selector) {
		step := newTracksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CampaignLink) predicate.CampaignLink {
	return predicate.CampaignLink(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CampaignLink) predicate.CampaignLink {
	return predicate.CampaignLink(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CampaignLink) predicate.CampaignLink {
	return predicate.CampaignLink(sql.NotPredicates(p))
}
