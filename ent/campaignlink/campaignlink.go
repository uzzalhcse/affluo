// Code generated by ent, DO NOT EDIT.

package campaignlink

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the campaignlink type in the database.
	Label = "campaign_link"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUniqueCode holds the string denoting the unique_code field in the database.
	FieldUniqueCode = "unique_code"
	// FieldOriginalURL holds the string denoting the original_url field in the database.
	FieldOriginalURL = "original_url"
	// FieldTrackingURL holds the string denoting the tracking_url field in the database.
	FieldTrackingURL = "tracking_url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// EdgeCampaign holds the string denoting the campaign edge name in mutations.
	EdgeCampaign = "campaign"
	// Table holds the table name of the campaignlink in the database.
	Table = "campaign_links"
	// CampaignTable is the table that holds the campaign relation/edge.
	CampaignTable = "campaign_links"
	// CampaignInverseTable is the table name for the Campaign entity.
	// It exists in this package in order to avoid circular dependency with the "campaign" package.
	CampaignInverseTable = "campaigns"
	// CampaignColumn is the table column denoting the campaign relation/edge.
	CampaignColumn = "campaign_links"
)

// Columns holds all SQL columns for campaignlink fields.
var Columns = []string{
	FieldID,
	FieldUniqueCode,
	FieldOriginalURL,
	FieldTrackingURL,
	FieldCreatedAt,
	FieldIsActive,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "campaign_links"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"campaign_links",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// OrderOption defines the ordering options for the CampaignLink queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUniqueCode orders the results by the unique_code field.
func ByUniqueCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUniqueCode, opts...).ToFunc()
}

// ByOriginalURL orders the results by the original_url field.
func ByOriginalURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalURL, opts...).ToFunc()
}

// ByTrackingURL orders the results by the tracking_url field.
func ByTrackingURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrackingURL, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByCampaignField orders the results by campaign field.
func ByCampaignField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCampaignStep(), sql.OrderByField(field, opts...))
	}
}
func newCampaignStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CampaignInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CampaignTable, CampaignColumn),
	)
}
