// Code generated by ent, DO NOT EDIT.

package commissionhistory

import (
	"affluo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldAmount, v))
}

// AffiliateUserID applies equality check predicate on the "affiliate_user_id" field. It's identical to AffiliateUserIDEQ.
func AffiliateUserID(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldAffiliateUserID, v))
}

// TrxID applies equality check predicate on the "trx_id" field. It's identical to TrxIDEQ.
func TrxID(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldTrxID, v))
}

// TrackID applies equality check predicate on the "track_id" field. It's identical to TrackIDEQ.
func TrackID(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldTrackID, v))
}

// CommissionRate applies equality check predicate on the "commission_rate" field. It's identical to CommissionRateEQ.
func CommissionRate(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldCommissionRate, v))
}

// IsFirstOrder applies equality check predicate on the "is_first_order" field. It's identical to IsFirstOrderEQ.
func IsFirstOrder(v bool) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldIsFirstOrder, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldDate, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLTE(FieldAmount, v))
}

// AffiliateUserIDEQ applies the EQ predicate on the "affiliate_user_id" field.
func AffiliateUserIDEQ(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldAffiliateUserID, v))
}

// AffiliateUserIDNEQ applies the NEQ predicate on the "affiliate_user_id" field.
func AffiliateUserIDNEQ(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNEQ(FieldAffiliateUserID, v))
}

// AffiliateUserIDIn applies the In predicate on the "affiliate_user_id" field.
func AffiliateUserIDIn(vs ...string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldIn(FieldAffiliateUserID, vs...))
}

// AffiliateUserIDNotIn applies the NotIn predicate on the "affiliate_user_id" field.
func AffiliateUserIDNotIn(vs ...string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNotIn(FieldAffiliateUserID, vs...))
}

// AffiliateUserIDGT applies the GT predicate on the "affiliate_user_id" field.
func AffiliateUserIDGT(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGT(FieldAffiliateUserID, v))
}

// AffiliateUserIDGTE applies the GTE predicate on the "affiliate_user_id" field.
func AffiliateUserIDGTE(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGTE(FieldAffiliateUserID, v))
}

// AffiliateUserIDLT applies the LT predicate on the "affiliate_user_id" field.
func AffiliateUserIDLT(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLT(FieldAffiliateUserID, v))
}

// AffiliateUserIDLTE applies the LTE predicate on the "affiliate_user_id" field.
func AffiliateUserIDLTE(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLTE(FieldAffiliateUserID, v))
}

// AffiliateUserIDContains applies the Contains predicate on the "affiliate_user_id" field.
func AffiliateUserIDContains(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldContains(FieldAffiliateUserID, v))
}

// AffiliateUserIDHasPrefix applies the HasPrefix predicate on the "affiliate_user_id" field.
func AffiliateUserIDHasPrefix(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldHasPrefix(FieldAffiliateUserID, v))
}

// AffiliateUserIDHasSuffix applies the HasSuffix predicate on the "affiliate_user_id" field.
func AffiliateUserIDHasSuffix(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldHasSuffix(FieldAffiliateUserID, v))
}

// AffiliateUserIDEqualFold applies the EqualFold predicate on the "affiliate_user_id" field.
func AffiliateUserIDEqualFold(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEqualFold(FieldAffiliateUserID, v))
}

// AffiliateUserIDContainsFold applies the ContainsFold predicate on the "affiliate_user_id" field.
func AffiliateUserIDContainsFold(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldContainsFold(FieldAffiliateUserID, v))
}

// TrxIDEQ applies the EQ predicate on the "trx_id" field.
func TrxIDEQ(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldTrxID, v))
}

// TrxIDNEQ applies the NEQ predicate on the "trx_id" field.
func TrxIDNEQ(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNEQ(FieldTrxID, v))
}

// TrxIDIn applies the In predicate on the "trx_id" field.
func TrxIDIn(vs ...string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldIn(FieldTrxID, vs...))
}

// TrxIDNotIn applies the NotIn predicate on the "trx_id" field.
func TrxIDNotIn(vs ...string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNotIn(FieldTrxID, vs...))
}

// TrxIDGT applies the GT predicate on the "trx_id" field.
func TrxIDGT(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGT(FieldTrxID, v))
}

// TrxIDGTE applies the GTE predicate on the "trx_id" field.
func TrxIDGTE(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGTE(FieldTrxID, v))
}

// TrxIDLT applies the LT predicate on the "trx_id" field.
func TrxIDLT(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLT(FieldTrxID, v))
}

// TrxIDLTE applies the LTE predicate on the "trx_id" field.
func TrxIDLTE(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLTE(FieldTrxID, v))
}

// TrxIDContains applies the Contains predicate on the "trx_id" field.
func TrxIDContains(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldContains(FieldTrxID, v))
}

// TrxIDHasPrefix applies the HasPrefix predicate on the "trx_id" field.
func TrxIDHasPrefix(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldHasPrefix(FieldTrxID, v))
}

// TrxIDHasSuffix applies the HasSuffix predicate on the "trx_id" field.
func TrxIDHasSuffix(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldHasSuffix(FieldTrxID, v))
}

// TrxIDIsNil applies the IsNil predicate on the "trx_id" field.
func TrxIDIsNil() predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldIsNull(FieldTrxID))
}

// TrxIDNotNil applies the NotNil predicate on the "trx_id" field.
func TrxIDNotNil() predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNotNull(FieldTrxID))
}

// TrxIDEqualFold applies the EqualFold predicate on the "trx_id" field.
func TrxIDEqualFold(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEqualFold(FieldTrxID, v))
}

// TrxIDContainsFold applies the ContainsFold predicate on the "trx_id" field.
func TrxIDContainsFold(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldContainsFold(FieldTrxID, v))
}

// TrackIDEQ applies the EQ predicate on the "track_id" field.
func TrackIDEQ(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldTrackID, v))
}

// TrackIDNEQ applies the NEQ predicate on the "track_id" field.
func TrackIDNEQ(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNEQ(FieldTrackID, v))
}

// TrackIDIn applies the In predicate on the "track_id" field.
func TrackIDIn(vs ...string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldIn(FieldTrackID, vs...))
}

// TrackIDNotIn applies the NotIn predicate on the "track_id" field.
func TrackIDNotIn(vs ...string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNotIn(FieldTrackID, vs...))
}

// TrackIDGT applies the GT predicate on the "track_id" field.
func TrackIDGT(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGT(FieldTrackID, v))
}

// TrackIDGTE applies the GTE predicate on the "track_id" field.
func TrackIDGTE(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGTE(FieldTrackID, v))
}

// TrackIDLT applies the LT predicate on the "track_id" field.
func TrackIDLT(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLT(FieldTrackID, v))
}

// TrackIDLTE applies the LTE predicate on the "track_id" field.
func TrackIDLTE(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLTE(FieldTrackID, v))
}

// TrackIDContains applies the Contains predicate on the "track_id" field.
func TrackIDContains(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldContains(FieldTrackID, v))
}

// TrackIDHasPrefix applies the HasPrefix predicate on the "track_id" field.
func TrackIDHasPrefix(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldHasPrefix(FieldTrackID, v))
}

// TrackIDHasSuffix applies the HasSuffix predicate on the "track_id" field.
func TrackIDHasSuffix(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldHasSuffix(FieldTrackID, v))
}

// TrackIDIsNil applies the IsNil predicate on the "track_id" field.
func TrackIDIsNil() predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldIsNull(FieldTrackID))
}

// TrackIDNotNil applies the NotNil predicate on the "track_id" field.
func TrackIDNotNil() predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNotNull(FieldTrackID))
}

// TrackIDEqualFold applies the EqualFold predicate on the "track_id" field.
func TrackIDEqualFold(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEqualFold(FieldTrackID, v))
}

// TrackIDContainsFold applies the ContainsFold predicate on the "track_id" field.
func TrackIDContainsFold(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldContainsFold(FieldTrackID, v))
}

// CommissionRateEQ applies the EQ predicate on the "commission_rate" field.
func CommissionRateEQ(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldCommissionRate, v))
}

// CommissionRateNEQ applies the NEQ predicate on the "commission_rate" field.
func CommissionRateNEQ(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNEQ(FieldCommissionRate, v))
}

// CommissionRateIn applies the In predicate on the "commission_rate" field.
func CommissionRateIn(vs ...float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldIn(FieldCommissionRate, vs...))
}

// CommissionRateNotIn applies the NotIn predicate on the "commission_rate" field.
func CommissionRateNotIn(vs ...float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNotIn(FieldCommissionRate, vs...))
}

// CommissionRateGT applies the GT predicate on the "commission_rate" field.
func CommissionRateGT(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGT(FieldCommissionRate, v))
}

// CommissionRateGTE applies the GTE predicate on the "commission_rate" field.
func CommissionRateGTE(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGTE(FieldCommissionRate, v))
}

// CommissionRateLT applies the LT predicate on the "commission_rate" field.
func CommissionRateLT(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLT(FieldCommissionRate, v))
}

// CommissionRateLTE applies the LTE predicate on the "commission_rate" field.
func CommissionRateLTE(v float64) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLTE(FieldCommissionRate, v))
}

// IsFirstOrderEQ applies the EQ predicate on the "is_first_order" field.
func IsFirstOrderEQ(v bool) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldIsFirstOrder, v))
}

// IsFirstOrderNEQ applies the NEQ predicate on the "is_first_order" field.
func IsFirstOrderNEQ(v bool) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNEQ(FieldIsFirstOrder, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldLTE(FieldDate, v))
}

// DateContains applies the Contains predicate on the "date" field.
func DateContains(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldContains(FieldDate, v))
}

// DateHasPrefix applies the HasPrefix predicate on the "date" field.
func DateHasPrefix(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldHasPrefix(FieldDate, v))
}

// DateHasSuffix applies the HasSuffix predicate on the "date" field.
func DateHasSuffix(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldHasSuffix(FieldDate, v))
}

// DateEqualFold applies the EqualFold predicate on the "date" field.
func DateEqualFold(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldEqualFold(FieldDate, v))
}

// DateContainsFold applies the ContainsFold predicate on the "date" field.
func DateContainsFold(v string) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.FieldContainsFold(FieldDate, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.CommissionHistory {
	return predicate.CommissionHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.CommissionHistory {
	return predicate.CommissionHistory(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CommissionHistory) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CommissionHistory) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CommissionHistory) predicate.CommissionHistory {
	return predicate.CommissionHistory(sql.NotPredicates(p))
}
