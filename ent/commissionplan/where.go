// Code generated by ent, DO NOT EDIT.

package commissionplan

import (
	"affluo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldDescription, v))
}

// ClickCommission applies equality check predicate on the "click_commission" field. It's identical to ClickCommissionEQ.
func ClickCommission(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldClickCommission, v))
}

// ImpressionCommission applies equality check predicate on the "impression_commission" field. It's identical to ImpressionCommissionEQ.
func ImpressionCommission(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldImpressionCommission, v))
}

// LeadCommission applies equality check predicate on the "lead_commission" field. It's identical to LeadCommissionEQ.
func LeadCommission(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldLeadCommission, v))
}

// MinimumPayout applies equality check predicate on the "minimum_payout" field. It's identical to MinimumPayoutEQ.
func MinimumPayout(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldMinimumPayout, v))
}

// ValidFrom applies equality check predicate on the "valid_from" field. It's identical to ValidFromEQ.
func ValidFrom(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldValidFrom, v))
}

// ValidUntil applies equality check predicate on the "valid_until" field. It's identical to ValidUntilEQ.
func ValidUntil(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldValidUntil, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldIsActive, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldIsDefault, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldContainsFold(FieldDescription, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNotIn(FieldType, vs...))
}

// ClickCommissionEQ applies the EQ predicate on the "click_commission" field.
func ClickCommissionEQ(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldClickCommission, v))
}

// ClickCommissionNEQ applies the NEQ predicate on the "click_commission" field.
func ClickCommissionNEQ(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNEQ(FieldClickCommission, v))
}

// ClickCommissionIn applies the In predicate on the "click_commission" field.
func ClickCommissionIn(vs ...float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldIn(FieldClickCommission, vs...))
}

// ClickCommissionNotIn applies the NotIn predicate on the "click_commission" field.
func ClickCommissionNotIn(vs ...float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNotIn(FieldClickCommission, vs...))
}

// ClickCommissionGT applies the GT predicate on the "click_commission" field.
func ClickCommissionGT(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGT(FieldClickCommission, v))
}

// ClickCommissionGTE applies the GTE predicate on the "click_commission" field.
func ClickCommissionGTE(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGTE(FieldClickCommission, v))
}

// ClickCommissionLT applies the LT predicate on the "click_commission" field.
func ClickCommissionLT(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLT(FieldClickCommission, v))
}

// ClickCommissionLTE applies the LTE predicate on the "click_commission" field.
func ClickCommissionLTE(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLTE(FieldClickCommission, v))
}

// ImpressionCommissionEQ applies the EQ predicate on the "impression_commission" field.
func ImpressionCommissionEQ(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldImpressionCommission, v))
}

// ImpressionCommissionNEQ applies the NEQ predicate on the "impression_commission" field.
func ImpressionCommissionNEQ(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNEQ(FieldImpressionCommission, v))
}

// ImpressionCommissionIn applies the In predicate on the "impression_commission" field.
func ImpressionCommissionIn(vs ...float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldIn(FieldImpressionCommission, vs...))
}

// ImpressionCommissionNotIn applies the NotIn predicate on the "impression_commission" field.
func ImpressionCommissionNotIn(vs ...float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNotIn(FieldImpressionCommission, vs...))
}

// ImpressionCommissionGT applies the GT predicate on the "impression_commission" field.
func ImpressionCommissionGT(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGT(FieldImpressionCommission, v))
}

// ImpressionCommissionGTE applies the GTE predicate on the "impression_commission" field.
func ImpressionCommissionGTE(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGTE(FieldImpressionCommission, v))
}

// ImpressionCommissionLT applies the LT predicate on the "impression_commission" field.
func ImpressionCommissionLT(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLT(FieldImpressionCommission, v))
}

// ImpressionCommissionLTE applies the LTE predicate on the "impression_commission" field.
func ImpressionCommissionLTE(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLTE(FieldImpressionCommission, v))
}

// LeadCommissionEQ applies the EQ predicate on the "lead_commission" field.
func LeadCommissionEQ(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldLeadCommission, v))
}

// LeadCommissionNEQ applies the NEQ predicate on the "lead_commission" field.
func LeadCommissionNEQ(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNEQ(FieldLeadCommission, v))
}

// LeadCommissionIn applies the In predicate on the "lead_commission" field.
func LeadCommissionIn(vs ...float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldIn(FieldLeadCommission, vs...))
}

// LeadCommissionNotIn applies the NotIn predicate on the "lead_commission" field.
func LeadCommissionNotIn(vs ...float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNotIn(FieldLeadCommission, vs...))
}

// LeadCommissionGT applies the GT predicate on the "lead_commission" field.
func LeadCommissionGT(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGT(FieldLeadCommission, v))
}

// LeadCommissionGTE applies the GTE predicate on the "lead_commission" field.
func LeadCommissionGTE(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGTE(FieldLeadCommission, v))
}

// LeadCommissionLT applies the LT predicate on the "lead_commission" field.
func LeadCommissionLT(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLT(FieldLeadCommission, v))
}

// LeadCommissionLTE applies the LTE predicate on the "lead_commission" field.
func LeadCommissionLTE(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLTE(FieldLeadCommission, v))
}

// MinimumPayoutEQ applies the EQ predicate on the "minimum_payout" field.
func MinimumPayoutEQ(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldMinimumPayout, v))
}

// MinimumPayoutNEQ applies the NEQ predicate on the "minimum_payout" field.
func MinimumPayoutNEQ(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNEQ(FieldMinimumPayout, v))
}

// MinimumPayoutIn applies the In predicate on the "minimum_payout" field.
func MinimumPayoutIn(vs ...float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldIn(FieldMinimumPayout, vs...))
}

// MinimumPayoutNotIn applies the NotIn predicate on the "minimum_payout" field.
func MinimumPayoutNotIn(vs ...float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNotIn(FieldMinimumPayout, vs...))
}

// MinimumPayoutGT applies the GT predicate on the "minimum_payout" field.
func MinimumPayoutGT(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGT(FieldMinimumPayout, v))
}

// MinimumPayoutGTE applies the GTE predicate on the "minimum_payout" field.
func MinimumPayoutGTE(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGTE(FieldMinimumPayout, v))
}

// MinimumPayoutLT applies the LT predicate on the "minimum_payout" field.
func MinimumPayoutLT(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLT(FieldMinimumPayout, v))
}

// MinimumPayoutLTE applies the LTE predicate on the "minimum_payout" field.
func MinimumPayoutLTE(v float64) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLTE(FieldMinimumPayout, v))
}

// ValidFromEQ applies the EQ predicate on the "valid_from" field.
func ValidFromEQ(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldValidFrom, v))
}

// ValidFromNEQ applies the NEQ predicate on the "valid_from" field.
func ValidFromNEQ(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNEQ(FieldValidFrom, v))
}

// ValidFromIn applies the In predicate on the "valid_from" field.
func ValidFromIn(vs ...time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldIn(FieldValidFrom, vs...))
}

// ValidFromNotIn applies the NotIn predicate on the "valid_from" field.
func ValidFromNotIn(vs ...time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNotIn(FieldValidFrom, vs...))
}

// ValidFromGT applies the GT predicate on the "valid_from" field.
func ValidFromGT(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGT(FieldValidFrom, v))
}

// ValidFromGTE applies the GTE predicate on the "valid_from" field.
func ValidFromGTE(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGTE(FieldValidFrom, v))
}

// ValidFromLT applies the LT predicate on the "valid_from" field.
func ValidFromLT(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLT(FieldValidFrom, v))
}

// ValidFromLTE applies the LTE predicate on the "valid_from" field.
func ValidFromLTE(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLTE(FieldValidFrom, v))
}

// ValidFromIsNil applies the IsNil predicate on the "valid_from" field.
func ValidFromIsNil() predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldIsNull(FieldValidFrom))
}

// ValidFromNotNil applies the NotNil predicate on the "valid_from" field.
func ValidFromNotNil() predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNotNull(FieldValidFrom))
}

// ValidUntilEQ applies the EQ predicate on the "valid_until" field.
func ValidUntilEQ(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldValidUntil, v))
}

// ValidUntilNEQ applies the NEQ predicate on the "valid_until" field.
func ValidUntilNEQ(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNEQ(FieldValidUntil, v))
}

// ValidUntilIn applies the In predicate on the "valid_until" field.
func ValidUntilIn(vs ...time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldIn(FieldValidUntil, vs...))
}

// ValidUntilNotIn applies the NotIn predicate on the "valid_until" field.
func ValidUntilNotIn(vs ...time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNotIn(FieldValidUntil, vs...))
}

// ValidUntilGT applies the GT predicate on the "valid_until" field.
func ValidUntilGT(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGT(FieldValidUntil, v))
}

// ValidUntilGTE applies the GTE predicate on the "valid_until" field.
func ValidUntilGTE(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldGTE(FieldValidUntil, v))
}

// ValidUntilLT applies the LT predicate on the "valid_until" field.
func ValidUntilLT(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLT(FieldValidUntil, v))
}

// ValidUntilLTE applies the LTE predicate on the "valid_until" field.
func ValidUntilLTE(v time.Time) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldLTE(FieldValidUntil, v))
}

// ValidUntilIsNil applies the IsNil predicate on the "valid_until" field.
func ValidUntilIsNil() predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldIsNull(FieldValidUntil))
}

// ValidUntilNotNil applies the NotNil predicate on the "valid_until" field.
func ValidUntilNotNil() predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNotNull(FieldValidUntil))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNEQ(FieldIsActive, v))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.FieldNEQ(FieldIsDefault, v))
}

// HasPublishers applies the HasEdge predicate on the "publishers" edge.
func HasPublishers() predicate.CommissionPlan {
	return predicate.CommissionPlan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PublishersTable, PublishersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPublishersWith applies the HasEdge predicate on the "publishers" edge with a given conditions (other predicates).
func HasPublishersWith(preds ...predicate.User) predicate.CommissionPlan {
	return predicate.CommissionPlan(func(s *sql.Selector) {
		step := newPublishersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CommissionPlan) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CommissionPlan) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CommissionPlan) predicate.CommissionPlan {
	return predicate.CommissionPlan(sql.NotPredicates(p))
}
