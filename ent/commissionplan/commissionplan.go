// Code generated by ent, DO NOT EDIT.

package commissionplan

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the commissionplan type in the database.
	Label = "commission_plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldClickCommission holds the string denoting the click_commission field in the database.
	FieldClickCommission = "click_commission"
	// FieldImpressionCommission holds the string denoting the impression_commission field in the database.
	FieldImpressionCommission = "impression_commission"
	// FieldLeadCommission holds the string denoting the lead_commission field in the database.
	FieldLeadCommission = "lead_commission"
	// FieldMinimumPayout holds the string denoting the minimum_payout field in the database.
	FieldMinimumPayout = "minimum_payout"
	// FieldValidFrom holds the string denoting the valid_from field in the database.
	FieldValidFrom = "valid_from"
	// FieldValidUntil holds the string denoting the valid_until field in the database.
	FieldValidUntil = "valid_until"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldIsDefault holds the string denoting the is_default field in the database.
	FieldIsDefault = "is_default"
	// EdgePublishers holds the string denoting the publishers edge name in mutations.
	EdgePublishers = "publishers"
	// Table holds the table name of the commissionplan in the database.
	Table = "commission_plans"
	// PublishersTable is the table that holds the publishers relation/edge.
	PublishersTable = "users"
	// PublishersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	PublishersInverseTable = "users"
	// PublishersColumn is the table column denoting the publishers relation/edge.
	PublishersColumn = "commission_plan_publishers"
)

// Columns holds all SQL columns for commissionplan fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldType,
	FieldClickCommission,
	FieldImpressionCommission,
	FieldLeadCommission,
	FieldMinimumPayout,
	FieldValidFrom,
	FieldValidUntil,
	FieldIsActive,
	FieldIsDefault,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultClickCommission holds the default value on creation for the "click_commission" field.
	DefaultClickCommission float64
	// DefaultImpressionCommission holds the default value on creation for the "impression_commission" field.
	DefaultImpressionCommission float64
	// DefaultLeadCommission holds the default value on creation for the "lead_commission" field.
	DefaultLeadCommission float64
	// DefaultMinimumPayout holds the default value on creation for the "minimum_payout" field.
	DefaultMinimumPayout float64
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultIsDefault holds the default value on creation for the "is_default" field.
	DefaultIsDefault bool
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeFixed      Type = "fixed"
	TypePercentage Type = "percentage"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeFixed, TypePercentage:
		return nil
	default:
		return fmt.Errorf("commissionplan: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the CommissionPlan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByClickCommission orders the results by the click_commission field.
func ByClickCommission(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClickCommission, opts...).ToFunc()
}

// ByImpressionCommission orders the results by the impression_commission field.
func ByImpressionCommission(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImpressionCommission, opts...).ToFunc()
}

// ByLeadCommission orders the results by the lead_commission field.
func ByLeadCommission(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLeadCommission, opts...).ToFunc()
}

// ByMinimumPayout orders the results by the minimum_payout field.
func ByMinimumPayout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinimumPayout, opts...).ToFunc()
}

// ByValidFrom orders the results by the valid_from field.
func ByValidFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidFrom, opts...).ToFunc()
}

// ByValidUntil orders the results by the valid_until field.
func ByValidUntil(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidUntil, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByIsDefault orders the results by the is_default field.
func ByIsDefault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDefault, opts...).ToFunc()
}

// ByPublishersCount orders the results by publishers count.
func ByPublishersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPublishersStep(), opts...)
	}
}

// ByPublishers orders the results by publishers terms.
func ByPublishers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPublishersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPublishersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PublishersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PublishersTable, PublishersColumn),
	)
}
