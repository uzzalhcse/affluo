// Code generated by ent, DO NOT EDIT.

package gigtracking

import (
	"affluo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLTE(FieldID, id))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldDate, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldType, v))
}

// UtmQuery applies equality check predicate on the "utm_query" field. It's identical to UtmQueryEQ.
func UtmQuery(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldUtmQuery, v))
}

// Lp applies equality check predicate on the "lp" field. It's identical to LpEQ.
func Lp(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldLp, v))
}

// TrackID applies equality check predicate on the "track_id" field. It's identical to TrackIDEQ.
func TrackID(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldTrackID, v))
}

// Revenue applies equality check predicate on the "revenue" field. It's identical to RevenueEQ.
func Revenue(v float64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldRevenue, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldUpdatedAt, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLTE(FieldDate, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldContainsFold(FieldType, v))
}

// UtmQueryEQ applies the EQ predicate on the "utm_query" field.
func UtmQueryEQ(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldUtmQuery, v))
}

// UtmQueryNEQ applies the NEQ predicate on the "utm_query" field.
func UtmQueryNEQ(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNEQ(FieldUtmQuery, v))
}

// UtmQueryIn applies the In predicate on the "utm_query" field.
func UtmQueryIn(vs ...string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldIn(FieldUtmQuery, vs...))
}

// UtmQueryNotIn applies the NotIn predicate on the "utm_query" field.
func UtmQueryNotIn(vs ...string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNotIn(FieldUtmQuery, vs...))
}

// UtmQueryGT applies the GT predicate on the "utm_query" field.
func UtmQueryGT(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGT(FieldUtmQuery, v))
}

// UtmQueryGTE applies the GTE predicate on the "utm_query" field.
func UtmQueryGTE(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGTE(FieldUtmQuery, v))
}

// UtmQueryLT applies the LT predicate on the "utm_query" field.
func UtmQueryLT(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLT(FieldUtmQuery, v))
}

// UtmQueryLTE applies the LTE predicate on the "utm_query" field.
func UtmQueryLTE(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLTE(FieldUtmQuery, v))
}

// UtmQueryContains applies the Contains predicate on the "utm_query" field.
func UtmQueryContains(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldContains(FieldUtmQuery, v))
}

// UtmQueryHasPrefix applies the HasPrefix predicate on the "utm_query" field.
func UtmQueryHasPrefix(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldHasPrefix(FieldUtmQuery, v))
}

// UtmQueryHasSuffix applies the HasSuffix predicate on the "utm_query" field.
func UtmQueryHasSuffix(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldHasSuffix(FieldUtmQuery, v))
}

// UtmQueryIsNil applies the IsNil predicate on the "utm_query" field.
func UtmQueryIsNil() predicate.GigTracking {
	return predicate.GigTracking(sql.FieldIsNull(FieldUtmQuery))
}

// UtmQueryNotNil applies the NotNil predicate on the "utm_query" field.
func UtmQueryNotNil() predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNotNull(FieldUtmQuery))
}

// UtmQueryEqualFold applies the EqualFold predicate on the "utm_query" field.
func UtmQueryEqualFold(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEqualFold(FieldUtmQuery, v))
}

// UtmQueryContainsFold applies the ContainsFold predicate on the "utm_query" field.
func UtmQueryContainsFold(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldContainsFold(FieldUtmQuery, v))
}

// LpEQ applies the EQ predicate on the "lp" field.
func LpEQ(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldLp, v))
}

// LpNEQ applies the NEQ predicate on the "lp" field.
func LpNEQ(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNEQ(FieldLp, v))
}

// LpIn applies the In predicate on the "lp" field.
func LpIn(vs ...string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldIn(FieldLp, vs...))
}

// LpNotIn applies the NotIn predicate on the "lp" field.
func LpNotIn(vs ...string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNotIn(FieldLp, vs...))
}

// LpGT applies the GT predicate on the "lp" field.
func LpGT(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGT(FieldLp, v))
}

// LpGTE applies the GTE predicate on the "lp" field.
func LpGTE(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGTE(FieldLp, v))
}

// LpLT applies the LT predicate on the "lp" field.
func LpLT(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLT(FieldLp, v))
}

// LpLTE applies the LTE predicate on the "lp" field.
func LpLTE(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLTE(FieldLp, v))
}

// LpContains applies the Contains predicate on the "lp" field.
func LpContains(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldContains(FieldLp, v))
}

// LpHasPrefix applies the HasPrefix predicate on the "lp" field.
func LpHasPrefix(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldHasPrefix(FieldLp, v))
}

// LpHasSuffix applies the HasSuffix predicate on the "lp" field.
func LpHasSuffix(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldHasSuffix(FieldLp, v))
}

// LpIsNil applies the IsNil predicate on the "lp" field.
func LpIsNil() predicate.GigTracking {
	return predicate.GigTracking(sql.FieldIsNull(FieldLp))
}

// LpNotNil applies the NotNil predicate on the "lp" field.
func LpNotNil() predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNotNull(FieldLp))
}

// LpEqualFold applies the EqualFold predicate on the "lp" field.
func LpEqualFold(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEqualFold(FieldLp, v))
}

// LpContainsFold applies the ContainsFold predicate on the "lp" field.
func LpContainsFold(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldContainsFold(FieldLp, v))
}

// TrackIDEQ applies the EQ predicate on the "track_id" field.
func TrackIDEQ(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldTrackID, v))
}

// TrackIDNEQ applies the NEQ predicate on the "track_id" field.
func TrackIDNEQ(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNEQ(FieldTrackID, v))
}

// TrackIDIn applies the In predicate on the "track_id" field.
func TrackIDIn(vs ...string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldIn(FieldTrackID, vs...))
}

// TrackIDNotIn applies the NotIn predicate on the "track_id" field.
func TrackIDNotIn(vs ...string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNotIn(FieldTrackID, vs...))
}

// TrackIDGT applies the GT predicate on the "track_id" field.
func TrackIDGT(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGT(FieldTrackID, v))
}

// TrackIDGTE applies the GTE predicate on the "track_id" field.
func TrackIDGTE(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGTE(FieldTrackID, v))
}

// TrackIDLT applies the LT predicate on the "track_id" field.
func TrackIDLT(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLT(FieldTrackID, v))
}

// TrackIDLTE applies the LTE predicate on the "track_id" field.
func TrackIDLTE(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLTE(FieldTrackID, v))
}

// TrackIDContains applies the Contains predicate on the "track_id" field.
func TrackIDContains(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldContains(FieldTrackID, v))
}

// TrackIDHasPrefix applies the HasPrefix predicate on the "track_id" field.
func TrackIDHasPrefix(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldHasPrefix(FieldTrackID, v))
}

// TrackIDHasSuffix applies the HasSuffix predicate on the "track_id" field.
func TrackIDHasSuffix(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldHasSuffix(FieldTrackID, v))
}

// TrackIDIsNil applies the IsNil predicate on the "track_id" field.
func TrackIDIsNil() predicate.GigTracking {
	return predicate.GigTracking(sql.FieldIsNull(FieldTrackID))
}

// TrackIDNotNil applies the NotNil predicate on the "track_id" field.
func TrackIDNotNil() predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNotNull(FieldTrackID))
}

// TrackIDEqualFold applies the EqualFold predicate on the "track_id" field.
func TrackIDEqualFold(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEqualFold(FieldTrackID, v))
}

// TrackIDContainsFold applies the ContainsFold predicate on the "track_id" field.
func TrackIDContainsFold(v string) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldContainsFold(FieldTrackID, v))
}

// RevenueEQ applies the EQ predicate on the "revenue" field.
func RevenueEQ(v float64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldRevenue, v))
}

// RevenueNEQ applies the NEQ predicate on the "revenue" field.
func RevenueNEQ(v float64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNEQ(FieldRevenue, v))
}

// RevenueIn applies the In predicate on the "revenue" field.
func RevenueIn(vs ...float64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldIn(FieldRevenue, vs...))
}

// RevenueNotIn applies the NotIn predicate on the "revenue" field.
func RevenueNotIn(vs ...float64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNotIn(FieldRevenue, vs...))
}

// RevenueGT applies the GT predicate on the "revenue" field.
func RevenueGT(v float64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGT(FieldRevenue, v))
}

// RevenueGTE applies the GTE predicate on the "revenue" field.
func RevenueGTE(v float64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGTE(FieldRevenue, v))
}

// RevenueLT applies the LT predicate on the "revenue" field.
func RevenueLT(v float64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLT(FieldRevenue, v))
}

// RevenueLTE applies the LTE predicate on the "revenue" field.
func RevenueLTE(v float64) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLTE(FieldRevenue, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GigTracking {
	return predicate.GigTracking(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasPublisher applies the HasEdge predicate on the "publisher" edge.
func HasPublisher() predicate.GigTracking {
	return predicate.GigTracking(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PublisherTable, PublisherColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPublisherWith applies the HasEdge predicate on the "publisher" edge with a given conditions (other predicates).
func HasPublisherWith(preds ...predicate.User) predicate.GigTracking {
	return predicate.GigTracking(func(s *sql.Selector) {
		step := newPublisherStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GigTracking) predicate.GigTracking {
	return predicate.GigTracking(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GigTracking) predicate.GigTracking {
	return predicate.GigTracking(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GigTracking) predicate.GigTracking {
	return predicate.GigTracking(sql.NotPredicates(p))
}
