// Code generated by ent, DO NOT EDIT.

package bannerstats

import (
	"affluo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLTE(FieldID, id))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldDate, v))
}

// Impressions applies equality check predicate on the "impressions" field. It's identical to ImpressionsEQ.
func Impressions(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldImpressions, v))
}

// Clicks applies equality check predicate on the "clicks" field. It's identical to ClicksEQ.
func Clicks(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldClicks, v))
}

// Leads applies equality check predicate on the "leads" field. It's identical to LeadsEQ.
func Leads(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldLeads, v))
}

// Earnings applies equality check predicate on the "earnings" field. It's identical to EarningsEQ.
func Earnings(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldEarnings, v))
}

// Ctr applies equality check predicate on the "ctr" field. It's identical to CtrEQ.
func Ctr(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldCtr, v))
}

// ConversionRate applies equality check predicate on the "conversion_rate" field. It's identical to ConversionRateEQ.
func ConversionRate(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldConversionRate, v))
}

// DeviceType applies equality check predicate on the "device_type" field. It's identical to DeviceTypeEQ.
func DeviceType(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldDeviceType, v))
}

// Browser applies equality check predicate on the "browser" field. It's identical to BrowserEQ.
func Browser(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldBrowser, v))
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldOs, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldUpdatedAt, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLTE(FieldDate, v))
}

// ImpressionsEQ applies the EQ predicate on the "impressions" field.
func ImpressionsEQ(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldImpressions, v))
}

// ImpressionsNEQ applies the NEQ predicate on the "impressions" field.
func ImpressionsNEQ(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNEQ(FieldImpressions, v))
}

// ImpressionsIn applies the In predicate on the "impressions" field.
func ImpressionsIn(vs ...int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIn(FieldImpressions, vs...))
}

// ImpressionsNotIn applies the NotIn predicate on the "impressions" field.
func ImpressionsNotIn(vs ...int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotIn(FieldImpressions, vs...))
}

// ImpressionsGT applies the GT predicate on the "impressions" field.
func ImpressionsGT(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGT(FieldImpressions, v))
}

// ImpressionsGTE applies the GTE predicate on the "impressions" field.
func ImpressionsGTE(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGTE(FieldImpressions, v))
}

// ImpressionsLT applies the LT predicate on the "impressions" field.
func ImpressionsLT(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLT(FieldImpressions, v))
}

// ImpressionsLTE applies the LTE predicate on the "impressions" field.
func ImpressionsLTE(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLTE(FieldImpressions, v))
}

// ClicksEQ applies the EQ predicate on the "clicks" field.
func ClicksEQ(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldClicks, v))
}

// ClicksNEQ applies the NEQ predicate on the "clicks" field.
func ClicksNEQ(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNEQ(FieldClicks, v))
}

// ClicksIn applies the In predicate on the "clicks" field.
func ClicksIn(vs ...int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIn(FieldClicks, vs...))
}

// ClicksNotIn applies the NotIn predicate on the "clicks" field.
func ClicksNotIn(vs ...int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotIn(FieldClicks, vs...))
}

// ClicksGT applies the GT predicate on the "clicks" field.
func ClicksGT(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGT(FieldClicks, v))
}

// ClicksGTE applies the GTE predicate on the "clicks" field.
func ClicksGTE(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGTE(FieldClicks, v))
}

// ClicksLT applies the LT predicate on the "clicks" field.
func ClicksLT(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLT(FieldClicks, v))
}

// ClicksLTE applies the LTE predicate on the "clicks" field.
func ClicksLTE(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLTE(FieldClicks, v))
}

// LeadsEQ applies the EQ predicate on the "leads" field.
func LeadsEQ(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldLeads, v))
}

// LeadsNEQ applies the NEQ predicate on the "leads" field.
func LeadsNEQ(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNEQ(FieldLeads, v))
}

// LeadsIn applies the In predicate on the "leads" field.
func LeadsIn(vs ...int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIn(FieldLeads, vs...))
}

// LeadsNotIn applies the NotIn predicate on the "leads" field.
func LeadsNotIn(vs ...int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotIn(FieldLeads, vs...))
}

// LeadsGT applies the GT predicate on the "leads" field.
func LeadsGT(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGT(FieldLeads, v))
}

// LeadsGTE applies the GTE predicate on the "leads" field.
func LeadsGTE(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGTE(FieldLeads, v))
}

// LeadsLT applies the LT predicate on the "leads" field.
func LeadsLT(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLT(FieldLeads, v))
}

// LeadsLTE applies the LTE predicate on the "leads" field.
func LeadsLTE(v int64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLTE(FieldLeads, v))
}

// EarningsEQ applies the EQ predicate on the "earnings" field.
func EarningsEQ(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldEarnings, v))
}

// EarningsNEQ applies the NEQ predicate on the "earnings" field.
func EarningsNEQ(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNEQ(FieldEarnings, v))
}

// EarningsIn applies the In predicate on the "earnings" field.
func EarningsIn(vs ...float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIn(FieldEarnings, vs...))
}

// EarningsNotIn applies the NotIn predicate on the "earnings" field.
func EarningsNotIn(vs ...float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotIn(FieldEarnings, vs...))
}

// EarningsGT applies the GT predicate on the "earnings" field.
func EarningsGT(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGT(FieldEarnings, v))
}

// EarningsGTE applies the GTE predicate on the "earnings" field.
func EarningsGTE(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGTE(FieldEarnings, v))
}

// EarningsLT applies the LT predicate on the "earnings" field.
func EarningsLT(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLT(FieldEarnings, v))
}

// EarningsLTE applies the LTE predicate on the "earnings" field.
func EarningsLTE(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLTE(FieldEarnings, v))
}

// CtrEQ applies the EQ predicate on the "ctr" field.
func CtrEQ(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldCtr, v))
}

// CtrNEQ applies the NEQ predicate on the "ctr" field.
func CtrNEQ(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNEQ(FieldCtr, v))
}

// CtrIn applies the In predicate on the "ctr" field.
func CtrIn(vs ...float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIn(FieldCtr, vs...))
}

// CtrNotIn applies the NotIn predicate on the "ctr" field.
func CtrNotIn(vs ...float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotIn(FieldCtr, vs...))
}

// CtrGT applies the GT predicate on the "ctr" field.
func CtrGT(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGT(FieldCtr, v))
}

// CtrGTE applies the GTE predicate on the "ctr" field.
func CtrGTE(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGTE(FieldCtr, v))
}

// CtrLT applies the LT predicate on the "ctr" field.
func CtrLT(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLT(FieldCtr, v))
}

// CtrLTE applies the LTE predicate on the "ctr" field.
func CtrLTE(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLTE(FieldCtr, v))
}

// CtrIsNil applies the IsNil predicate on the "ctr" field.
func CtrIsNil() predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIsNull(FieldCtr))
}

// CtrNotNil applies the NotNil predicate on the "ctr" field.
func CtrNotNil() predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotNull(FieldCtr))
}

// ConversionRateEQ applies the EQ predicate on the "conversion_rate" field.
func ConversionRateEQ(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldConversionRate, v))
}

// ConversionRateNEQ applies the NEQ predicate on the "conversion_rate" field.
func ConversionRateNEQ(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNEQ(FieldConversionRate, v))
}

// ConversionRateIn applies the In predicate on the "conversion_rate" field.
func ConversionRateIn(vs ...float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIn(FieldConversionRate, vs...))
}

// ConversionRateNotIn applies the NotIn predicate on the "conversion_rate" field.
func ConversionRateNotIn(vs ...float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotIn(FieldConversionRate, vs...))
}

// ConversionRateGT applies the GT predicate on the "conversion_rate" field.
func ConversionRateGT(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGT(FieldConversionRate, v))
}

// ConversionRateGTE applies the GTE predicate on the "conversion_rate" field.
func ConversionRateGTE(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGTE(FieldConversionRate, v))
}

// ConversionRateLT applies the LT predicate on the "conversion_rate" field.
func ConversionRateLT(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLT(FieldConversionRate, v))
}

// ConversionRateLTE applies the LTE predicate on the "conversion_rate" field.
func ConversionRateLTE(v float64) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLTE(FieldConversionRate, v))
}

// ConversionRateIsNil applies the IsNil predicate on the "conversion_rate" field.
func ConversionRateIsNil() predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIsNull(FieldConversionRate))
}

// ConversionRateNotNil applies the NotNil predicate on the "conversion_rate" field.
func ConversionRateNotNil() predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotNull(FieldConversionRate))
}

// DeviceTypeEQ applies the EQ predicate on the "device_type" field.
func DeviceTypeEQ(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldDeviceType, v))
}

// DeviceTypeNEQ applies the NEQ predicate on the "device_type" field.
func DeviceTypeNEQ(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNEQ(FieldDeviceType, v))
}

// DeviceTypeIn applies the In predicate on the "device_type" field.
func DeviceTypeIn(vs ...string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIn(FieldDeviceType, vs...))
}

// DeviceTypeNotIn applies the NotIn predicate on the "device_type" field.
func DeviceTypeNotIn(vs ...string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotIn(FieldDeviceType, vs...))
}

// DeviceTypeGT applies the GT predicate on the "device_type" field.
func DeviceTypeGT(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGT(FieldDeviceType, v))
}

// DeviceTypeGTE applies the GTE predicate on the "device_type" field.
func DeviceTypeGTE(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGTE(FieldDeviceType, v))
}

// DeviceTypeLT applies the LT predicate on the "device_type" field.
func DeviceTypeLT(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLT(FieldDeviceType, v))
}

// DeviceTypeLTE applies the LTE predicate on the "device_type" field.
func DeviceTypeLTE(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLTE(FieldDeviceType, v))
}

// DeviceTypeContains applies the Contains predicate on the "device_type" field.
func DeviceTypeContains(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldContains(FieldDeviceType, v))
}

// DeviceTypeHasPrefix applies the HasPrefix predicate on the "device_type" field.
func DeviceTypeHasPrefix(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldHasPrefix(FieldDeviceType, v))
}

// DeviceTypeHasSuffix applies the HasSuffix predicate on the "device_type" field.
func DeviceTypeHasSuffix(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldHasSuffix(FieldDeviceType, v))
}

// DeviceTypeIsNil applies the IsNil predicate on the "device_type" field.
func DeviceTypeIsNil() predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIsNull(FieldDeviceType))
}

// DeviceTypeNotNil applies the NotNil predicate on the "device_type" field.
func DeviceTypeNotNil() predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotNull(FieldDeviceType))
}

// DeviceTypeEqualFold applies the EqualFold predicate on the "device_type" field.
func DeviceTypeEqualFold(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEqualFold(FieldDeviceType, v))
}

// DeviceTypeContainsFold applies the ContainsFold predicate on the "device_type" field.
func DeviceTypeContainsFold(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldContainsFold(FieldDeviceType, v))
}

// BrowserEQ applies the EQ predicate on the "browser" field.
func BrowserEQ(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldBrowser, v))
}

// BrowserNEQ applies the NEQ predicate on the "browser" field.
func BrowserNEQ(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNEQ(FieldBrowser, v))
}

// BrowserIn applies the In predicate on the "browser" field.
func BrowserIn(vs ...string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIn(FieldBrowser, vs...))
}

// BrowserNotIn applies the NotIn predicate on the "browser" field.
func BrowserNotIn(vs ...string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotIn(FieldBrowser, vs...))
}

// BrowserGT applies the GT predicate on the "browser" field.
func BrowserGT(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGT(FieldBrowser, v))
}

// BrowserGTE applies the GTE predicate on the "browser" field.
func BrowserGTE(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGTE(FieldBrowser, v))
}

// BrowserLT applies the LT predicate on the "browser" field.
func BrowserLT(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLT(FieldBrowser, v))
}

// BrowserLTE applies the LTE predicate on the "browser" field.
func BrowserLTE(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLTE(FieldBrowser, v))
}

// BrowserContains applies the Contains predicate on the "browser" field.
func BrowserContains(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldContains(FieldBrowser, v))
}

// BrowserHasPrefix applies the HasPrefix predicate on the "browser" field.
func BrowserHasPrefix(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldHasPrefix(FieldBrowser, v))
}

// BrowserHasSuffix applies the HasSuffix predicate on the "browser" field.
func BrowserHasSuffix(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldHasSuffix(FieldBrowser, v))
}

// BrowserIsNil applies the IsNil predicate on the "browser" field.
func BrowserIsNil() predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIsNull(FieldBrowser))
}

// BrowserNotNil applies the NotNil predicate on the "browser" field.
func BrowserNotNil() predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotNull(FieldBrowser))
}

// BrowserEqualFold applies the EqualFold predicate on the "browser" field.
func BrowserEqualFold(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEqualFold(FieldBrowser, v))
}

// BrowserContainsFold applies the ContainsFold predicate on the "browser" field.
func BrowserContainsFold(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldContainsFold(FieldBrowser, v))
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldOs, v))
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNEQ(FieldOs, v))
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIn(FieldOs, vs...))
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotIn(FieldOs, vs...))
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGT(FieldOs, v))
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGTE(FieldOs, v))
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLT(FieldOs, v))
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLTE(FieldOs, v))
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldContains(FieldOs, v))
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldHasPrefix(FieldOs, v))
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldHasSuffix(FieldOs, v))
}

// OsIsNil applies the IsNil predicate on the "os" field.
func OsIsNil() predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIsNull(FieldOs))
}

// OsNotNil applies the NotNil predicate on the "os" field.
func OsNotNil() predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotNull(FieldOs))
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEqualFold(FieldOs, v))
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldContainsFold(FieldOs, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BannerStats {
	return predicate.BannerStats(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasBanner applies the HasEdge predicate on the "banner" edge.
func HasBanner() predicate.BannerStats {
	return predicate.BannerStats(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BannerTable, BannerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBannerWith applies the HasEdge predicate on the "banner" edge with a given conditions (other predicates).
func HasBannerWith(preds ...predicate.Banner) predicate.BannerStats {
	return predicate.BannerStats(func(s *sql.Selector) {
		step := newBannerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPublisher applies the HasEdge predicate on the "publisher" edge.
func HasPublisher() predicate.BannerStats {
	return predicate.BannerStats(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PublisherTable, PublisherColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPublisherWith applies the HasEdge predicate on the "publisher" edge with a given conditions (other predicates).
func HasPublisherWith(preds ...predicate.User) predicate.BannerStats {
	return predicate.BannerStats(func(s *sql.Selector) {
		step := newPublisherStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BannerStats) predicate.BannerStats {
	return predicate.BannerStats(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BannerStats) predicate.BannerStats {
	return predicate.BannerStats(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BannerStats) predicate.BannerStats {
	return predicate.BannerStats(sql.NotPredicates(p))
}
