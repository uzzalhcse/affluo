// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/banner"
	"affluo/ent/bannerstats"
	"affluo/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BannerStatsUpdate is the builder for updating BannerStats entities.
type BannerStatsUpdate struct {
	config
	hooks    []Hook
	mutation *BannerStatsMutation
}

// Where appends a list predicates to the BannerStatsUpdate builder.
func (bsu *BannerStatsUpdate) Where(ps ...predicate.BannerStats) *BannerStatsUpdate {
	bsu.mutation.Where(ps...)
	return bsu
}

// SetDate sets the "date" field.
func (bsu *BannerStatsUpdate) SetDate(t time.Time) *BannerStatsUpdate {
	bsu.mutation.SetDate(t)
	return bsu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (bsu *BannerStatsUpdate) SetNillableDate(t *time.Time) *BannerStatsUpdate {
	if t != nil {
		bsu.SetDate(*t)
	}
	return bsu
}

// SetImpressions sets the "impressions" field.
func (bsu *BannerStatsUpdate) SetImpressions(i int64) *BannerStatsUpdate {
	bsu.mutation.ResetImpressions()
	bsu.mutation.SetImpressions(i)
	return bsu
}

// SetNillableImpressions sets the "impressions" field if the given value is not nil.
func (bsu *BannerStatsUpdate) SetNillableImpressions(i *int64) *BannerStatsUpdate {
	if i != nil {
		bsu.SetImpressions(*i)
	}
	return bsu
}

// AddImpressions adds i to the "impressions" field.
func (bsu *BannerStatsUpdate) AddImpressions(i int64) *BannerStatsUpdate {
	bsu.mutation.AddImpressions(i)
	return bsu
}

// SetClicks sets the "clicks" field.
func (bsu *BannerStatsUpdate) SetClicks(i int64) *BannerStatsUpdate {
	bsu.mutation.ResetClicks()
	bsu.mutation.SetClicks(i)
	return bsu
}

// SetNillableClicks sets the "clicks" field if the given value is not nil.
func (bsu *BannerStatsUpdate) SetNillableClicks(i *int64) *BannerStatsUpdate {
	if i != nil {
		bsu.SetClicks(*i)
	}
	return bsu
}

// AddClicks adds i to the "clicks" field.
func (bsu *BannerStatsUpdate) AddClicks(i int64) *BannerStatsUpdate {
	bsu.mutation.AddClicks(i)
	return bsu
}

// SetLeads sets the "leads" field.
func (bsu *BannerStatsUpdate) SetLeads(i int64) *BannerStatsUpdate {
	bsu.mutation.ResetLeads()
	bsu.mutation.SetLeads(i)
	return bsu
}

// SetNillableLeads sets the "leads" field if the given value is not nil.
func (bsu *BannerStatsUpdate) SetNillableLeads(i *int64) *BannerStatsUpdate {
	if i != nil {
		bsu.SetLeads(*i)
	}
	return bsu
}

// AddLeads adds i to the "leads" field.
func (bsu *BannerStatsUpdate) AddLeads(i int64) *BannerStatsUpdate {
	bsu.mutation.AddLeads(i)
	return bsu
}

// SetCtr sets the "ctr" field.
func (bsu *BannerStatsUpdate) SetCtr(f float64) *BannerStatsUpdate {
	bsu.mutation.ResetCtr()
	bsu.mutation.SetCtr(f)
	return bsu
}

// SetNillableCtr sets the "ctr" field if the given value is not nil.
func (bsu *BannerStatsUpdate) SetNillableCtr(f *float64) *BannerStatsUpdate {
	if f != nil {
		bsu.SetCtr(*f)
	}
	return bsu
}

// AddCtr adds f to the "ctr" field.
func (bsu *BannerStatsUpdate) AddCtr(f float64) *BannerStatsUpdate {
	bsu.mutation.AddCtr(f)
	return bsu
}

// ClearCtr clears the value of the "ctr" field.
func (bsu *BannerStatsUpdate) ClearCtr() *BannerStatsUpdate {
	bsu.mutation.ClearCtr()
	return bsu
}

// SetConversionRate sets the "conversion_rate" field.
func (bsu *BannerStatsUpdate) SetConversionRate(f float64) *BannerStatsUpdate {
	bsu.mutation.ResetConversionRate()
	bsu.mutation.SetConversionRate(f)
	return bsu
}

// SetNillableConversionRate sets the "conversion_rate" field if the given value is not nil.
func (bsu *BannerStatsUpdate) SetNillableConversionRate(f *float64) *BannerStatsUpdate {
	if f != nil {
		bsu.SetConversionRate(*f)
	}
	return bsu
}

// AddConversionRate adds f to the "conversion_rate" field.
func (bsu *BannerStatsUpdate) AddConversionRate(f float64) *BannerStatsUpdate {
	bsu.mutation.AddConversionRate(f)
	return bsu
}

// ClearConversionRate clears the value of the "conversion_rate" field.
func (bsu *BannerStatsUpdate) ClearConversionRate() *BannerStatsUpdate {
	bsu.mutation.ClearConversionRate()
	return bsu
}

// SetCreatedAt sets the "created_at" field.
func (bsu *BannerStatsUpdate) SetCreatedAt(t time.Time) *BannerStatsUpdate {
	bsu.mutation.SetCreatedAt(t)
	return bsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bsu *BannerStatsUpdate) SetNillableCreatedAt(t *time.Time) *BannerStatsUpdate {
	if t != nil {
		bsu.SetCreatedAt(*t)
	}
	return bsu
}

// SetUpdatedAt sets the "updated_at" field.
func (bsu *BannerStatsUpdate) SetUpdatedAt(t time.Time) *BannerStatsUpdate {
	bsu.mutation.SetUpdatedAt(t)
	return bsu
}

// SetBannerID sets the "banner" edge to the Banner entity by ID.
func (bsu *BannerStatsUpdate) SetBannerID(id int64) *BannerStatsUpdate {
	bsu.mutation.SetBannerID(id)
	return bsu
}

// SetNillableBannerID sets the "banner" edge to the Banner entity by ID if the given value is not nil.
func (bsu *BannerStatsUpdate) SetNillableBannerID(id *int64) *BannerStatsUpdate {
	if id != nil {
		bsu = bsu.SetBannerID(*id)
	}
	return bsu
}

// SetBanner sets the "banner" edge to the Banner entity.
func (bsu *BannerStatsUpdate) SetBanner(b *Banner) *BannerStatsUpdate {
	return bsu.SetBannerID(b.ID)
}

// Mutation returns the BannerStatsMutation object of the builder.
func (bsu *BannerStatsUpdate) Mutation() *BannerStatsMutation {
	return bsu.mutation
}

// ClearBanner clears the "banner" edge to the Banner entity.
func (bsu *BannerStatsUpdate) ClearBanner() *BannerStatsUpdate {
	bsu.mutation.ClearBanner()
	return bsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bsu *BannerStatsUpdate) Save(ctx context.Context) (int, error) {
	bsu.defaults()
	return withHooks(ctx, bsu.sqlSave, bsu.mutation, bsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsu *BannerStatsUpdate) SaveX(ctx context.Context) int {
	affected, err := bsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bsu *BannerStatsUpdate) Exec(ctx context.Context) error {
	_, err := bsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsu *BannerStatsUpdate) ExecX(ctx context.Context) {
	if err := bsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsu *BannerStatsUpdate) defaults() {
	if _, ok := bsu.mutation.UpdatedAt(); !ok {
		v := bannerstats.UpdateDefaultUpdatedAt()
		bsu.mutation.SetUpdatedAt(v)
	}
}

func (bsu *BannerStatsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bannerstats.Table, bannerstats.Columns, sqlgraph.NewFieldSpec(bannerstats.FieldID, field.TypeInt64))
	if ps := bsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsu.mutation.Date(); ok {
		_spec.SetField(bannerstats.FieldDate, field.TypeTime, value)
	}
	if value, ok := bsu.mutation.Impressions(); ok {
		_spec.SetField(bannerstats.FieldImpressions, field.TypeInt64, value)
	}
	if value, ok := bsu.mutation.AddedImpressions(); ok {
		_spec.AddField(bannerstats.FieldImpressions, field.TypeInt64, value)
	}
	if value, ok := bsu.mutation.Clicks(); ok {
		_spec.SetField(bannerstats.FieldClicks, field.TypeInt64, value)
	}
	if value, ok := bsu.mutation.AddedClicks(); ok {
		_spec.AddField(bannerstats.FieldClicks, field.TypeInt64, value)
	}
	if value, ok := bsu.mutation.Leads(); ok {
		_spec.SetField(bannerstats.FieldLeads, field.TypeInt64, value)
	}
	if value, ok := bsu.mutation.AddedLeads(); ok {
		_spec.AddField(bannerstats.FieldLeads, field.TypeInt64, value)
	}
	if value, ok := bsu.mutation.Ctr(); ok {
		_spec.SetField(bannerstats.FieldCtr, field.TypeFloat64, value)
	}
	if value, ok := bsu.mutation.AddedCtr(); ok {
		_spec.AddField(bannerstats.FieldCtr, field.TypeFloat64, value)
	}
	if bsu.mutation.CtrCleared() {
		_spec.ClearField(bannerstats.FieldCtr, field.TypeFloat64)
	}
	if value, ok := bsu.mutation.ConversionRate(); ok {
		_spec.SetField(bannerstats.FieldConversionRate, field.TypeFloat64, value)
	}
	if value, ok := bsu.mutation.AddedConversionRate(); ok {
		_spec.AddField(bannerstats.FieldConversionRate, field.TypeFloat64, value)
	}
	if bsu.mutation.ConversionRateCleared() {
		_spec.ClearField(bannerstats.FieldConversionRate, field.TypeFloat64)
	}
	if value, ok := bsu.mutation.CreatedAt(); ok {
		_spec.SetField(bannerstats.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bsu.mutation.UpdatedAt(); ok {
		_spec.SetField(bannerstats.FieldUpdatedAt, field.TypeTime, value)
	}
	if bsu.mutation.BannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bannerstats.BannerTable,
			Columns: []string{bannerstats.BannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsu.mutation.BannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bannerstats.BannerTable,
			Columns: []string{bannerstats.BannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bannerstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bsu.mutation.done = true
	return n, nil
}

// BannerStatsUpdateOne is the builder for updating a single BannerStats entity.
type BannerStatsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BannerStatsMutation
}

// SetDate sets the "date" field.
func (bsuo *BannerStatsUpdateOne) SetDate(t time.Time) *BannerStatsUpdateOne {
	bsuo.mutation.SetDate(t)
	return bsuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (bsuo *BannerStatsUpdateOne) SetNillableDate(t *time.Time) *BannerStatsUpdateOne {
	if t != nil {
		bsuo.SetDate(*t)
	}
	return bsuo
}

// SetImpressions sets the "impressions" field.
func (bsuo *BannerStatsUpdateOne) SetImpressions(i int64) *BannerStatsUpdateOne {
	bsuo.mutation.ResetImpressions()
	bsuo.mutation.SetImpressions(i)
	return bsuo
}

// SetNillableImpressions sets the "impressions" field if the given value is not nil.
func (bsuo *BannerStatsUpdateOne) SetNillableImpressions(i *int64) *BannerStatsUpdateOne {
	if i != nil {
		bsuo.SetImpressions(*i)
	}
	return bsuo
}

// AddImpressions adds i to the "impressions" field.
func (bsuo *BannerStatsUpdateOne) AddImpressions(i int64) *BannerStatsUpdateOne {
	bsuo.mutation.AddImpressions(i)
	return bsuo
}

// SetClicks sets the "clicks" field.
func (bsuo *BannerStatsUpdateOne) SetClicks(i int64) *BannerStatsUpdateOne {
	bsuo.mutation.ResetClicks()
	bsuo.mutation.SetClicks(i)
	return bsuo
}

// SetNillableClicks sets the "clicks" field if the given value is not nil.
func (bsuo *BannerStatsUpdateOne) SetNillableClicks(i *int64) *BannerStatsUpdateOne {
	if i != nil {
		bsuo.SetClicks(*i)
	}
	return bsuo
}

// AddClicks adds i to the "clicks" field.
func (bsuo *BannerStatsUpdateOne) AddClicks(i int64) *BannerStatsUpdateOne {
	bsuo.mutation.AddClicks(i)
	return bsuo
}

// SetLeads sets the "leads" field.
func (bsuo *BannerStatsUpdateOne) SetLeads(i int64) *BannerStatsUpdateOne {
	bsuo.mutation.ResetLeads()
	bsuo.mutation.SetLeads(i)
	return bsuo
}

// SetNillableLeads sets the "leads" field if the given value is not nil.
func (bsuo *BannerStatsUpdateOne) SetNillableLeads(i *int64) *BannerStatsUpdateOne {
	if i != nil {
		bsuo.SetLeads(*i)
	}
	return bsuo
}

// AddLeads adds i to the "leads" field.
func (bsuo *BannerStatsUpdateOne) AddLeads(i int64) *BannerStatsUpdateOne {
	bsuo.mutation.AddLeads(i)
	return bsuo
}

// SetCtr sets the "ctr" field.
func (bsuo *BannerStatsUpdateOne) SetCtr(f float64) *BannerStatsUpdateOne {
	bsuo.mutation.ResetCtr()
	bsuo.mutation.SetCtr(f)
	return bsuo
}

// SetNillableCtr sets the "ctr" field if the given value is not nil.
func (bsuo *BannerStatsUpdateOne) SetNillableCtr(f *float64) *BannerStatsUpdateOne {
	if f != nil {
		bsuo.SetCtr(*f)
	}
	return bsuo
}

// AddCtr adds f to the "ctr" field.
func (bsuo *BannerStatsUpdateOne) AddCtr(f float64) *BannerStatsUpdateOne {
	bsuo.mutation.AddCtr(f)
	return bsuo
}

// ClearCtr clears the value of the "ctr" field.
func (bsuo *BannerStatsUpdateOne) ClearCtr() *BannerStatsUpdateOne {
	bsuo.mutation.ClearCtr()
	return bsuo
}

// SetConversionRate sets the "conversion_rate" field.
func (bsuo *BannerStatsUpdateOne) SetConversionRate(f float64) *BannerStatsUpdateOne {
	bsuo.mutation.ResetConversionRate()
	bsuo.mutation.SetConversionRate(f)
	return bsuo
}

// SetNillableConversionRate sets the "conversion_rate" field if the given value is not nil.
func (bsuo *BannerStatsUpdateOne) SetNillableConversionRate(f *float64) *BannerStatsUpdateOne {
	if f != nil {
		bsuo.SetConversionRate(*f)
	}
	return bsuo
}

// AddConversionRate adds f to the "conversion_rate" field.
func (bsuo *BannerStatsUpdateOne) AddConversionRate(f float64) *BannerStatsUpdateOne {
	bsuo.mutation.AddConversionRate(f)
	return bsuo
}

// ClearConversionRate clears the value of the "conversion_rate" field.
func (bsuo *BannerStatsUpdateOne) ClearConversionRate() *BannerStatsUpdateOne {
	bsuo.mutation.ClearConversionRate()
	return bsuo
}

// SetCreatedAt sets the "created_at" field.
func (bsuo *BannerStatsUpdateOne) SetCreatedAt(t time.Time) *BannerStatsUpdateOne {
	bsuo.mutation.SetCreatedAt(t)
	return bsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bsuo *BannerStatsUpdateOne) SetNillableCreatedAt(t *time.Time) *BannerStatsUpdateOne {
	if t != nil {
		bsuo.SetCreatedAt(*t)
	}
	return bsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bsuo *BannerStatsUpdateOne) SetUpdatedAt(t time.Time) *BannerStatsUpdateOne {
	bsuo.mutation.SetUpdatedAt(t)
	return bsuo
}

// SetBannerID sets the "banner" edge to the Banner entity by ID.
func (bsuo *BannerStatsUpdateOne) SetBannerID(id int64) *BannerStatsUpdateOne {
	bsuo.mutation.SetBannerID(id)
	return bsuo
}

// SetNillableBannerID sets the "banner" edge to the Banner entity by ID if the given value is not nil.
func (bsuo *BannerStatsUpdateOne) SetNillableBannerID(id *int64) *BannerStatsUpdateOne {
	if id != nil {
		bsuo = bsuo.SetBannerID(*id)
	}
	return bsuo
}

// SetBanner sets the "banner" edge to the Banner entity.
func (bsuo *BannerStatsUpdateOne) SetBanner(b *Banner) *BannerStatsUpdateOne {
	return bsuo.SetBannerID(b.ID)
}

// Mutation returns the BannerStatsMutation object of the builder.
func (bsuo *BannerStatsUpdateOne) Mutation() *BannerStatsMutation {
	return bsuo.mutation
}

// ClearBanner clears the "banner" edge to the Banner entity.
func (bsuo *BannerStatsUpdateOne) ClearBanner() *BannerStatsUpdateOne {
	bsuo.mutation.ClearBanner()
	return bsuo
}

// Where appends a list predicates to the BannerStatsUpdate builder.
func (bsuo *BannerStatsUpdateOne) Where(ps ...predicate.BannerStats) *BannerStatsUpdateOne {
	bsuo.mutation.Where(ps...)
	return bsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bsuo *BannerStatsUpdateOne) Select(field string, fields ...string) *BannerStatsUpdateOne {
	bsuo.fields = append([]string{field}, fields...)
	return bsuo
}

// Save executes the query and returns the updated BannerStats entity.
func (bsuo *BannerStatsUpdateOne) Save(ctx context.Context) (*BannerStats, error) {
	bsuo.defaults()
	return withHooks(ctx, bsuo.sqlSave, bsuo.mutation, bsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsuo *BannerStatsUpdateOne) SaveX(ctx context.Context) *BannerStats {
	node, err := bsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bsuo *BannerStatsUpdateOne) Exec(ctx context.Context) error {
	_, err := bsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsuo *BannerStatsUpdateOne) ExecX(ctx context.Context) {
	if err := bsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsuo *BannerStatsUpdateOne) defaults() {
	if _, ok := bsuo.mutation.UpdatedAt(); !ok {
		v := bannerstats.UpdateDefaultUpdatedAt()
		bsuo.mutation.SetUpdatedAt(v)
	}
}

func (bsuo *BannerStatsUpdateOne) sqlSave(ctx context.Context) (_node *BannerStats, err error) {
	_spec := sqlgraph.NewUpdateSpec(bannerstats.Table, bannerstats.Columns, sqlgraph.NewFieldSpec(bannerstats.FieldID, field.TypeInt64))
	id, ok := bsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BannerStats.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bannerstats.FieldID)
		for _, f := range fields {
			if !bannerstats.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bannerstats.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsuo.mutation.Date(); ok {
		_spec.SetField(bannerstats.FieldDate, field.TypeTime, value)
	}
	if value, ok := bsuo.mutation.Impressions(); ok {
		_spec.SetField(bannerstats.FieldImpressions, field.TypeInt64, value)
	}
	if value, ok := bsuo.mutation.AddedImpressions(); ok {
		_spec.AddField(bannerstats.FieldImpressions, field.TypeInt64, value)
	}
	if value, ok := bsuo.mutation.Clicks(); ok {
		_spec.SetField(bannerstats.FieldClicks, field.TypeInt64, value)
	}
	if value, ok := bsuo.mutation.AddedClicks(); ok {
		_spec.AddField(bannerstats.FieldClicks, field.TypeInt64, value)
	}
	if value, ok := bsuo.mutation.Leads(); ok {
		_spec.SetField(bannerstats.FieldLeads, field.TypeInt64, value)
	}
	if value, ok := bsuo.mutation.AddedLeads(); ok {
		_spec.AddField(bannerstats.FieldLeads, field.TypeInt64, value)
	}
	if value, ok := bsuo.mutation.Ctr(); ok {
		_spec.SetField(bannerstats.FieldCtr, field.TypeFloat64, value)
	}
	if value, ok := bsuo.mutation.AddedCtr(); ok {
		_spec.AddField(bannerstats.FieldCtr, field.TypeFloat64, value)
	}
	if bsuo.mutation.CtrCleared() {
		_spec.ClearField(bannerstats.FieldCtr, field.TypeFloat64)
	}
	if value, ok := bsuo.mutation.ConversionRate(); ok {
		_spec.SetField(bannerstats.FieldConversionRate, field.TypeFloat64, value)
	}
	if value, ok := bsuo.mutation.AddedConversionRate(); ok {
		_spec.AddField(bannerstats.FieldConversionRate, field.TypeFloat64, value)
	}
	if bsuo.mutation.ConversionRateCleared() {
		_spec.ClearField(bannerstats.FieldConversionRate, field.TypeFloat64)
	}
	if value, ok := bsuo.mutation.CreatedAt(); ok {
		_spec.SetField(bannerstats.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(bannerstats.FieldUpdatedAt, field.TypeTime, value)
	}
	if bsuo.mutation.BannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bannerstats.BannerTable,
			Columns: []string{bannerstats.BannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsuo.mutation.BannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bannerstats.BannerTable,
			Columns: []string{bannerstats.BannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BannerStats{config: bsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bannerstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bsuo.mutation.done = true
	return _node, nil
}
