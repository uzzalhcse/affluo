// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/gigtracking"
	"affluo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GigTrackingCreate is the builder for creating a GigTracking entity.
type GigTrackingCreate struct {
	config
	mutation *GigTrackingMutation
	hooks    []Hook
}

// SetDate sets the "date" field.
func (gtc *GigTrackingCreate) SetDate(t time.Time) *GigTrackingCreate {
	gtc.mutation.SetDate(t)
	return gtc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (gtc *GigTrackingCreate) SetNillableDate(t *time.Time) *GigTrackingCreate {
	if t != nil {
		gtc.SetDate(*t)
	}
	return gtc
}

// SetType sets the "type" field.
func (gtc *GigTrackingCreate) SetType(s string) *GigTrackingCreate {
	gtc.mutation.SetType(s)
	return gtc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (gtc *GigTrackingCreate) SetNillableType(s *string) *GigTrackingCreate {
	if s != nil {
		gtc.SetType(*s)
	}
	return gtc
}

// SetUtmQuery sets the "utm_query" field.
func (gtc *GigTrackingCreate) SetUtmQuery(s string) *GigTrackingCreate {
	gtc.mutation.SetUtmQuery(s)
	return gtc
}

// SetNillableUtmQuery sets the "utm_query" field if the given value is not nil.
func (gtc *GigTrackingCreate) SetNillableUtmQuery(s *string) *GigTrackingCreate {
	if s != nil {
		gtc.SetUtmQuery(*s)
	}
	return gtc
}

// SetLp sets the "lp" field.
func (gtc *GigTrackingCreate) SetLp(s string) *GigTrackingCreate {
	gtc.mutation.SetLp(s)
	return gtc
}

// SetNillableLp sets the "lp" field if the given value is not nil.
func (gtc *GigTrackingCreate) SetNillableLp(s *string) *GigTrackingCreate {
	if s != nil {
		gtc.SetLp(*s)
	}
	return gtc
}

// SetTrackID sets the "track_id" field.
func (gtc *GigTrackingCreate) SetTrackID(s string) *GigTrackingCreate {
	gtc.mutation.SetTrackID(s)
	return gtc
}

// SetNillableTrackID sets the "track_id" field if the given value is not nil.
func (gtc *GigTrackingCreate) SetNillableTrackID(s *string) *GigTrackingCreate {
	if s != nil {
		gtc.SetTrackID(*s)
	}
	return gtc
}

// SetRevenue sets the "revenue" field.
func (gtc *GigTrackingCreate) SetRevenue(f float64) *GigTrackingCreate {
	gtc.mutation.SetRevenue(f)
	return gtc
}

// SetNillableRevenue sets the "revenue" field if the given value is not nil.
func (gtc *GigTrackingCreate) SetNillableRevenue(f *float64) *GigTrackingCreate {
	if f != nil {
		gtc.SetRevenue(*f)
	}
	return gtc
}

// SetCreatedAt sets the "created_at" field.
func (gtc *GigTrackingCreate) SetCreatedAt(t time.Time) *GigTrackingCreate {
	gtc.mutation.SetCreatedAt(t)
	return gtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gtc *GigTrackingCreate) SetNillableCreatedAt(t *time.Time) *GigTrackingCreate {
	if t != nil {
		gtc.SetCreatedAt(*t)
	}
	return gtc
}

// SetUpdatedAt sets the "updated_at" field.
func (gtc *GigTrackingCreate) SetUpdatedAt(t time.Time) *GigTrackingCreate {
	gtc.mutation.SetUpdatedAt(t)
	return gtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gtc *GigTrackingCreate) SetNillableUpdatedAt(t *time.Time) *GigTrackingCreate {
	if t != nil {
		gtc.SetUpdatedAt(*t)
	}
	return gtc
}

// SetID sets the "id" field.
func (gtc *GigTrackingCreate) SetID(i int64) *GigTrackingCreate {
	gtc.mutation.SetID(i)
	return gtc
}

// SetPublisherID sets the "publisher" edge to the User entity by ID.
func (gtc *GigTrackingCreate) SetPublisherID(id int64) *GigTrackingCreate {
	gtc.mutation.SetPublisherID(id)
	return gtc
}

// SetPublisher sets the "publisher" edge to the User entity.
func (gtc *GigTrackingCreate) SetPublisher(u *User) *GigTrackingCreate {
	return gtc.SetPublisherID(u.ID)
}

// Mutation returns the GigTrackingMutation object of the builder.
func (gtc *GigTrackingCreate) Mutation() *GigTrackingMutation {
	return gtc.mutation
}

// Save creates the GigTracking in the database.
func (gtc *GigTrackingCreate) Save(ctx context.Context) (*GigTracking, error) {
	gtc.defaults()
	return withHooks(ctx, gtc.sqlSave, gtc.mutation, gtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gtc *GigTrackingCreate) SaveX(ctx context.Context) *GigTracking {
	v, err := gtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gtc *GigTrackingCreate) Exec(ctx context.Context) error {
	_, err := gtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtc *GigTrackingCreate) ExecX(ctx context.Context) {
	if err := gtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gtc *GigTrackingCreate) defaults() {
	if _, ok := gtc.mutation.Date(); !ok {
		v := gigtracking.DefaultDate()
		gtc.mutation.SetDate(v)
	}
	if _, ok := gtc.mutation.GetType(); !ok {
		v := gigtracking.DefaultType
		gtc.mutation.SetType(v)
	}
	if _, ok := gtc.mutation.Revenue(); !ok {
		v := gigtracking.DefaultRevenue
		gtc.mutation.SetRevenue(v)
	}
	if _, ok := gtc.mutation.CreatedAt(); !ok {
		v := gigtracking.DefaultCreatedAt()
		gtc.mutation.SetCreatedAt(v)
	}
	if _, ok := gtc.mutation.UpdatedAt(); !ok {
		v := gigtracking.DefaultUpdatedAt()
		gtc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gtc *GigTrackingCreate) check() error {
	if _, ok := gtc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "GigTracking.date"`)}
	}
	if _, ok := gtc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "GigTracking.type"`)}
	}
	if _, ok := gtc.mutation.Revenue(); !ok {
		return &ValidationError{Name: "revenue", err: errors.New(`ent: missing required field "GigTracking.revenue"`)}
	}
	if _, ok := gtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GigTracking.created_at"`)}
	}
	if _, ok := gtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GigTracking.updated_at"`)}
	}
	if len(gtc.mutation.PublisherIDs()) == 0 {
		return &ValidationError{Name: "publisher", err: errors.New(`ent: missing required edge "GigTracking.publisher"`)}
	}
	return nil
}

func (gtc *GigTrackingCreate) sqlSave(ctx context.Context) (*GigTracking, error) {
	if err := gtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	gtc.mutation.id = &_node.ID
	gtc.mutation.done = true
	return _node, nil
}

func (gtc *GigTrackingCreate) createSpec() (*GigTracking, *sqlgraph.CreateSpec) {
	var (
		_node = &GigTracking{config: gtc.config}
		_spec = sqlgraph.NewCreateSpec(gigtracking.Table, sqlgraph.NewFieldSpec(gigtracking.FieldID, field.TypeInt64))
	)
	if id, ok := gtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gtc.mutation.Date(); ok {
		_spec.SetField(gigtracking.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := gtc.mutation.GetType(); ok {
		_spec.SetField(gigtracking.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := gtc.mutation.UtmQuery(); ok {
		_spec.SetField(gigtracking.FieldUtmQuery, field.TypeString, value)
		_node.UtmQuery = value
	}
	if value, ok := gtc.mutation.Lp(); ok {
		_spec.SetField(gigtracking.FieldLp, field.TypeString, value)
		_node.Lp = value
	}
	if value, ok := gtc.mutation.TrackID(); ok {
		_spec.SetField(gigtracking.FieldTrackID, field.TypeString, value)
		_node.TrackID = value
	}
	if value, ok := gtc.mutation.Revenue(); ok {
		_spec.SetField(gigtracking.FieldRevenue, field.TypeFloat64, value)
		_node.Revenue = value
	}
	if value, ok := gtc.mutation.CreatedAt(); ok {
		_spec.SetField(gigtracking.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gtc.mutation.UpdatedAt(); ok {
		_spec.SetField(gigtracking.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := gtc.mutation.PublisherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gigtracking.PublisherTable,
			Columns: []string{gigtracking.PublisherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.gig_tracking_publisher = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GigTrackingCreateBulk is the builder for creating many GigTracking entities in bulk.
type GigTrackingCreateBulk struct {
	config
	err      error
	builders []*GigTrackingCreate
}

// Save creates the GigTracking entities in the database.
func (gtcb *GigTrackingCreateBulk) Save(ctx context.Context) ([]*GigTracking, error) {
	if gtcb.err != nil {
		return nil, gtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gtcb.builders))
	nodes := make([]*GigTracking, len(gtcb.builders))
	mutators := make([]Mutator, len(gtcb.builders))
	for i := range gtcb.builders {
		func(i int, root context.Context) {
			builder := gtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GigTrackingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gtcb *GigTrackingCreateBulk) SaveX(ctx context.Context) []*GigTracking {
	v, err := gtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gtcb *GigTrackingCreateBulk) Exec(ctx context.Context) error {
	_, err := gtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtcb *GigTrackingCreateBulk) ExecX(ctx context.Context) {
	if err := gtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
