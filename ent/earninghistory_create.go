// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/earninghistory"
	"affluo/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EarningHistoryCreate is the builder for creating a EarningHistory entity.
type EarningHistoryCreate struct {
	config
	mutation *EarningHistoryMutation
	hooks    []Hook
}

// SetAmount sets the "amount" field.
func (ehc *EarningHistoryCreate) SetAmount(f float64) *EarningHistoryCreate {
	ehc.mutation.SetAmount(f)
	return ehc
}

// SetEventType sets the "event_type" field.
func (ehc *EarningHistoryCreate) SetEventType(s string) *EarningHistoryCreate {
	ehc.mutation.SetEventType(s)
	return ehc
}

// SetSource sets the "source" field.
func (ehc *EarningHistoryCreate) SetSource(s string) *EarningHistoryCreate {
	ehc.mutation.SetSource(s)
	return ehc
}

// SetTrackID sets the "track_id" field.
func (ehc *EarningHistoryCreate) SetTrackID(s string) *EarningHistoryCreate {
	ehc.mutation.SetTrackID(s)
	return ehc
}

// SetNillableTrackID sets the "track_id" field if the given value is not nil.
func (ehc *EarningHistoryCreate) SetNillableTrackID(s *string) *EarningHistoryCreate {
	if s != nil {
		ehc.SetTrackID(*s)
	}
	return ehc
}

// SetDate sets the "date" field.
func (ehc *EarningHistoryCreate) SetDate(s string) *EarningHistoryCreate {
	ehc.mutation.SetDate(s)
	return ehc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ehc *EarningHistoryCreate) SetNillableDate(s *string) *EarningHistoryCreate {
	if s != nil {
		ehc.SetDate(*s)
	}
	return ehc
}

// SetID sets the "id" field.
func (ehc *EarningHistoryCreate) SetID(i int64) *EarningHistoryCreate {
	ehc.mutation.SetID(i)
	return ehc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ehc *EarningHistoryCreate) SetUserID(id int64) *EarningHistoryCreate {
	ehc.mutation.SetUserID(id)
	return ehc
}

// SetUser sets the "user" edge to the User entity.
func (ehc *EarningHistoryCreate) SetUser(u *User) *EarningHistoryCreate {
	return ehc.SetUserID(u.ID)
}

// Mutation returns the EarningHistoryMutation object of the builder.
func (ehc *EarningHistoryCreate) Mutation() *EarningHistoryMutation {
	return ehc.mutation
}

// Save creates the EarningHistory in the database.
func (ehc *EarningHistoryCreate) Save(ctx context.Context) (*EarningHistory, error) {
	ehc.defaults()
	return withHooks(ctx, ehc.sqlSave, ehc.mutation, ehc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ehc *EarningHistoryCreate) SaveX(ctx context.Context) *EarningHistory {
	v, err := ehc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ehc *EarningHistoryCreate) Exec(ctx context.Context) error {
	_, err := ehc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ehc *EarningHistoryCreate) ExecX(ctx context.Context) {
	if err := ehc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ehc *EarningHistoryCreate) defaults() {
	if _, ok := ehc.mutation.Date(); !ok {
		v := earninghistory.DefaultDate
		ehc.mutation.SetDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ehc *EarningHistoryCreate) check() error {
	if _, ok := ehc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "EarningHistory.amount"`)}
	}
	if _, ok := ehc.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "EarningHistory.event_type"`)}
	}
	if _, ok := ehc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "EarningHistory.source"`)}
	}
	if _, ok := ehc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "EarningHistory.date"`)}
	}
	if v, ok := ehc.mutation.ID(); ok {
		if err := earninghistory.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "EarningHistory.id": %w`, err)}
		}
	}
	if len(ehc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "EarningHistory.user"`)}
	}
	return nil
}

func (ehc *EarningHistoryCreate) sqlSave(ctx context.Context) (*EarningHistory, error) {
	if err := ehc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ehc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ehc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ehc.mutation.id = &_node.ID
	ehc.mutation.done = true
	return _node, nil
}

func (ehc *EarningHistoryCreate) createSpec() (*EarningHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &EarningHistory{config: ehc.config}
		_spec = sqlgraph.NewCreateSpec(earninghistory.Table, sqlgraph.NewFieldSpec(earninghistory.FieldID, field.TypeInt64))
	)
	if id, ok := ehc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ehc.mutation.Amount(); ok {
		_spec.SetField(earninghistory.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := ehc.mutation.EventType(); ok {
		_spec.SetField(earninghistory.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := ehc.mutation.Source(); ok {
		_spec.SetField(earninghistory.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := ehc.mutation.TrackID(); ok {
		_spec.SetField(earninghistory.FieldTrackID, field.TypeString, value)
		_node.TrackID = value
	}
	if value, ok := ehc.mutation.Date(); ok {
		_spec.SetField(earninghistory.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	if nodes := ehc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earninghistory.UserTable,
			Columns: []string{earninghistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_earning_histories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EarningHistoryCreateBulk is the builder for creating many EarningHistory entities in bulk.
type EarningHistoryCreateBulk struct {
	config
	err      error
	builders []*EarningHistoryCreate
}

// Save creates the EarningHistory entities in the database.
func (ehcb *EarningHistoryCreateBulk) Save(ctx context.Context) ([]*EarningHistory, error) {
	if ehcb.err != nil {
		return nil, ehcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ehcb.builders))
	nodes := make([]*EarningHistory, len(ehcb.builders))
	mutators := make([]Mutator, len(ehcb.builders))
	for i := range ehcb.builders {
		func(i int, root context.Context) {
			builder := ehcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EarningHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ehcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ehcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ehcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ehcb *EarningHistoryCreateBulk) SaveX(ctx context.Context) []*EarningHistory {
	v, err := ehcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ehcb *EarningHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ehcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ehcb *EarningHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ehcb.Exec(ctx); err != nil {
		panic(err)
	}
}
