// Code generated by ent, DO NOT EDIT.

package banner

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the banner type in the database.
	Label = "banner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldClickURL holds the string denoting the click_url field in the database.
	FieldClickURL = "click_url"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAllowedCountries holds the string denoting the allowed_countries field in the database.
	FieldAllowedCountries = "allowed_countries"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCampaigns holds the string denoting the campaigns edge name in mutations.
	EdgeCampaigns = "campaigns"
	// EdgeCreatives holds the string denoting the creatives edge name in mutations.
	EdgeCreatives = "creatives"
	// Table holds the table name of the banner in the database.
	Table = "banners"
	// CampaignsTable is the table that holds the campaigns relation/edge. The primary key declared below.
	CampaignsTable = "campaign_banners"
	// CampaignsInverseTable is the table name for the Campaign entity.
	// It exists in this package in order to avoid circular dependency with the "campaign" package.
	CampaignsInverseTable = "campaigns"
	// CreativesTable is the table that holds the creatives relation/edge.
	CreativesTable = "banner_creatives"
	// CreativesInverseTable is the table name for the BannerCreative entity.
	// It exists in this package in order to avoid circular dependency with the "bannercreative" package.
	CreativesInverseTable = "banner_creatives"
	// CreativesColumn is the table column denoting the creatives relation/edge.
	CreativesColumn = "banner_creatives"
)

// Columns holds all SQL columns for banner fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldType,
	FieldClickURL,
	FieldSize,
	FieldStatus,
	FieldAllowedCountries,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// CampaignsPrimaryKey and CampaignsColumn2 are the table columns denoting the
	// primary key for the campaigns relation (M2M).
	CampaignsPrimaryKey = []string{"campaign_id", "banner_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// Type defines the type for the "type" enum field.
type Type string

// TypeStatic is the default value of the Type enum.
const DefaultType = TypeStatic

// Type values.
const (
	TypeStatic  Type = "static"
	TypeDynamic Type = "dynamic"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeStatic, TypeDynamic:
		return nil
	default:
		return fmt.Errorf("banner: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusDraft is the default value of the Status enum.
const DefaultStatus = StatusDraft

// Status values.
const (
	StatusDraft    Status = "draft"
	StatusActive   Status = "active"
	StatusInactive Status = "inactive"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDraft, StatusActive, StatusInactive:
		return nil
	default:
		return fmt.Errorf("banner: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Banner queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByClickURL orders the results by the click_url field.
func ByClickURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClickURL, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCampaignsCount orders the results by campaigns count.
func ByCampaignsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCampaignsStep(), opts...)
	}
}

// ByCampaigns orders the results by campaigns terms.
func ByCampaigns(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCampaignsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreativesCount orders the results by creatives count.
func ByCreativesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreativesStep(), opts...)
	}
}

// ByCreatives orders the results by creatives terms.
func ByCreatives(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreativesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCampaignsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CampaignsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CampaignsTable, CampaignsPrimaryKey...),
	)
}
func newCreativesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreativesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreativesTable, CreativesColumn),
	)
}
