// Code generated by ent, DO NOT EDIT.

package banner

import (
	"affluo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Banner {
	return predicate.Banner(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Banner {
	return predicate.Banner(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Banner {
	return predicate.Banner(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Banner {
	return predicate.Banner(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldDescription, v))
}

// ClickURL applies equality check predicate on the "click_url" field. It's identical to ClickURLEQ.
func ClickURL(v string) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldClickURL, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v string) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldSize, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v int) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldWeight, v))
}

// SmartWeight applies equality check predicate on the "smart_weight" field. It's identical to SmartWeightEQ.
func SmartWeight(v float64) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldSmartWeight, v))
}

// LastImpression applies equality check predicate on the "last_impression" field. It's identical to LastImpressionEQ.
func LastImpression(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldLastImpression, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldEndDate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Banner {
	return predicate.Banner(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Banner {
	return predicate.Banner(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Banner {
	return predicate.Banner(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Banner {
	return predicate.Banner(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Banner {
	return predicate.Banner(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Banner {
	return predicate.Banner(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Banner {
	return predicate.Banner(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Banner {
	return predicate.Banner(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Banner {
	return predicate.Banner(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Banner {
	return predicate.Banner(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Banner {
	return predicate.Banner(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Banner {
	return predicate.Banner(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Banner {
	return predicate.Banner(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Banner {
	return predicate.Banner(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Banner {
	return predicate.Banner(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Banner {
	return predicate.Banner(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Banner {
	return predicate.Banner(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Banner {
	return predicate.Banner(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Banner {
	return predicate.Banner(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Banner {
	return predicate.Banner(sql.FieldContainsFold(FieldDescription, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldType, vs...))
}

// ClickURLEQ applies the EQ predicate on the "click_url" field.
func ClickURLEQ(v string) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldClickURL, v))
}

// ClickURLNEQ applies the NEQ predicate on the "click_url" field.
func ClickURLNEQ(v string) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldClickURL, v))
}

// ClickURLIn applies the In predicate on the "click_url" field.
func ClickURLIn(vs ...string) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldClickURL, vs...))
}

// ClickURLNotIn applies the NotIn predicate on the "click_url" field.
func ClickURLNotIn(vs ...string) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldClickURL, vs...))
}

// ClickURLGT applies the GT predicate on the "click_url" field.
func ClickURLGT(v string) predicate.Banner {
	return predicate.Banner(sql.FieldGT(FieldClickURL, v))
}

// ClickURLGTE applies the GTE predicate on the "click_url" field.
func ClickURLGTE(v string) predicate.Banner {
	return predicate.Banner(sql.FieldGTE(FieldClickURL, v))
}

// ClickURLLT applies the LT predicate on the "click_url" field.
func ClickURLLT(v string) predicate.Banner {
	return predicate.Banner(sql.FieldLT(FieldClickURL, v))
}

// ClickURLLTE applies the LTE predicate on the "click_url" field.
func ClickURLLTE(v string) predicate.Banner {
	return predicate.Banner(sql.FieldLTE(FieldClickURL, v))
}

// ClickURLContains applies the Contains predicate on the "click_url" field.
func ClickURLContains(v string) predicate.Banner {
	return predicate.Banner(sql.FieldContains(FieldClickURL, v))
}

// ClickURLHasPrefix applies the HasPrefix predicate on the "click_url" field.
func ClickURLHasPrefix(v string) predicate.Banner {
	return predicate.Banner(sql.FieldHasPrefix(FieldClickURL, v))
}

// ClickURLHasSuffix applies the HasSuffix predicate on the "click_url" field.
func ClickURLHasSuffix(v string) predicate.Banner {
	return predicate.Banner(sql.FieldHasSuffix(FieldClickURL, v))
}

// ClickURLIsNil applies the IsNil predicate on the "click_url" field.
func ClickURLIsNil() predicate.Banner {
	return predicate.Banner(sql.FieldIsNull(FieldClickURL))
}

// ClickURLNotNil applies the NotNil predicate on the "click_url" field.
func ClickURLNotNil() predicate.Banner {
	return predicate.Banner(sql.FieldNotNull(FieldClickURL))
}

// ClickURLEqualFold applies the EqualFold predicate on the "click_url" field.
func ClickURLEqualFold(v string) predicate.Banner {
	return predicate.Banner(sql.FieldEqualFold(FieldClickURL, v))
}

// ClickURLContainsFold applies the ContainsFold predicate on the "click_url" field.
func ClickURLContainsFold(v string) predicate.Banner {
	return predicate.Banner(sql.FieldContainsFold(FieldClickURL, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v string) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v string) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...string) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...string) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v string) predicate.Banner {
	return predicate.Banner(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v string) predicate.Banner {
	return predicate.Banner(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v string) predicate.Banner {
	return predicate.Banner(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v string) predicate.Banner {
	return predicate.Banner(sql.FieldLTE(FieldSize, v))
}

// SizeContains applies the Contains predicate on the "size" field.
func SizeContains(v string) predicate.Banner {
	return predicate.Banner(sql.FieldContains(FieldSize, v))
}

// SizeHasPrefix applies the HasPrefix predicate on the "size" field.
func SizeHasPrefix(v string) predicate.Banner {
	return predicate.Banner(sql.FieldHasPrefix(FieldSize, v))
}

// SizeHasSuffix applies the HasSuffix predicate on the "size" field.
func SizeHasSuffix(v string) predicate.Banner {
	return predicate.Banner(sql.FieldHasSuffix(FieldSize, v))
}

// SizeEqualFold applies the EqualFold predicate on the "size" field.
func SizeEqualFold(v string) predicate.Banner {
	return predicate.Banner(sql.FieldEqualFold(FieldSize, v))
}

// SizeContainsFold applies the ContainsFold predicate on the "size" field.
func SizeContainsFold(v string) predicate.Banner {
	return predicate.Banner(sql.FieldContainsFold(FieldSize, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldStatus, vs...))
}

// AllowedCountriesIsNil applies the IsNil predicate on the "allowed_countries" field.
func AllowedCountriesIsNil() predicate.Banner {
	return predicate.Banner(sql.FieldIsNull(FieldAllowedCountries))
}

// AllowedCountriesNotNil applies the NotNil predicate on the "allowed_countries" field.
func AllowedCountriesNotNil() predicate.Banner {
	return predicate.Banner(sql.FieldNotNull(FieldAllowedCountries))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v int) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v int) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...int) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...int) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v int) predicate.Banner {
	return predicate.Banner(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v int) predicate.Banner {
	return predicate.Banner(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v int) predicate.Banner {
	return predicate.Banner(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v int) predicate.Banner {
	return predicate.Banner(sql.FieldLTE(FieldWeight, v))
}

// SmartWeightEQ applies the EQ predicate on the "smart_weight" field.
func SmartWeightEQ(v float64) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldSmartWeight, v))
}

// SmartWeightNEQ applies the NEQ predicate on the "smart_weight" field.
func SmartWeightNEQ(v float64) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldSmartWeight, v))
}

// SmartWeightIn applies the In predicate on the "smart_weight" field.
func SmartWeightIn(vs ...float64) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldSmartWeight, vs...))
}

// SmartWeightNotIn applies the NotIn predicate on the "smart_weight" field.
func SmartWeightNotIn(vs ...float64) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldSmartWeight, vs...))
}

// SmartWeightGT applies the GT predicate on the "smart_weight" field.
func SmartWeightGT(v float64) predicate.Banner {
	return predicate.Banner(sql.FieldGT(FieldSmartWeight, v))
}

// SmartWeightGTE applies the GTE predicate on the "smart_weight" field.
func SmartWeightGTE(v float64) predicate.Banner {
	return predicate.Banner(sql.FieldGTE(FieldSmartWeight, v))
}

// SmartWeightLT applies the LT predicate on the "smart_weight" field.
func SmartWeightLT(v float64) predicate.Banner {
	return predicate.Banner(sql.FieldLT(FieldSmartWeight, v))
}

// SmartWeightLTE applies the LTE predicate on the "smart_weight" field.
func SmartWeightLTE(v float64) predicate.Banner {
	return predicate.Banner(sql.FieldLTE(FieldSmartWeight, v))
}

// SmartWeightIsNil applies the IsNil predicate on the "smart_weight" field.
func SmartWeightIsNil() predicate.Banner {
	return predicate.Banner(sql.FieldIsNull(FieldSmartWeight))
}

// SmartWeightNotNil applies the NotNil predicate on the "smart_weight" field.
func SmartWeightNotNil() predicate.Banner {
	return predicate.Banner(sql.FieldNotNull(FieldSmartWeight))
}

// LastImpressionEQ applies the EQ predicate on the "last_impression" field.
func LastImpressionEQ(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldLastImpression, v))
}

// LastImpressionNEQ applies the NEQ predicate on the "last_impression" field.
func LastImpressionNEQ(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldLastImpression, v))
}

// LastImpressionIn applies the In predicate on the "last_impression" field.
func LastImpressionIn(vs ...time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldLastImpression, vs...))
}

// LastImpressionNotIn applies the NotIn predicate on the "last_impression" field.
func LastImpressionNotIn(vs ...time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldLastImpression, vs...))
}

// LastImpressionGT applies the GT predicate on the "last_impression" field.
func LastImpressionGT(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldGT(FieldLastImpression, v))
}

// LastImpressionGTE applies the GTE predicate on the "last_impression" field.
func LastImpressionGTE(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldGTE(FieldLastImpression, v))
}

// LastImpressionLT applies the LT predicate on the "last_impression" field.
func LastImpressionLT(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldLT(FieldLastImpression, v))
}

// LastImpressionLTE applies the LTE predicate on the "last_impression" field.
func LastImpressionLTE(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldLTE(FieldLastImpression, v))
}

// LastImpressionIsNil applies the IsNil predicate on the "last_impression" field.
func LastImpressionIsNil() predicate.Banner {
	return predicate.Banner(sql.FieldIsNull(FieldLastImpression))
}

// LastImpressionNotNil applies the NotNil predicate on the "last_impression" field.
func LastImpressionNotNil() predicate.Banner {
	return predicate.Banner(sql.FieldNotNull(FieldLastImpression))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "start_date" field.
func StartDateIsNil() predicate.Banner {
	return predicate.Banner(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "start_date" field.
func StartDateNotNil() predicate.Banner {
	return predicate.Banner(sql.FieldNotNull(FieldStartDate))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Banner {
	return predicate.Banner(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Banner {
	return predicate.Banner(sql.FieldNotNull(FieldEndDate))
}

// AllowedDevicesIsNil applies the IsNil predicate on the "allowed_devices" field.
func AllowedDevicesIsNil() predicate.Banner {
	return predicate.Banner(sql.FieldIsNull(FieldAllowedDevices))
}

// AllowedDevicesNotNil applies the NotNil predicate on the "allowed_devices" field.
func AllowedDevicesNotNil() predicate.Banner {
	return predicate.Banner(sql.FieldNotNull(FieldAllowedDevices))
}

// AllowedBrowsersIsNil applies the IsNil predicate on the "allowed_browsers" field.
func AllowedBrowsersIsNil() predicate.Banner {
	return predicate.Banner(sql.FieldIsNull(FieldAllowedBrowsers))
}

// AllowedBrowsersNotNil applies the NotNil predicate on the "allowed_browsers" field.
func AllowedBrowsersNotNil() predicate.Banner {
	return predicate.Banner(sql.FieldNotNull(FieldAllowedBrowsers))
}

// AllowedOsIsNil applies the IsNil predicate on the "allowed_os" field.
func AllowedOsIsNil() predicate.Banner {
	return predicate.Banner(sql.FieldIsNull(FieldAllowedOs))
}

// AllowedOsNotNil applies the NotNil predicate on the "allowed_os" field.
func AllowedOsNotNil() predicate.Banner {
	return predicate.Banner(sql.FieldNotNull(FieldAllowedOs))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Banner {
	return predicate.Banner(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCampaigns applies the HasEdge predicate on the "campaigns" edge.
func HasCampaigns() predicate.Banner {
	return predicate.Banner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CampaignsTable, CampaignsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCampaignsWith applies the HasEdge predicate on the "campaigns" edge with a given conditions (other predicates).
func HasCampaignsWith(preds ...predicate.Campaign) predicate.Banner {
	return predicate.Banner(func(s *sql.Selector) {
		step := newCampaignsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatives applies the HasEdge predicate on the "creatives" edge.
func HasCreatives() predicate.Banner {
	return predicate.Banner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CreativesTable, CreativesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreativesWith applies the HasEdge predicate on the "creatives" edge with a given conditions (other predicates).
func HasCreativesWith(preds ...predicate.Creative) predicate.Banner {
	return predicate.Banner(func(s *sql.Selector) {
		step := newCreativesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStats applies the HasEdge predicate on the "stats" edge.
func HasStats() predicate.Banner {
	return predicate.Banner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatsTable, StatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatsWith applies the HasEdge predicate on the "stats" edge with a given conditions (other predicates).
func HasStatsWith(preds ...predicate.BannerStats) predicate.Banner {
	return predicate.Banner(func(s *sql.Selector) {
		step := newStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLeads applies the HasEdge predicate on the "leads" edge.
func HasLeads() predicate.Banner {
	return predicate.Banner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LeadsTable, LeadsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeadsWith applies the HasEdge predicate on the "leads" edge with a given conditions (other predicates).
func HasLeadsWith(preds ...predicate.Lead) predicate.Banner {
	return predicate.Banner(func(s *sql.Selector) {
		step := newLeadsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBannerCreatives applies the HasEdge predicate on the "banner_creatives" edge.
func HasBannerCreatives() predicate.Banner {
	return predicate.Banner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BannerCreativesTable, BannerCreativesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBannerCreativesWith applies the HasEdge predicate on the "banner_creatives" edge with a given conditions (other predicates).
func HasBannerCreativesWith(preds ...predicate.BannerCreative) predicate.Banner {
	return predicate.Banner(func(s *sql.Selector) {
		step := newBannerCreativesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Banner) predicate.Banner {
	return predicate.Banner(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Banner) predicate.Banner {
	return predicate.Banner(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Banner) predicate.Banner {
	return predicate.Banner(sql.NotPredicates(p))
}
