// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/commissionhistory"
	"affluo/ent/predicate"
	"affluo/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommissionHistoryUpdate is the builder for updating CommissionHistory entities.
type CommissionHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *CommissionHistoryMutation
}

// Where appends a list predicates to the CommissionHistoryUpdate builder.
func (chu *CommissionHistoryUpdate) Where(ps ...predicate.CommissionHistory) *CommissionHistoryUpdate {
	chu.mutation.Where(ps...)
	return chu
}

// SetAmount sets the "amount" field.
func (chu *CommissionHistoryUpdate) SetAmount(f float64) *CommissionHistoryUpdate {
	chu.mutation.ResetAmount()
	chu.mutation.SetAmount(f)
	return chu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (chu *CommissionHistoryUpdate) SetNillableAmount(f *float64) *CommissionHistoryUpdate {
	if f != nil {
		chu.SetAmount(*f)
	}
	return chu
}

// AddAmount adds f to the "amount" field.
func (chu *CommissionHistoryUpdate) AddAmount(f float64) *CommissionHistoryUpdate {
	chu.mutation.AddAmount(f)
	return chu
}

// SetAffiliateUserID sets the "affiliate_user_id" field.
func (chu *CommissionHistoryUpdate) SetAffiliateUserID(s string) *CommissionHistoryUpdate {
	chu.mutation.SetAffiliateUserID(s)
	return chu
}

// SetNillableAffiliateUserID sets the "affiliate_user_id" field if the given value is not nil.
func (chu *CommissionHistoryUpdate) SetNillableAffiliateUserID(s *string) *CommissionHistoryUpdate {
	if s != nil {
		chu.SetAffiliateUserID(*s)
	}
	return chu
}

// SetTrxID sets the "trx_id" field.
func (chu *CommissionHistoryUpdate) SetTrxID(s string) *CommissionHistoryUpdate {
	chu.mutation.SetTrxID(s)
	return chu
}

// SetNillableTrxID sets the "trx_id" field if the given value is not nil.
func (chu *CommissionHistoryUpdate) SetNillableTrxID(s *string) *CommissionHistoryUpdate {
	if s != nil {
		chu.SetTrxID(*s)
	}
	return chu
}

// ClearTrxID clears the value of the "trx_id" field.
func (chu *CommissionHistoryUpdate) ClearTrxID() *CommissionHistoryUpdate {
	chu.mutation.ClearTrxID()
	return chu
}

// SetTrackID sets the "track_id" field.
func (chu *CommissionHistoryUpdate) SetTrackID(s string) *CommissionHistoryUpdate {
	chu.mutation.SetTrackID(s)
	return chu
}

// SetNillableTrackID sets the "track_id" field if the given value is not nil.
func (chu *CommissionHistoryUpdate) SetNillableTrackID(s *string) *CommissionHistoryUpdate {
	if s != nil {
		chu.SetTrackID(*s)
	}
	return chu
}

// ClearTrackID clears the value of the "track_id" field.
func (chu *CommissionHistoryUpdate) ClearTrackID() *CommissionHistoryUpdate {
	chu.mutation.ClearTrackID()
	return chu
}

// SetCommissionRate sets the "commission_rate" field.
func (chu *CommissionHistoryUpdate) SetCommissionRate(f float64) *CommissionHistoryUpdate {
	chu.mutation.ResetCommissionRate()
	chu.mutation.SetCommissionRate(f)
	return chu
}

// SetNillableCommissionRate sets the "commission_rate" field if the given value is not nil.
func (chu *CommissionHistoryUpdate) SetNillableCommissionRate(f *float64) *CommissionHistoryUpdate {
	if f != nil {
		chu.SetCommissionRate(*f)
	}
	return chu
}

// AddCommissionRate adds f to the "commission_rate" field.
func (chu *CommissionHistoryUpdate) AddCommissionRate(f float64) *CommissionHistoryUpdate {
	chu.mutation.AddCommissionRate(f)
	return chu
}

// SetIsFirstOrder sets the "is_first_order" field.
func (chu *CommissionHistoryUpdate) SetIsFirstOrder(b bool) *CommissionHistoryUpdate {
	chu.mutation.SetIsFirstOrder(b)
	return chu
}

// SetNillableIsFirstOrder sets the "is_first_order" field if the given value is not nil.
func (chu *CommissionHistoryUpdate) SetNillableIsFirstOrder(b *bool) *CommissionHistoryUpdate {
	if b != nil {
		chu.SetIsFirstOrder(*b)
	}
	return chu
}

// SetDate sets the "date" field.
func (chu *CommissionHistoryUpdate) SetDate(s string) *CommissionHistoryUpdate {
	chu.mutation.SetDate(s)
	return chu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (chu *CommissionHistoryUpdate) SetNillableDate(s *string) *CommissionHistoryUpdate {
	if s != nil {
		chu.SetDate(*s)
	}
	return chu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (chu *CommissionHistoryUpdate) SetUserID(id int64) *CommissionHistoryUpdate {
	chu.mutation.SetUserID(id)
	return chu
}

// SetUser sets the "user" edge to the User entity.
func (chu *CommissionHistoryUpdate) SetUser(u *User) *CommissionHistoryUpdate {
	return chu.SetUserID(u.ID)
}

// Mutation returns the CommissionHistoryMutation object of the builder.
func (chu *CommissionHistoryUpdate) Mutation() *CommissionHistoryMutation {
	return chu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (chu *CommissionHistoryUpdate) ClearUser() *CommissionHistoryUpdate {
	chu.mutation.ClearUser()
	return chu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (chu *CommissionHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, chu.sqlSave, chu.mutation, chu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chu *CommissionHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := chu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (chu *CommissionHistoryUpdate) Exec(ctx context.Context) error {
	_, err := chu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chu *CommissionHistoryUpdate) ExecX(ctx context.Context) {
	if err := chu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chu *CommissionHistoryUpdate) check() error {
	if chu.mutation.UserCleared() && len(chu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CommissionHistory.user"`)
	}
	return nil
}

func (chu *CommissionHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := chu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(commissionhistory.Table, commissionhistory.Columns, sqlgraph.NewFieldSpec(commissionhistory.FieldID, field.TypeInt64))
	if ps := chu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chu.mutation.Amount(); ok {
		_spec.SetField(commissionhistory.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := chu.mutation.AddedAmount(); ok {
		_spec.AddField(commissionhistory.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := chu.mutation.AffiliateUserID(); ok {
		_spec.SetField(commissionhistory.FieldAffiliateUserID, field.TypeString, value)
	}
	if value, ok := chu.mutation.TrxID(); ok {
		_spec.SetField(commissionhistory.FieldTrxID, field.TypeString, value)
	}
	if chu.mutation.TrxIDCleared() {
		_spec.ClearField(commissionhistory.FieldTrxID, field.TypeString)
	}
	if value, ok := chu.mutation.TrackID(); ok {
		_spec.SetField(commissionhistory.FieldTrackID, field.TypeString, value)
	}
	if chu.mutation.TrackIDCleared() {
		_spec.ClearField(commissionhistory.FieldTrackID, field.TypeString)
	}
	if value, ok := chu.mutation.CommissionRate(); ok {
		_spec.SetField(commissionhistory.FieldCommissionRate, field.TypeFloat64, value)
	}
	if value, ok := chu.mutation.AddedCommissionRate(); ok {
		_spec.AddField(commissionhistory.FieldCommissionRate, field.TypeFloat64, value)
	}
	if value, ok := chu.mutation.IsFirstOrder(); ok {
		_spec.SetField(commissionhistory.FieldIsFirstOrder, field.TypeBool, value)
	}
	if value, ok := chu.mutation.Date(); ok {
		_spec.SetField(commissionhistory.FieldDate, field.TypeString, value)
	}
	if chu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commissionhistory.UserTable,
			Columns: []string{commissionhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commissionhistory.UserTable,
			Columns: []string{commissionhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, chu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commissionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	chu.mutation.done = true
	return n, nil
}

// CommissionHistoryUpdateOne is the builder for updating a single CommissionHistory entity.
type CommissionHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommissionHistoryMutation
}

// SetAmount sets the "amount" field.
func (chuo *CommissionHistoryUpdateOne) SetAmount(f float64) *CommissionHistoryUpdateOne {
	chuo.mutation.ResetAmount()
	chuo.mutation.SetAmount(f)
	return chuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (chuo *CommissionHistoryUpdateOne) SetNillableAmount(f *float64) *CommissionHistoryUpdateOne {
	if f != nil {
		chuo.SetAmount(*f)
	}
	return chuo
}

// AddAmount adds f to the "amount" field.
func (chuo *CommissionHistoryUpdateOne) AddAmount(f float64) *CommissionHistoryUpdateOne {
	chuo.mutation.AddAmount(f)
	return chuo
}

// SetAffiliateUserID sets the "affiliate_user_id" field.
func (chuo *CommissionHistoryUpdateOne) SetAffiliateUserID(s string) *CommissionHistoryUpdateOne {
	chuo.mutation.SetAffiliateUserID(s)
	return chuo
}

// SetNillableAffiliateUserID sets the "affiliate_user_id" field if the given value is not nil.
func (chuo *CommissionHistoryUpdateOne) SetNillableAffiliateUserID(s *string) *CommissionHistoryUpdateOne {
	if s != nil {
		chuo.SetAffiliateUserID(*s)
	}
	return chuo
}

// SetTrxID sets the "trx_id" field.
func (chuo *CommissionHistoryUpdateOne) SetTrxID(s string) *CommissionHistoryUpdateOne {
	chuo.mutation.SetTrxID(s)
	return chuo
}

// SetNillableTrxID sets the "trx_id" field if the given value is not nil.
func (chuo *CommissionHistoryUpdateOne) SetNillableTrxID(s *string) *CommissionHistoryUpdateOne {
	if s != nil {
		chuo.SetTrxID(*s)
	}
	return chuo
}

// ClearTrxID clears the value of the "trx_id" field.
func (chuo *CommissionHistoryUpdateOne) ClearTrxID() *CommissionHistoryUpdateOne {
	chuo.mutation.ClearTrxID()
	return chuo
}

// SetTrackID sets the "track_id" field.
func (chuo *CommissionHistoryUpdateOne) SetTrackID(s string) *CommissionHistoryUpdateOne {
	chuo.mutation.SetTrackID(s)
	return chuo
}

// SetNillableTrackID sets the "track_id" field if the given value is not nil.
func (chuo *CommissionHistoryUpdateOne) SetNillableTrackID(s *string) *CommissionHistoryUpdateOne {
	if s != nil {
		chuo.SetTrackID(*s)
	}
	return chuo
}

// ClearTrackID clears the value of the "track_id" field.
func (chuo *CommissionHistoryUpdateOne) ClearTrackID() *CommissionHistoryUpdateOne {
	chuo.mutation.ClearTrackID()
	return chuo
}

// SetCommissionRate sets the "commission_rate" field.
func (chuo *CommissionHistoryUpdateOne) SetCommissionRate(f float64) *CommissionHistoryUpdateOne {
	chuo.mutation.ResetCommissionRate()
	chuo.mutation.SetCommissionRate(f)
	return chuo
}

// SetNillableCommissionRate sets the "commission_rate" field if the given value is not nil.
func (chuo *CommissionHistoryUpdateOne) SetNillableCommissionRate(f *float64) *CommissionHistoryUpdateOne {
	if f != nil {
		chuo.SetCommissionRate(*f)
	}
	return chuo
}

// AddCommissionRate adds f to the "commission_rate" field.
func (chuo *CommissionHistoryUpdateOne) AddCommissionRate(f float64) *CommissionHistoryUpdateOne {
	chuo.mutation.AddCommissionRate(f)
	return chuo
}

// SetIsFirstOrder sets the "is_first_order" field.
func (chuo *CommissionHistoryUpdateOne) SetIsFirstOrder(b bool) *CommissionHistoryUpdateOne {
	chuo.mutation.SetIsFirstOrder(b)
	return chuo
}

// SetNillableIsFirstOrder sets the "is_first_order" field if the given value is not nil.
func (chuo *CommissionHistoryUpdateOne) SetNillableIsFirstOrder(b *bool) *CommissionHistoryUpdateOne {
	if b != nil {
		chuo.SetIsFirstOrder(*b)
	}
	return chuo
}

// SetDate sets the "date" field.
func (chuo *CommissionHistoryUpdateOne) SetDate(s string) *CommissionHistoryUpdateOne {
	chuo.mutation.SetDate(s)
	return chuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (chuo *CommissionHistoryUpdateOne) SetNillableDate(s *string) *CommissionHistoryUpdateOne {
	if s != nil {
		chuo.SetDate(*s)
	}
	return chuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (chuo *CommissionHistoryUpdateOne) SetUserID(id int64) *CommissionHistoryUpdateOne {
	chuo.mutation.SetUserID(id)
	return chuo
}

// SetUser sets the "user" edge to the User entity.
func (chuo *CommissionHistoryUpdateOne) SetUser(u *User) *CommissionHistoryUpdateOne {
	return chuo.SetUserID(u.ID)
}

// Mutation returns the CommissionHistoryMutation object of the builder.
func (chuo *CommissionHistoryUpdateOne) Mutation() *CommissionHistoryMutation {
	return chuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (chuo *CommissionHistoryUpdateOne) ClearUser() *CommissionHistoryUpdateOne {
	chuo.mutation.ClearUser()
	return chuo
}

// Where appends a list predicates to the CommissionHistoryUpdate builder.
func (chuo *CommissionHistoryUpdateOne) Where(ps ...predicate.CommissionHistory) *CommissionHistoryUpdateOne {
	chuo.mutation.Where(ps...)
	return chuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (chuo *CommissionHistoryUpdateOne) Select(field string, fields ...string) *CommissionHistoryUpdateOne {
	chuo.fields = append([]string{field}, fields...)
	return chuo
}

// Save executes the query and returns the updated CommissionHistory entity.
func (chuo *CommissionHistoryUpdateOne) Save(ctx context.Context) (*CommissionHistory, error) {
	return withHooks(ctx, chuo.sqlSave, chuo.mutation, chuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chuo *CommissionHistoryUpdateOne) SaveX(ctx context.Context) *CommissionHistory {
	node, err := chuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (chuo *CommissionHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := chuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chuo *CommissionHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := chuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chuo *CommissionHistoryUpdateOne) check() error {
	if chuo.mutation.UserCleared() && len(chuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CommissionHistory.user"`)
	}
	return nil
}

func (chuo *CommissionHistoryUpdateOne) sqlSave(ctx context.Context) (_node *CommissionHistory, err error) {
	if err := chuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(commissionhistory.Table, commissionhistory.Columns, sqlgraph.NewFieldSpec(commissionhistory.FieldID, field.TypeInt64))
	id, ok := chuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommissionHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := chuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commissionhistory.FieldID)
		for _, f := range fields {
			if !commissionhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commissionhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := chuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chuo.mutation.Amount(); ok {
		_spec.SetField(commissionhistory.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := chuo.mutation.AddedAmount(); ok {
		_spec.AddField(commissionhistory.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := chuo.mutation.AffiliateUserID(); ok {
		_spec.SetField(commissionhistory.FieldAffiliateUserID, field.TypeString, value)
	}
	if value, ok := chuo.mutation.TrxID(); ok {
		_spec.SetField(commissionhistory.FieldTrxID, field.TypeString, value)
	}
	if chuo.mutation.TrxIDCleared() {
		_spec.ClearField(commissionhistory.FieldTrxID, field.TypeString)
	}
	if value, ok := chuo.mutation.TrackID(); ok {
		_spec.SetField(commissionhistory.FieldTrackID, field.TypeString, value)
	}
	if chuo.mutation.TrackIDCleared() {
		_spec.ClearField(commissionhistory.FieldTrackID, field.TypeString)
	}
	if value, ok := chuo.mutation.CommissionRate(); ok {
		_spec.SetField(commissionhistory.FieldCommissionRate, field.TypeFloat64, value)
	}
	if value, ok := chuo.mutation.AddedCommissionRate(); ok {
		_spec.AddField(commissionhistory.FieldCommissionRate, field.TypeFloat64, value)
	}
	if value, ok := chuo.mutation.IsFirstOrder(); ok {
		_spec.SetField(commissionhistory.FieldIsFirstOrder, field.TypeBool, value)
	}
	if value, ok := chuo.mutation.Date(); ok {
		_spec.SetField(commissionhistory.FieldDate, field.TypeString, value)
	}
	if chuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commissionhistory.UserTable,
			Columns: []string{commissionhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commissionhistory.UserTable,
			Columns: []string{commissionhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CommissionHistory{config: chuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, chuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commissionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	chuo.mutation.done = true
	return _node, nil
}
