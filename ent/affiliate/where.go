// Code generated by ent, DO NOT EDIT.

package affiliate

import (
	"affluo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLTE(FieldID, id))
}

// TrackingCode applies equality check predicate on the "tracking_code" field. It's identical to TrackingCodeEQ.
func TrackingCode(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldTrackingCode, v))
}

// AffiliateUserID applies equality check predicate on the "affiliate_user_id" field. It's identical to AffiliateUserIDEQ.
func AffiliateUserID(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldAffiliateUserID, v))
}

// RegistrationDate applies equality check predicate on the "registration_date" field. It's identical to RegistrationDateEQ.
func RegistrationDate(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldRegistrationDate, v))
}

// FirstTransactionDate applies equality check predicate on the "first_transaction_date" field. It's identical to FirstTransactionDateEQ.
func FirstTransactionDate(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldFirstTransactionDate, v))
}

// Commission applies equality check predicate on the "commission" field. It's identical to CommissionEQ.
func Commission(v float64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldCommission, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldDate, v))
}

// TrackingCodeEQ applies the EQ predicate on the "tracking_code" field.
func TrackingCodeEQ(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldTrackingCode, v))
}

// TrackingCodeNEQ applies the NEQ predicate on the "tracking_code" field.
func TrackingCodeNEQ(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNEQ(FieldTrackingCode, v))
}

// TrackingCodeIn applies the In predicate on the "tracking_code" field.
func TrackingCodeIn(vs ...string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldIn(FieldTrackingCode, vs...))
}

// TrackingCodeNotIn applies the NotIn predicate on the "tracking_code" field.
func TrackingCodeNotIn(vs ...string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNotIn(FieldTrackingCode, vs...))
}

// TrackingCodeGT applies the GT predicate on the "tracking_code" field.
func TrackingCodeGT(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGT(FieldTrackingCode, v))
}

// TrackingCodeGTE applies the GTE predicate on the "tracking_code" field.
func TrackingCodeGTE(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGTE(FieldTrackingCode, v))
}

// TrackingCodeLT applies the LT predicate on the "tracking_code" field.
func TrackingCodeLT(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLT(FieldTrackingCode, v))
}

// TrackingCodeLTE applies the LTE predicate on the "tracking_code" field.
func TrackingCodeLTE(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLTE(FieldTrackingCode, v))
}

// TrackingCodeContains applies the Contains predicate on the "tracking_code" field.
func TrackingCodeContains(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldContains(FieldTrackingCode, v))
}

// TrackingCodeHasPrefix applies the HasPrefix predicate on the "tracking_code" field.
func TrackingCodeHasPrefix(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldHasPrefix(FieldTrackingCode, v))
}

// TrackingCodeHasSuffix applies the HasSuffix predicate on the "tracking_code" field.
func TrackingCodeHasSuffix(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldHasSuffix(FieldTrackingCode, v))
}

// TrackingCodeIsNil applies the IsNil predicate on the "tracking_code" field.
func TrackingCodeIsNil() predicate.Affiliate {
	return predicate.Affiliate(sql.FieldIsNull(FieldTrackingCode))
}

// TrackingCodeNotNil applies the NotNil predicate on the "tracking_code" field.
func TrackingCodeNotNil() predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNotNull(FieldTrackingCode))
}

// TrackingCodeEqualFold applies the EqualFold predicate on the "tracking_code" field.
func TrackingCodeEqualFold(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEqualFold(FieldTrackingCode, v))
}

// TrackingCodeContainsFold applies the ContainsFold predicate on the "tracking_code" field.
func TrackingCodeContainsFold(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldContainsFold(FieldTrackingCode, v))
}

// AffiliateUserIDEQ applies the EQ predicate on the "affiliate_user_id" field.
func AffiliateUserIDEQ(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldAffiliateUserID, v))
}

// AffiliateUserIDNEQ applies the NEQ predicate on the "affiliate_user_id" field.
func AffiliateUserIDNEQ(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNEQ(FieldAffiliateUserID, v))
}

// AffiliateUserIDIn applies the In predicate on the "affiliate_user_id" field.
func AffiliateUserIDIn(vs ...string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldIn(FieldAffiliateUserID, vs...))
}

// AffiliateUserIDNotIn applies the NotIn predicate on the "affiliate_user_id" field.
func AffiliateUserIDNotIn(vs ...string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNotIn(FieldAffiliateUserID, vs...))
}

// AffiliateUserIDGT applies the GT predicate on the "affiliate_user_id" field.
func AffiliateUserIDGT(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGT(FieldAffiliateUserID, v))
}

// AffiliateUserIDGTE applies the GTE predicate on the "affiliate_user_id" field.
func AffiliateUserIDGTE(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGTE(FieldAffiliateUserID, v))
}

// AffiliateUserIDLT applies the LT predicate on the "affiliate_user_id" field.
func AffiliateUserIDLT(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLT(FieldAffiliateUserID, v))
}

// AffiliateUserIDLTE applies the LTE predicate on the "affiliate_user_id" field.
func AffiliateUserIDLTE(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLTE(FieldAffiliateUserID, v))
}

// AffiliateUserIDContains applies the Contains predicate on the "affiliate_user_id" field.
func AffiliateUserIDContains(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldContains(FieldAffiliateUserID, v))
}

// AffiliateUserIDHasPrefix applies the HasPrefix predicate on the "affiliate_user_id" field.
func AffiliateUserIDHasPrefix(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldHasPrefix(FieldAffiliateUserID, v))
}

// AffiliateUserIDHasSuffix applies the HasSuffix predicate on the "affiliate_user_id" field.
func AffiliateUserIDHasSuffix(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldHasSuffix(FieldAffiliateUserID, v))
}

// AffiliateUserIDEqualFold applies the EqualFold predicate on the "affiliate_user_id" field.
func AffiliateUserIDEqualFold(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEqualFold(FieldAffiliateUserID, v))
}

// AffiliateUserIDContainsFold applies the ContainsFold predicate on the "affiliate_user_id" field.
func AffiliateUserIDContainsFold(v string) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldContainsFold(FieldAffiliateUserID, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v Source) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v Source) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...Source) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...Source) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNotIn(FieldSource, vs...))
}

// RegistrationDateEQ applies the EQ predicate on the "registration_date" field.
func RegistrationDateEQ(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldRegistrationDate, v))
}

// RegistrationDateNEQ applies the NEQ predicate on the "registration_date" field.
func RegistrationDateNEQ(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNEQ(FieldRegistrationDate, v))
}

// RegistrationDateIn applies the In predicate on the "registration_date" field.
func RegistrationDateIn(vs ...time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldIn(FieldRegistrationDate, vs...))
}

// RegistrationDateNotIn applies the NotIn predicate on the "registration_date" field.
func RegistrationDateNotIn(vs ...time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNotIn(FieldRegistrationDate, vs...))
}

// RegistrationDateGT applies the GT predicate on the "registration_date" field.
func RegistrationDateGT(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGT(FieldRegistrationDate, v))
}

// RegistrationDateGTE applies the GTE predicate on the "registration_date" field.
func RegistrationDateGTE(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGTE(FieldRegistrationDate, v))
}

// RegistrationDateLT applies the LT predicate on the "registration_date" field.
func RegistrationDateLT(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLT(FieldRegistrationDate, v))
}

// RegistrationDateLTE applies the LTE predicate on the "registration_date" field.
func RegistrationDateLTE(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLTE(FieldRegistrationDate, v))
}

// FirstTransactionDateEQ applies the EQ predicate on the "first_transaction_date" field.
func FirstTransactionDateEQ(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldFirstTransactionDate, v))
}

// FirstTransactionDateNEQ applies the NEQ predicate on the "first_transaction_date" field.
func FirstTransactionDateNEQ(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNEQ(FieldFirstTransactionDate, v))
}

// FirstTransactionDateIn applies the In predicate on the "first_transaction_date" field.
func FirstTransactionDateIn(vs ...time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldIn(FieldFirstTransactionDate, vs...))
}

// FirstTransactionDateNotIn applies the NotIn predicate on the "first_transaction_date" field.
func FirstTransactionDateNotIn(vs ...time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNotIn(FieldFirstTransactionDate, vs...))
}

// FirstTransactionDateGT applies the GT predicate on the "first_transaction_date" field.
func FirstTransactionDateGT(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGT(FieldFirstTransactionDate, v))
}

// FirstTransactionDateGTE applies the GTE predicate on the "first_transaction_date" field.
func FirstTransactionDateGTE(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGTE(FieldFirstTransactionDate, v))
}

// FirstTransactionDateLT applies the LT predicate on the "first_transaction_date" field.
func FirstTransactionDateLT(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLT(FieldFirstTransactionDate, v))
}

// FirstTransactionDateLTE applies the LTE predicate on the "first_transaction_date" field.
func FirstTransactionDateLTE(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLTE(FieldFirstTransactionDate, v))
}

// FirstTransactionDateIsNil applies the IsNil predicate on the "first_transaction_date" field.
func FirstTransactionDateIsNil() predicate.Affiliate {
	return predicate.Affiliate(sql.FieldIsNull(FieldFirstTransactionDate))
}

// FirstTransactionDateNotNil applies the NotNil predicate on the "first_transaction_date" field.
func FirstTransactionDateNotNil() predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNotNull(FieldFirstTransactionDate))
}

// CommissionEQ applies the EQ predicate on the "commission" field.
func CommissionEQ(v float64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldCommission, v))
}

// CommissionNEQ applies the NEQ predicate on the "commission" field.
func CommissionNEQ(v float64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNEQ(FieldCommission, v))
}

// CommissionIn applies the In predicate on the "commission" field.
func CommissionIn(vs ...float64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldIn(FieldCommission, vs...))
}

// CommissionNotIn applies the NotIn predicate on the "commission" field.
func CommissionNotIn(vs ...float64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNotIn(FieldCommission, vs...))
}

// CommissionGT applies the GT predicate on the "commission" field.
func CommissionGT(v float64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGT(FieldCommission, v))
}

// CommissionGTE applies the GTE predicate on the "commission" field.
func CommissionGTE(v float64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGTE(FieldCommission, v))
}

// CommissionLT applies the LT predicate on the "commission" field.
func CommissionLT(v float64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLT(FieldCommission, v))
}

// CommissionLTE applies the LTE predicate on the "commission" field.
func CommissionLTE(v float64) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLTE(FieldCommission, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.Affiliate {
	return predicate.Affiliate(sql.FieldLTE(FieldDate, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Affiliate {
	return predicate.Affiliate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Affiliate {
	return predicate.Affiliate(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Affiliate) predicate.Affiliate {
	return predicate.Affiliate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Affiliate) predicate.Affiliate {
	return predicate.Affiliate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Affiliate) predicate.Affiliate {
	return predicate.Affiliate(sql.NotPredicates(p))
}
