// Code generated by ent, DO NOT EDIT.

package affiliate

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the affiliate type in the database.
	Label = "affiliate"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTrackingCode holds the string denoting the tracking_code field in the database.
	FieldTrackingCode = "tracking_code"
	// FieldAffiliateUserID holds the string denoting the affiliate_user_id field in the database.
	FieldAffiliateUserID = "affiliate_user_id"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldRegistrationDate holds the string denoting the registration_date field in the database.
	FieldRegistrationDate = "registration_date"
	// FieldFirstTransactionDate holds the string denoting the first_transaction_date field in the database.
	FieldFirstTransactionDate = "first_transaction_date"
	// FieldCommission holds the string denoting the commission field in the database.
	FieldCommission = "commission"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the affiliate in the database.
	Table = "affiliates"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "affiliates"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_affiliates"
)

// Columns holds all SQL columns for affiliate fields.
var Columns = []string{
	FieldID,
	FieldTrackingCode,
	FieldAffiliateUserID,
	FieldSource,
	FieldRegistrationDate,
	FieldFirstTransactionDate,
	FieldCommission,
	FieldDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "affiliates"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_affiliates",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TrackingCodeValidator is a validator for the "tracking_code" field. It is called by the builders before save.
	TrackingCodeValidator func(string) error
	// AffiliateUserIDValidator is a validator for the "affiliate_user_id" field. It is called by the builders before save.
	AffiliateUserIDValidator func(string) error
	// DefaultRegistrationDate holds the default value on creation for the "registration_date" field.
	DefaultRegistrationDate time.Time
	// DefaultDate holds the default value on creation for the "date" field.
	DefaultDate func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// Source defines the type for the "source" enum field.
type Source string

// SourceBanner is the default value of the Source enum.
const DefaultSource = SourceBanner

// Source values.
const (
	SourceBanner   Source = "banner"
	SourceServices Source = "services"
	SourceProducts Source = "products"
)

func (s Source) String() string {
	return string(s)
}

// SourceValidator is a validator for the "source" field enum values. It is called by the builders before save.
func SourceValidator(s Source) error {
	switch s {
	case SourceBanner, SourceServices, SourceProducts:
		return nil
	default:
		return fmt.Errorf("affiliate: invalid enum value for source field: %q", s)
	}
}

// OrderOption defines the ordering options for the Affiliate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTrackingCode orders the results by the tracking_code field.
func ByTrackingCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrackingCode, opts...).ToFunc()
}

// ByAffiliateUserID orders the results by the affiliate_user_id field.
func ByAffiliateUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAffiliateUserID, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByRegistrationDate orders the results by the registration_date field.
func ByRegistrationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistrationDate, opts...).ToFunc()
}

// ByFirstTransactionDate orders the results by the first_transaction_date field.
func ByFirstTransactionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstTransactionDate, opts...).ToFunc()
}

// ByCommission orders the results by the commission field.
func ByCommission(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommission, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
