// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/campaign"
	"affluo/ent/referral"
	"affluo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReferralCreate is the builder for creating a Referral entity.
type ReferralCreate struct {
	config
	mutation *ReferralMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (rc *ReferralCreate) SetStatus(r referral.Status) *ReferralCreate {
	rc.mutation.SetStatus(r)
	return rc
}

// SetCommissionAmount sets the "commission_amount" field.
func (rc *ReferralCreate) SetCommissionAmount(f float64) *ReferralCreate {
	rc.mutation.SetCommissionAmount(f)
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReferralCreate) SetCreatedAt(t time.Time) *ReferralCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReferralCreate) SetNillableCreatedAt(t *time.Time) *ReferralCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetProcessedAt sets the "processed_at" field.
func (rc *ReferralCreate) SetProcessedAt(t time.Time) *ReferralCreate {
	rc.mutation.SetProcessedAt(t)
	return rc
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (rc *ReferralCreate) SetNillableProcessedAt(t *time.Time) *ReferralCreate {
	if t != nil {
		rc.SetProcessedAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ReferralCreate) SetID(i int64) *ReferralCreate {
	rc.mutation.SetID(i)
	return rc
}

// SetReferrerID sets the "referrer" edge to the User entity by ID.
func (rc *ReferralCreate) SetReferrerID(id int64) *ReferralCreate {
	rc.mutation.SetReferrerID(id)
	return rc
}

// SetNillableReferrerID sets the "referrer" edge to the User entity by ID if the given value is not nil.
func (rc *ReferralCreate) SetNillableReferrerID(id *int64) *ReferralCreate {
	if id != nil {
		rc = rc.SetReferrerID(*id)
	}
	return rc
}

// SetReferrer sets the "referrer" edge to the User entity.
func (rc *ReferralCreate) SetReferrer(u *User) *ReferralCreate {
	return rc.SetReferrerID(u.ID)
}

// SetCampaignID sets the "campaign" edge to the Campaign entity by ID.
func (rc *ReferralCreate) SetCampaignID(id int64) *ReferralCreate {
	rc.mutation.SetCampaignID(id)
	return rc
}

// SetNillableCampaignID sets the "campaign" edge to the Campaign entity by ID if the given value is not nil.
func (rc *ReferralCreate) SetNillableCampaignID(id *int64) *ReferralCreate {
	if id != nil {
		rc = rc.SetCampaignID(*id)
	}
	return rc
}

// SetCampaign sets the "campaign" edge to the Campaign entity.
func (rc *ReferralCreate) SetCampaign(c *Campaign) *ReferralCreate {
	return rc.SetCampaignID(c.ID)
}

// Mutation returns the ReferralMutation object of the builder.
func (rc *ReferralCreate) Mutation() *ReferralMutation {
	return rc.mutation
}

// Save creates the Referral in the database.
func (rc *ReferralCreate) Save(ctx context.Context) (*Referral, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReferralCreate) SaveX(ctx context.Context) *Referral {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReferralCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReferralCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReferralCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := referral.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReferralCreate) check() error {
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Referral.status"`)}
	}
	if v, ok := rc.mutation.Status(); ok {
		if err := referral.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Referral.status": %w`, err)}
		}
	}
	if _, ok := rc.mutation.CommissionAmount(); !ok {
		return &ValidationError{Name: "commission_amount", err: errors.New(`ent: missing required field "Referral.commission_amount"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Referral.created_at"`)}
	}
	if v, ok := rc.mutation.ID(); ok {
		if err := referral.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Referral.id": %w`, err)}
		}
	}
	return nil
}

func (rc *ReferralCreate) sqlSave(ctx context.Context) (*Referral, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReferralCreate) createSpec() (*Referral, *sqlgraph.CreateSpec) {
	var (
		_node = &Referral{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(referral.Table, sqlgraph.NewFieldSpec(referral.FieldID, field.TypeInt64))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(referral.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.CommissionAmount(); ok {
		_spec.SetField(referral.FieldCommissionAmount, field.TypeFloat64, value)
		_node.CommissionAmount = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(referral.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.ProcessedAt(); ok {
		_spec.SetField(referral.FieldProcessedAt, field.TypeTime, value)
		_node.ProcessedAt = value
	}
	if nodes := rc.mutation.ReferrerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   referral.ReferrerTable,
			Columns: []string{referral.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_referrals = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   referral.CampaignTable,
			Columns: []string{referral.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.campaign_referrals = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReferralCreateBulk is the builder for creating many Referral entities in bulk.
type ReferralCreateBulk struct {
	config
	err      error
	builders []*ReferralCreate
}

// Save creates the Referral entities in the database.
func (rcb *ReferralCreateBulk) Save(ctx context.Context) ([]*Referral, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Referral, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReferralMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReferralCreateBulk) SaveX(ctx context.Context) []*Referral {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReferralCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReferralCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
