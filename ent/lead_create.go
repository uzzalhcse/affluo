// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/banner"
	"affluo/ent/lead"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LeadCreate is the builder for creating a Lead entity.
type LeadCreate struct {
	config
	mutation *LeadMutation
	hooks    []Hook
}

// SetReferenceID sets the "reference_id" field.
func (lc *LeadCreate) SetReferenceID(s string) *LeadCreate {
	lc.mutation.SetReferenceID(s)
	return lc
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (lc *LeadCreate) SetNillableReferenceID(s *string) *LeadCreate {
	if s != nil {
		lc.SetReferenceID(*s)
	}
	return lc
}

// SetType sets the "type" field.
func (lc *LeadCreate) SetType(l lead.Type) *LeadCreate {
	lc.mutation.SetType(l)
	return lc
}

// SetAmount sets the "amount" field.
func (lc *LeadCreate) SetAmount(f float64) *LeadCreate {
	lc.mutation.SetAmount(f)
	return lc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (lc *LeadCreate) SetNillableAmount(f *float64) *LeadCreate {
	if f != nil {
		lc.SetAmount(*f)
	}
	return lc
}

// SetCurrency sets the "currency" field.
func (lc *LeadCreate) SetCurrency(s string) *LeadCreate {
	lc.mutation.SetCurrency(s)
	return lc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (lc *LeadCreate) SetNillableCurrency(s *string) *LeadCreate {
	if s != nil {
		lc.SetCurrency(*s)
	}
	return lc
}

// SetIPAddress sets the "ip_address" field.
func (lc *LeadCreate) SetIPAddress(s string) *LeadCreate {
	lc.mutation.SetIPAddress(s)
	return lc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (lc *LeadCreate) SetNillableIPAddress(s *string) *LeadCreate {
	if s != nil {
		lc.SetIPAddress(*s)
	}
	return lc
}

// SetUserAgent sets the "user_agent" field.
func (lc *LeadCreate) SetUserAgent(s string) *LeadCreate {
	lc.mutation.SetUserAgent(s)
	return lc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (lc *LeadCreate) SetNillableUserAgent(s *string) *LeadCreate {
	if s != nil {
		lc.SetUserAgent(*s)
	}
	return lc
}

// SetMetadata sets the "metadata" field.
func (lc *LeadCreate) SetMetadata(m map[string]interface{}) *LeadCreate {
	lc.mutation.SetMetadata(m)
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LeadCreate) SetCreatedAt(t time.Time) *LeadCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LeadCreate) SetNillableCreatedAt(t *time.Time) *LeadCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LeadCreate) SetID(i int64) *LeadCreate {
	lc.mutation.SetID(i)
	return lc
}

// SetBannerID sets the "banner" edge to the Banner entity by ID.
func (lc *LeadCreate) SetBannerID(id int64) *LeadCreate {
	lc.mutation.SetBannerID(id)
	return lc
}

// SetNillableBannerID sets the "banner" edge to the Banner entity by ID if the given value is not nil.
func (lc *LeadCreate) SetNillableBannerID(id *int64) *LeadCreate {
	if id != nil {
		lc = lc.SetBannerID(*id)
	}
	return lc
}

// SetBanner sets the "banner" edge to the Banner entity.
func (lc *LeadCreate) SetBanner(b *Banner) *LeadCreate {
	return lc.SetBannerID(b.ID)
}

// Mutation returns the LeadMutation object of the builder.
func (lc *LeadCreate) Mutation() *LeadMutation {
	return lc.mutation
}

// Save creates the Lead in the database.
func (lc *LeadCreate) Save(ctx context.Context) (*Lead, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LeadCreate) SaveX(ctx context.Context) *Lead {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LeadCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LeadCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LeadCreate) defaults() {
	if _, ok := lc.mutation.Currency(); !ok {
		v := lead.DefaultCurrency
		lc.mutation.SetCurrency(v)
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := lead.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LeadCreate) check() error {
	if _, ok := lc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Lead.type"`)}
	}
	if v, ok := lc.mutation.GetType(); ok {
		if err := lead.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Lead.type": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Lead.currency"`)}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Lead.created_at"`)}
	}
	return nil
}

func (lc *LeadCreate) sqlSave(ctx context.Context) (*Lead, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LeadCreate) createSpec() (*Lead, *sqlgraph.CreateSpec) {
	var (
		_node = &Lead{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(lead.Table, sqlgraph.NewFieldSpec(lead.FieldID, field.TypeInt64))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.ReferenceID(); ok {
		_spec.SetField(lead.FieldReferenceID, field.TypeString, value)
		_node.ReferenceID = value
	}
	if value, ok := lc.mutation.GetType(); ok {
		_spec.SetField(lead.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := lc.mutation.Amount(); ok {
		_spec.SetField(lead.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := lc.mutation.Currency(); ok {
		_spec.SetField(lead.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := lc.mutation.IPAddress(); ok {
		_spec.SetField(lead.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := lc.mutation.UserAgent(); ok {
		_spec.SetField(lead.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := lc.mutation.Metadata(); ok {
		_spec.SetField(lead.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(lead.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := lc.mutation.BannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lead.BannerTable,
			Columns: []string{lead.BannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.banner_leads = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LeadCreateBulk is the builder for creating many Lead entities in bulk.
type LeadCreateBulk struct {
	config
	err      error
	builders []*LeadCreate
}

// Save creates the Lead entities in the database.
func (lcb *LeadCreateBulk) Save(ctx context.Context) ([]*Lead, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Lead, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LeadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LeadCreateBulk) SaveX(ctx context.Context) []*Lead {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LeadCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LeadCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
