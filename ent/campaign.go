// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/campaign"
	"affluo/ent/schema"
	"affluo/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Campaign is the model entity for the Campaign schema.
type Campaign struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// UniqueCode holds the value of the "unique_code" field.
	UniqueCode string `json:"unique_code,omitempty"`
	// Type holds the value of the "type" field.
	Type campaign.Type `json:"type,omitempty"`
	// CommissionType holds the value of the "commission_type" field.
	CommissionType campaign.CommissionType `json:"commission_type,omitempty"`
	// BaseCommissionRate holds the value of the "base_commission_rate" field.
	BaseCommissionRate float64 `json:"base_commission_rate,omitempty"`
	// CommissionTiers holds the value of the "commission_tiers" field.
	CommissionTiers []schema.CommissionTier `json:"commission_tiers,omitempty"`
	// TargetGeography holds the value of the "target_geography" field.
	TargetGeography string `json:"target_geography,omitempty"`
	// TargetDemographics holds the value of the "target_demographics" field.
	TargetDemographics map[string]interface{} `json:"target_demographics,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// Status holds the value of the "status" field.
	Status campaign.Status `json:"status,omitempty"`
	// TrackingURL holds the value of the "tracking_url" field.
	TrackingURL string `json:"tracking_url,omitempty"`
	// TotalClicks holds the value of the "total_clicks" field.
	TotalClicks int `json:"total_clicks,omitempty"`
	// TotalConversions holds the value of the "total_conversions" field.
	TotalConversions int `json:"total_conversions,omitempty"`
	// TotalRevenue holds the value of the "total_revenue" field.
	TotalRevenue float64 `json:"total_revenue,omitempty"`
	// ConversionRate holds the value of the "conversion_rate" field.
	ConversionRate float64 `json:"conversion_rate,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CampaignQuery when eager-loading is set.
	Edges          CampaignEdges `json:"edges"`
	user_campaigns *int64
	selectValues   sql.SelectValues
}

// CampaignEdges holds the relations/edges for other nodes in the graph.
type CampaignEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Links holds the value of the links edge.
	Links []*CampaignLink `json:"links,omitempty"`
	// Tracks holds the value of the tracks edge.
	Tracks []*Track `json:"tracks,omitempty"`
	// Referrals holds the value of the referrals edge.
	Referrals []*Referral `json:"referrals,omitempty"`
	// Banners holds the value of the banners edge.
	Banners []*Banner `json:"banners,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CampaignEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// LinksOrErr returns the Links value or an error if the edge
// was not loaded in eager-loading.
func (e CampaignEdges) LinksOrErr() ([]*CampaignLink, error) {
	if e.loadedTypes[1] {
		return e.Links, nil
	}
	return nil, &NotLoadedError{edge: "links"}
}

// TracksOrErr returns the Tracks value or an error if the edge
// was not loaded in eager-loading.
func (e CampaignEdges) TracksOrErr() ([]*Track, error) {
	if e.loadedTypes[2] {
		return e.Tracks, nil
	}
	return nil, &NotLoadedError{edge: "tracks"}
}

// ReferralsOrErr returns the Referrals value or an error if the edge
// was not loaded in eager-loading.
func (e CampaignEdges) ReferralsOrErr() ([]*Referral, error) {
	if e.loadedTypes[3] {
		return e.Referrals, nil
	}
	return nil, &NotLoadedError{edge: "referrals"}
}

// BannersOrErr returns the Banners value or an error if the edge
// was not loaded in eager-loading.
func (e CampaignEdges) BannersOrErr() ([]*Banner, error) {
	if e.loadedTypes[4] {
		return e.Banners, nil
	}
	return nil, &NotLoadedError{edge: "banners"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Campaign) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case campaign.FieldCommissionTiers, campaign.FieldTargetDemographics:
			values[i] = new([]byte)
		case campaign.FieldBaseCommissionRate, campaign.FieldTotalRevenue, campaign.FieldConversionRate:
			values[i] = new(sql.NullFloat64)
		case campaign.FieldID, campaign.FieldTotalClicks, campaign.FieldTotalConversions:
			values[i] = new(sql.NullInt64)
		case campaign.FieldName, campaign.FieldDescription, campaign.FieldUniqueCode, campaign.FieldType, campaign.FieldCommissionType, campaign.FieldTargetGeography, campaign.FieldStatus, campaign.FieldTrackingURL:
			values[i] = new(sql.NullString)
		case campaign.FieldStartDate, campaign.FieldEndDate, campaign.FieldCreatedAt, campaign.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case campaign.ForeignKeys[0]: // user_campaigns
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Campaign fields.
func (c *Campaign) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case campaign.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int64(value.Int64)
		case campaign.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case campaign.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case campaign.FieldUniqueCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unique_code", values[i])
			} else if value.Valid {
				c.UniqueCode = value.String
			}
		case campaign.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = campaign.Type(value.String)
			}
		case campaign.FieldCommissionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commission_type", values[i])
			} else if value.Valid {
				c.CommissionType = campaign.CommissionType(value.String)
			}
		case campaign.FieldBaseCommissionRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field base_commission_rate", values[i])
			} else if value.Valid {
				c.BaseCommissionRate = value.Float64
			}
		case campaign.FieldCommissionTiers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field commission_tiers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.CommissionTiers); err != nil {
					return fmt.Errorf("unmarshal field commission_tiers: %w", err)
				}
			}
		case campaign.FieldTargetGeography:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_geography", values[i])
			} else if value.Valid {
				c.TargetGeography = value.String
			}
		case campaign.FieldTargetDemographics:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field target_demographics", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.TargetDemographics); err != nil {
					return fmt.Errorf("unmarshal field target_demographics: %w", err)
				}
			}
		case campaign.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				c.StartDate = value.Time
			}
		case campaign.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				c.EndDate = value.Time
			}
		case campaign.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = campaign.Status(value.String)
			}
		case campaign.FieldTrackingURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_url", values[i])
			} else if value.Valid {
				c.TrackingURL = value.String
			}
		case campaign.FieldTotalClicks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_clicks", values[i])
			} else if value.Valid {
				c.TotalClicks = int(value.Int64)
			}
		case campaign.FieldTotalConversions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_conversions", values[i])
			} else if value.Valid {
				c.TotalConversions = int(value.Int64)
			}
		case campaign.FieldTotalRevenue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_revenue", values[i])
			} else if value.Valid {
				c.TotalRevenue = value.Float64
			}
		case campaign.FieldConversionRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field conversion_rate", values[i])
			} else if value.Valid {
				c.ConversionRate = value.Float64
			}
		case campaign.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case campaign.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case campaign.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_campaigns", value)
			} else if value.Valid {
				c.user_campaigns = new(int64)
				*c.user_campaigns = int64(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Campaign.
// This includes values selected through modifiers, order, etc.
func (c *Campaign) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Campaign entity.
func (c *Campaign) QueryOwner() *UserQuery {
	return NewCampaignClient(c.config).QueryOwner(c)
}

// QueryLinks queries the "links" edge of the Campaign entity.
func (c *Campaign) QueryLinks() *CampaignLinkQuery {
	return NewCampaignClient(c.config).QueryLinks(c)
}

// QueryTracks queries the "tracks" edge of the Campaign entity.
func (c *Campaign) QueryTracks() *TrackQuery {
	return NewCampaignClient(c.config).QueryTracks(c)
}

// QueryReferrals queries the "referrals" edge of the Campaign entity.
func (c *Campaign) QueryReferrals() *ReferralQuery {
	return NewCampaignClient(c.config).QueryReferrals(c)
}

// QueryBanners queries the "banners" edge of the Campaign entity.
func (c *Campaign) QueryBanners() *BannerQuery {
	return NewCampaignClient(c.config).QueryBanners(c)
}

// Update returns a builder for updating this Campaign.
// Note that you need to call Campaign.Unwrap() before calling this method if this Campaign
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Campaign) Update() *CampaignUpdateOne {
	return NewCampaignClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Campaign entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Campaign) Unwrap() *Campaign {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Campaign is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Campaign) String() string {
	var builder strings.Builder
	builder.WriteString("Campaign(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("unique_code=")
	builder.WriteString(c.UniqueCode)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("commission_type=")
	builder.WriteString(fmt.Sprintf("%v", c.CommissionType))
	builder.WriteString(", ")
	builder.WriteString("base_commission_rate=")
	builder.WriteString(fmt.Sprintf("%v", c.BaseCommissionRate))
	builder.WriteString(", ")
	builder.WriteString("commission_tiers=")
	builder.WriteString(fmt.Sprintf("%v", c.CommissionTiers))
	builder.WriteString(", ")
	builder.WriteString("target_geography=")
	builder.WriteString(c.TargetGeography)
	builder.WriteString(", ")
	builder.WriteString("target_demographics=")
	builder.WriteString(fmt.Sprintf("%v", c.TargetDemographics))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(c.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(c.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("tracking_url=")
	builder.WriteString(c.TrackingURL)
	builder.WriteString(", ")
	builder.WriteString("total_clicks=")
	builder.WriteString(fmt.Sprintf("%v", c.TotalClicks))
	builder.WriteString(", ")
	builder.WriteString("total_conversions=")
	builder.WriteString(fmt.Sprintf("%v", c.TotalConversions))
	builder.WriteString(", ")
	builder.WriteString("total_revenue=")
	builder.WriteString(fmt.Sprintf("%v", c.TotalRevenue))
	builder.WriteString(", ")
	builder.WriteString("conversion_rate=")
	builder.WriteString(fmt.Sprintf("%v", c.ConversionRate))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Campaigns is a parsable slice of Campaign.
type Campaigns []*Campaign
