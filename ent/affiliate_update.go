// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/affiliate"
	"affluo/ent/predicate"
	"affluo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AffiliateUpdate is the builder for updating Affiliate entities.
type AffiliateUpdate struct {
	config
	hooks    []Hook
	mutation *AffiliateMutation
}

// Where appends a list predicates to the AffiliateUpdate builder.
func (au *AffiliateUpdate) Where(ps ...predicate.Affiliate) *AffiliateUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetTrackingCode sets the "tracking_code" field.
func (au *AffiliateUpdate) SetTrackingCode(s string) *AffiliateUpdate {
	au.mutation.SetTrackingCode(s)
	return au
}

// SetNillableTrackingCode sets the "tracking_code" field if the given value is not nil.
func (au *AffiliateUpdate) SetNillableTrackingCode(s *string) *AffiliateUpdate {
	if s != nil {
		au.SetTrackingCode(*s)
	}
	return au
}

// ClearTrackingCode clears the value of the "tracking_code" field.
func (au *AffiliateUpdate) ClearTrackingCode() *AffiliateUpdate {
	au.mutation.ClearTrackingCode()
	return au
}

// SetAffiliateUserID sets the "affiliate_user_id" field.
func (au *AffiliateUpdate) SetAffiliateUserID(s string) *AffiliateUpdate {
	au.mutation.SetAffiliateUserID(s)
	return au
}

// SetNillableAffiliateUserID sets the "affiliate_user_id" field if the given value is not nil.
func (au *AffiliateUpdate) SetNillableAffiliateUserID(s *string) *AffiliateUpdate {
	if s != nil {
		au.SetAffiliateUserID(*s)
	}
	return au
}

// SetSource sets the "source" field.
func (au *AffiliateUpdate) SetSource(a affiliate.Source) *AffiliateUpdate {
	au.mutation.SetSource(a)
	return au
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (au *AffiliateUpdate) SetNillableSource(a *affiliate.Source) *AffiliateUpdate {
	if a != nil {
		au.SetSource(*a)
	}
	return au
}

// SetRegistrationDate sets the "registration_date" field.
func (au *AffiliateUpdate) SetRegistrationDate(t time.Time) *AffiliateUpdate {
	au.mutation.SetRegistrationDate(t)
	return au
}

// SetNillableRegistrationDate sets the "registration_date" field if the given value is not nil.
func (au *AffiliateUpdate) SetNillableRegistrationDate(t *time.Time) *AffiliateUpdate {
	if t != nil {
		au.SetRegistrationDate(*t)
	}
	return au
}

// SetFirstTransactionDate sets the "first_transaction_date" field.
func (au *AffiliateUpdate) SetFirstTransactionDate(t time.Time) *AffiliateUpdate {
	au.mutation.SetFirstTransactionDate(t)
	return au
}

// SetNillableFirstTransactionDate sets the "first_transaction_date" field if the given value is not nil.
func (au *AffiliateUpdate) SetNillableFirstTransactionDate(t *time.Time) *AffiliateUpdate {
	if t != nil {
		au.SetFirstTransactionDate(*t)
	}
	return au
}

// ClearFirstTransactionDate clears the value of the "first_transaction_date" field.
func (au *AffiliateUpdate) ClearFirstTransactionDate() *AffiliateUpdate {
	au.mutation.ClearFirstTransactionDate()
	return au
}

// SetCommission sets the "commission" field.
func (au *AffiliateUpdate) SetCommission(f float64) *AffiliateUpdate {
	au.mutation.ResetCommission()
	au.mutation.SetCommission(f)
	return au
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (au *AffiliateUpdate) SetNillableCommission(f *float64) *AffiliateUpdate {
	if f != nil {
		au.SetCommission(*f)
	}
	return au
}

// AddCommission adds f to the "commission" field.
func (au *AffiliateUpdate) AddCommission(f float64) *AffiliateUpdate {
	au.mutation.AddCommission(f)
	return au
}

// SetDate sets the "date" field.
func (au *AffiliateUpdate) SetDate(t time.Time) *AffiliateUpdate {
	au.mutation.SetDate(t)
	return au
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (au *AffiliateUpdate) SetNillableDate(t *time.Time) *AffiliateUpdate {
	if t != nil {
		au.SetDate(*t)
	}
	return au
}

// SetUserID sets the "user" edge to the User entity by ID.
func (au *AffiliateUpdate) SetUserID(id int64) *AffiliateUpdate {
	au.mutation.SetUserID(id)
	return au
}

// SetUser sets the "user" edge to the User entity.
func (au *AffiliateUpdate) SetUser(u *User) *AffiliateUpdate {
	return au.SetUserID(u.ID)
}

// Mutation returns the AffiliateMutation object of the builder.
func (au *AffiliateUpdate) Mutation() *AffiliateMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (au *AffiliateUpdate) ClearUser() *AffiliateUpdate {
	au.mutation.ClearUser()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AffiliateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AffiliateUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AffiliateUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AffiliateUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AffiliateUpdate) check() error {
	if v, ok := au.mutation.Source(); ok {
		if err := affiliate.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "Affiliate.source": %w`, err)}
		}
	}
	if au.mutation.UserCleared() && len(au.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Affiliate.user"`)
	}
	return nil
}

func (au *AffiliateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(affiliate.Table, affiliate.Columns, sqlgraph.NewFieldSpec(affiliate.FieldID, field.TypeInt64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.TrackingCode(); ok {
		_spec.SetField(affiliate.FieldTrackingCode, field.TypeString, value)
	}
	if au.mutation.TrackingCodeCleared() {
		_spec.ClearField(affiliate.FieldTrackingCode, field.TypeString)
	}
	if value, ok := au.mutation.AffiliateUserID(); ok {
		_spec.SetField(affiliate.FieldAffiliateUserID, field.TypeString, value)
	}
	if value, ok := au.mutation.Source(); ok {
		_spec.SetField(affiliate.FieldSource, field.TypeEnum, value)
	}
	if value, ok := au.mutation.RegistrationDate(); ok {
		_spec.SetField(affiliate.FieldRegistrationDate, field.TypeTime, value)
	}
	if value, ok := au.mutation.FirstTransactionDate(); ok {
		_spec.SetField(affiliate.FieldFirstTransactionDate, field.TypeTime, value)
	}
	if au.mutation.FirstTransactionDateCleared() {
		_spec.ClearField(affiliate.FieldFirstTransactionDate, field.TypeTime)
	}
	if value, ok := au.mutation.Commission(); ok {
		_spec.SetField(affiliate.FieldCommission, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedCommission(); ok {
		_spec.AddField(affiliate.FieldCommission, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.Date(); ok {
		_spec.SetField(affiliate.FieldDate, field.TypeTime, value)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   affiliate.UserTable,
			Columns: []string{affiliate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   affiliate.UserTable,
			Columns: []string{affiliate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{affiliate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AffiliateUpdateOne is the builder for updating a single Affiliate entity.
type AffiliateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AffiliateMutation
}

// SetTrackingCode sets the "tracking_code" field.
func (auo *AffiliateUpdateOne) SetTrackingCode(s string) *AffiliateUpdateOne {
	auo.mutation.SetTrackingCode(s)
	return auo
}

// SetNillableTrackingCode sets the "tracking_code" field if the given value is not nil.
func (auo *AffiliateUpdateOne) SetNillableTrackingCode(s *string) *AffiliateUpdateOne {
	if s != nil {
		auo.SetTrackingCode(*s)
	}
	return auo
}

// ClearTrackingCode clears the value of the "tracking_code" field.
func (auo *AffiliateUpdateOne) ClearTrackingCode() *AffiliateUpdateOne {
	auo.mutation.ClearTrackingCode()
	return auo
}

// SetAffiliateUserID sets the "affiliate_user_id" field.
func (auo *AffiliateUpdateOne) SetAffiliateUserID(s string) *AffiliateUpdateOne {
	auo.mutation.SetAffiliateUserID(s)
	return auo
}

// SetNillableAffiliateUserID sets the "affiliate_user_id" field if the given value is not nil.
func (auo *AffiliateUpdateOne) SetNillableAffiliateUserID(s *string) *AffiliateUpdateOne {
	if s != nil {
		auo.SetAffiliateUserID(*s)
	}
	return auo
}

// SetSource sets the "source" field.
func (auo *AffiliateUpdateOne) SetSource(a affiliate.Source) *AffiliateUpdateOne {
	auo.mutation.SetSource(a)
	return auo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (auo *AffiliateUpdateOne) SetNillableSource(a *affiliate.Source) *AffiliateUpdateOne {
	if a != nil {
		auo.SetSource(*a)
	}
	return auo
}

// SetRegistrationDate sets the "registration_date" field.
func (auo *AffiliateUpdateOne) SetRegistrationDate(t time.Time) *AffiliateUpdateOne {
	auo.mutation.SetRegistrationDate(t)
	return auo
}

// SetNillableRegistrationDate sets the "registration_date" field if the given value is not nil.
func (auo *AffiliateUpdateOne) SetNillableRegistrationDate(t *time.Time) *AffiliateUpdateOne {
	if t != nil {
		auo.SetRegistrationDate(*t)
	}
	return auo
}

// SetFirstTransactionDate sets the "first_transaction_date" field.
func (auo *AffiliateUpdateOne) SetFirstTransactionDate(t time.Time) *AffiliateUpdateOne {
	auo.mutation.SetFirstTransactionDate(t)
	return auo
}

// SetNillableFirstTransactionDate sets the "first_transaction_date" field if the given value is not nil.
func (auo *AffiliateUpdateOne) SetNillableFirstTransactionDate(t *time.Time) *AffiliateUpdateOne {
	if t != nil {
		auo.SetFirstTransactionDate(*t)
	}
	return auo
}

// ClearFirstTransactionDate clears the value of the "first_transaction_date" field.
func (auo *AffiliateUpdateOne) ClearFirstTransactionDate() *AffiliateUpdateOne {
	auo.mutation.ClearFirstTransactionDate()
	return auo
}

// SetCommission sets the "commission" field.
func (auo *AffiliateUpdateOne) SetCommission(f float64) *AffiliateUpdateOne {
	auo.mutation.ResetCommission()
	auo.mutation.SetCommission(f)
	return auo
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (auo *AffiliateUpdateOne) SetNillableCommission(f *float64) *AffiliateUpdateOne {
	if f != nil {
		auo.SetCommission(*f)
	}
	return auo
}

// AddCommission adds f to the "commission" field.
func (auo *AffiliateUpdateOne) AddCommission(f float64) *AffiliateUpdateOne {
	auo.mutation.AddCommission(f)
	return auo
}

// SetDate sets the "date" field.
func (auo *AffiliateUpdateOne) SetDate(t time.Time) *AffiliateUpdateOne {
	auo.mutation.SetDate(t)
	return auo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (auo *AffiliateUpdateOne) SetNillableDate(t *time.Time) *AffiliateUpdateOne {
	if t != nil {
		auo.SetDate(*t)
	}
	return auo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (auo *AffiliateUpdateOne) SetUserID(id int64) *AffiliateUpdateOne {
	auo.mutation.SetUserID(id)
	return auo
}

// SetUser sets the "user" edge to the User entity.
func (auo *AffiliateUpdateOne) SetUser(u *User) *AffiliateUpdateOne {
	return auo.SetUserID(u.ID)
}

// Mutation returns the AffiliateMutation object of the builder.
func (auo *AffiliateUpdateOne) Mutation() *AffiliateMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (auo *AffiliateUpdateOne) ClearUser() *AffiliateUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// Where appends a list predicates to the AffiliateUpdate builder.
func (auo *AffiliateUpdateOne) Where(ps ...predicate.Affiliate) *AffiliateUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AffiliateUpdateOne) Select(field string, fields ...string) *AffiliateUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Affiliate entity.
func (auo *AffiliateUpdateOne) Save(ctx context.Context) (*Affiliate, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AffiliateUpdateOne) SaveX(ctx context.Context) *Affiliate {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AffiliateUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AffiliateUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AffiliateUpdateOne) check() error {
	if v, ok := auo.mutation.Source(); ok {
		if err := affiliate.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "Affiliate.source": %w`, err)}
		}
	}
	if auo.mutation.UserCleared() && len(auo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Affiliate.user"`)
	}
	return nil
}

func (auo *AffiliateUpdateOne) sqlSave(ctx context.Context) (_node *Affiliate, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(affiliate.Table, affiliate.Columns, sqlgraph.NewFieldSpec(affiliate.FieldID, field.TypeInt64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Affiliate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, affiliate.FieldID)
		for _, f := range fields {
			if !affiliate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != affiliate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.TrackingCode(); ok {
		_spec.SetField(affiliate.FieldTrackingCode, field.TypeString, value)
	}
	if auo.mutation.TrackingCodeCleared() {
		_spec.ClearField(affiliate.FieldTrackingCode, field.TypeString)
	}
	if value, ok := auo.mutation.AffiliateUserID(); ok {
		_spec.SetField(affiliate.FieldAffiliateUserID, field.TypeString, value)
	}
	if value, ok := auo.mutation.Source(); ok {
		_spec.SetField(affiliate.FieldSource, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.RegistrationDate(); ok {
		_spec.SetField(affiliate.FieldRegistrationDate, field.TypeTime, value)
	}
	if value, ok := auo.mutation.FirstTransactionDate(); ok {
		_spec.SetField(affiliate.FieldFirstTransactionDate, field.TypeTime, value)
	}
	if auo.mutation.FirstTransactionDateCleared() {
		_spec.ClearField(affiliate.FieldFirstTransactionDate, field.TypeTime)
	}
	if value, ok := auo.mutation.Commission(); ok {
		_spec.SetField(affiliate.FieldCommission, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedCommission(); ok {
		_spec.AddField(affiliate.FieldCommission, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.Date(); ok {
		_spec.SetField(affiliate.FieldDate, field.TypeTime, value)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   affiliate.UserTable,
			Columns: []string{affiliate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   affiliate.UserTable,
			Columns: []string{affiliate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Affiliate{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{affiliate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
