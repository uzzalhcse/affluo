// Code generated by ent, DO NOT EDIT.

package ent

import (
	"affluo/ent/payout"
	"affluo/ent/predicate"
	"affluo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PayoutUpdate is the builder for updating Payout entities.
type PayoutUpdate struct {
	config
	hooks    []Hook
	mutation *PayoutMutation
}

// Where appends a list predicates to the PayoutUpdate builder.
func (pu *PayoutUpdate) Where(ps ...predicate.Payout) *PayoutUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetAmount sets the "amount" field.
func (pu *PayoutUpdate) SetAmount(f float64) *PayoutUpdate {
	pu.mutation.ResetAmount()
	pu.mutation.SetAmount(f)
	return pu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pu *PayoutUpdate) SetNillableAmount(f *float64) *PayoutUpdate {
	if f != nil {
		pu.SetAmount(*f)
	}
	return pu
}

// AddAmount adds f to the "amount" field.
func (pu *PayoutUpdate) AddAmount(f float64) *PayoutUpdate {
	pu.mutation.AddAmount(f)
	return pu
}

// SetPaidAt sets the "paid_at" field.
func (pu *PayoutUpdate) SetPaidAt(t time.Time) *PayoutUpdate {
	pu.mutation.SetPaidAt(t)
	return pu
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (pu *PayoutUpdate) SetNillablePaidAt(t *time.Time) *PayoutUpdate {
	if t != nil {
		pu.SetPaidAt(*t)
	}
	return pu
}

// SetStatus sets the "status" field.
func (pu *PayoutUpdate) SetStatus(pa payout.Status) *PayoutUpdate {
	pu.mutation.SetStatus(pa)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PayoutUpdate) SetNillableStatus(pa *payout.Status) *PayoutUpdate {
	if pa != nil {
		pu.SetStatus(*pa)
	}
	return pu
}

// SetTransactionID sets the "transaction_id" field.
func (pu *PayoutUpdate) SetTransactionID(s string) *PayoutUpdate {
	pu.mutation.SetTransactionID(s)
	return pu
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (pu *PayoutUpdate) SetNillableTransactionID(s *string) *PayoutUpdate {
	if s != nil {
		pu.SetTransactionID(*s)
	}
	return pu
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (pu *PayoutUpdate) ClearTransactionID() *PayoutUpdate {
	pu.mutation.ClearTransactionID()
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *PayoutUpdate) SetUserID(id int64) *PayoutUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pu *PayoutUpdate) SetNillableUserID(id *int64) *PayoutUpdate {
	if id != nil {
		pu = pu.SetUserID(*id)
	}
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PayoutUpdate) SetUser(u *User) *PayoutUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the PayoutMutation object of the builder.
func (pu *PayoutUpdate) Mutation() *PayoutMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PayoutUpdate) ClearUser() *PayoutUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PayoutUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PayoutUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PayoutUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PayoutUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PayoutUpdate) check() error {
	if v, ok := pu.mutation.Status(); ok {
		if err := payout.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Payout.status": %w`, err)}
		}
	}
	return nil
}

func (pu *PayoutUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(payout.Table, payout.Columns, sqlgraph.NewFieldSpec(payout.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Amount(); ok {
		_spec.SetField(payout.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedAmount(); ok {
		_spec.AddField(payout.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.PaidAt(); ok {
		_spec.SetField(payout.FieldPaidAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(payout.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.TransactionID(); ok {
		_spec.SetField(payout.FieldTransactionID, field.TypeString, value)
	}
	if pu.mutation.TransactionIDCleared() {
		_spec.ClearField(payout.FieldTransactionID, field.TypeString)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payout.UserTable,
			Columns: []string{payout.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payout.UserTable,
			Columns: []string{payout.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PayoutUpdateOne is the builder for updating a single Payout entity.
type PayoutUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PayoutMutation
}

// SetAmount sets the "amount" field.
func (puo *PayoutUpdateOne) SetAmount(f float64) *PayoutUpdateOne {
	puo.mutation.ResetAmount()
	puo.mutation.SetAmount(f)
	return puo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (puo *PayoutUpdateOne) SetNillableAmount(f *float64) *PayoutUpdateOne {
	if f != nil {
		puo.SetAmount(*f)
	}
	return puo
}

// AddAmount adds f to the "amount" field.
func (puo *PayoutUpdateOne) AddAmount(f float64) *PayoutUpdateOne {
	puo.mutation.AddAmount(f)
	return puo
}

// SetPaidAt sets the "paid_at" field.
func (puo *PayoutUpdateOne) SetPaidAt(t time.Time) *PayoutUpdateOne {
	puo.mutation.SetPaidAt(t)
	return puo
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (puo *PayoutUpdateOne) SetNillablePaidAt(t *time.Time) *PayoutUpdateOne {
	if t != nil {
		puo.SetPaidAt(*t)
	}
	return puo
}

// SetStatus sets the "status" field.
func (puo *PayoutUpdateOne) SetStatus(pa payout.Status) *PayoutUpdateOne {
	puo.mutation.SetStatus(pa)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PayoutUpdateOne) SetNillableStatus(pa *payout.Status) *PayoutUpdateOne {
	if pa != nil {
		puo.SetStatus(*pa)
	}
	return puo
}

// SetTransactionID sets the "transaction_id" field.
func (puo *PayoutUpdateOne) SetTransactionID(s string) *PayoutUpdateOne {
	puo.mutation.SetTransactionID(s)
	return puo
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (puo *PayoutUpdateOne) SetNillableTransactionID(s *string) *PayoutUpdateOne {
	if s != nil {
		puo.SetTransactionID(*s)
	}
	return puo
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (puo *PayoutUpdateOne) ClearTransactionID() *PayoutUpdateOne {
	puo.mutation.ClearTransactionID()
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *PayoutUpdateOne) SetUserID(id int64) *PayoutUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (puo *PayoutUpdateOne) SetNillableUserID(id *int64) *PayoutUpdateOne {
	if id != nil {
		puo = puo.SetUserID(*id)
	}
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PayoutUpdateOne) SetUser(u *User) *PayoutUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the PayoutMutation object of the builder.
func (puo *PayoutUpdateOne) Mutation() *PayoutMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PayoutUpdateOne) ClearUser() *PayoutUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Where appends a list predicates to the PayoutUpdate builder.
func (puo *PayoutUpdateOne) Where(ps ...predicate.Payout) *PayoutUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PayoutUpdateOne) Select(field string, fields ...string) *PayoutUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Payout entity.
func (puo *PayoutUpdateOne) Save(ctx context.Context) (*Payout, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PayoutUpdateOne) SaveX(ctx context.Context) *Payout {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PayoutUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PayoutUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PayoutUpdateOne) check() error {
	if v, ok := puo.mutation.Status(); ok {
		if err := payout.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Payout.status": %w`, err)}
		}
	}
	return nil
}

func (puo *PayoutUpdateOne) sqlSave(ctx context.Context) (_node *Payout, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(payout.Table, payout.Columns, sqlgraph.NewFieldSpec(payout.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Payout.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payout.FieldID)
		for _, f := range fields {
			if !payout.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != payout.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Amount(); ok {
		_spec.SetField(payout.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedAmount(); ok {
		_spec.AddField(payout.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.PaidAt(); ok {
		_spec.SetField(payout.FieldPaidAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(payout.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.TransactionID(); ok {
		_spec.SetField(payout.FieldTransactionID, field.TypeString, value)
	}
	if puo.mutation.TransactionIDCleared() {
		_spec.ClearField(payout.FieldTransactionID, field.TypeString)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payout.UserTable,
			Columns: []string{payout.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payout.UserTable,
			Columns: []string{payout.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Payout{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
